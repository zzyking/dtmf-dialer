{"ast":null,"code":"// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isEmittingMessageEvents = false;\n    let isEmittingProcessorErrorEvents = false;\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      audioWorkletNode.port.onmessage = () => isEmittingMessageEvents = true;\n      audioWorkletNode.onprocessorerror = () => isEmittingProcessorErrorEvents = true;\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n      // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.\n      await new Promise(resolve => setTimeout(resolve));\n    } catch {\n      // Ignore errors.\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n    return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n  };\n};","map":{"version":3,"names":["createTestAudioWorkletProcessorPostMessageSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","offlineAudioContext","url","URL","createObjectURL","isEmittingMessageEvents","isEmittingProcessorErrorEvents","audioWorklet","addModule","audioWorkletNode","numberOfOutputs","oscillator","createOscillator","port","onmessage","onprocessorerror","connect","start","startRendering","Promise","resolve","setTimeout","revokeObjectURL"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/factories/test-audio-worklet-processor-post-message-support.ts"],"sourcesContent":["import { TTestAudioWorkletProcessorPostMessageSupportFactory } from '../types';\n\n// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport: TTestAudioWorkletProcessorPostMessageSupportFactory = (\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor\n) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const blob = new Blob(\n            ['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'],\n            {\n                type: 'application/javascript; charset=utf-8'\n            }\n        );\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n\n        let isEmittingMessageEvents = false;\n        let isEmittingProcessorErrorEvents = false;\n\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n\n            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);\n            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n\n            await offlineAudioContext.startRendering();\n\n            // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.\n            await new Promise((resolve) => setTimeout(resolve));\n        } catch {\n            // Ignore errors.\n        } finally {\n            URL.revokeObjectURL(url);\n        }\n\n        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n    };\n};\n"],"mappings":"AAEA;AACA,OAAO,MAAMA,iDAAiD,GAAwDA,CAClHC,iCAAiC,EACjCC,oCAAoC,KACpC;EACA,OAAO,YAAW;IACd;IACA,IAAID,iCAAiC,KAAK,IAAI,EAAE;MAC5C,OAAO,IAAI;IACf;IAEA,IAAIC,oCAAoC,KAAK,IAAI,EAAE;MAC/C,OAAO,KAAK;IAChB;IAEA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CACjB,CAAC,sHAAsH,CAAC,EACxH;MACIC,IAAI,EAAE;KACT,CACJ;IACD;IACA,MAAMC,mBAAmB,GAAG,IAAIJ,oCAAoC,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;IACnF,MAAMK,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;IAErC,IAAIO,uBAAuB,GAAG,KAAK;IACnC,IAAIC,8BAA8B,GAAG,KAAK;IAE1C,IAAI;MACA,MAAML,mBAAmB,CAACM,YAAY,CAACC,SAAS,CAACN,GAAG,CAAC;MAErD,MAAMO,gBAAgB,GAAG,IAAIb,iCAAiC,CAACK,mBAAmB,EAAE,GAAG,EAAE;QAAES,eAAe,EAAE;MAAC,CAAE,CAAC;MAChH,MAAMC,UAAU,GAAGV,mBAAmB,CAACW,gBAAgB,EAAE;MAEzDH,gBAAgB,CAACI,IAAI,CAACC,SAAS,GAAG,MAAOT,uBAAuB,GAAG,IAAK;MACxEI,gBAAgB,CAACM,gBAAgB,GAAG,MAAOT,8BAA8B,GAAG,IAAK;MAEjFK,UAAU,CAACK,OAAO,CAACP,gBAAgB,CAAC;MACpCE,UAAU,CAACM,KAAK,CAAC,CAAC,CAAC;MAEnB,MAAMhB,mBAAmB,CAACiB,cAAc,EAAE;MAE1C;MACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,MAAM;MACJ;IAAA,CACH,SAAS;MACNjB,GAAG,CAACmB,eAAe,CAACpB,GAAG,CAAC;IAC5B;IAEA,OAAOG,uBAAuB,IAAI,CAACC,8BAA8B;EACrE,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}