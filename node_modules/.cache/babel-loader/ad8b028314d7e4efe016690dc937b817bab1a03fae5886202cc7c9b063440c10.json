{"ast":null,"code":"import { ToneAudioWorklet } from \"../core/worklet/ToneAudioWorklet.js\";\nimport { Effect } from \"./Effect.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { workletName } from \"./BitCrusher.worklet.js\";\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n *\n * @category Effect\n */\nexport class BitCrusher extends Effect {\n  constructor() {\n    const options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n    super(options);\n    this.name = \"BitCrusher\";\n    this._bitCrusherWorklet = new BitCrusherWorklet({\n      context: this.context,\n      bits: options.bits\n    });\n    // connect it up\n    this.connectEffect(this._bitCrusherWorklet);\n    this.bits = this._bitCrusherWorklet.bits;\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      bits: 4\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._bitCrusherWorklet.dispose();\n    return this;\n  }\n}\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet {\n  constructor() {\n    const options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n    super(options);\n    this.name = \"BitCrusherWorklet\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this.bits = new Param({\n      context: this.context,\n      value: options.bits,\n      units: \"positive\",\n      minValue: 1,\n      maxValue: 16,\n      param: this._dummyParam,\n      swappable: true\n    });\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioWorklet.getDefaults(), {\n      bits: 12\n    });\n  }\n  _audioWorkletName() {\n    return workletName;\n  }\n  onReady(node) {\n    connectSeries(this.input, node, this.output);\n    const bits = node.parameters.get(\"bits\");\n    this.bits.setParam(bits);\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.bits.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioWorklet","Effect","Gain","optionsFromArguments","connectSeries","Param","workletName","BitCrusher","constructor","options","getDefaults","arguments","name","_bitCrusherWorklet","BitCrusherWorklet","context","bits","connectEffect","Object","assign","dispose","input","output","value","units","minValue","maxValue","param","_dummyParam","swappable","_audioWorkletName","onReady","node","parameters","get","setParam"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/effect/BitCrusher.ts"],"sourcesContent":["import {\n\tToneAudioWorklet,\n\tToneAudioWorkletOptions,\n} from \"../core/worklet/ToneAudioWorklet.js\";\nimport { Effect, EffectOptions } from \"./Effect.js\";\nimport { Positive } from \"../core/type/Units.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { workletName } from \"./BitCrusher.worklet.js\";\n\nexport interface BitCrusherOptions extends EffectOptions {\n\tbits: Positive;\n}\n\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n *\n * @category Effect\n */\nexport class BitCrusher extends Effect<BitCrusherOptions> {\n\treadonly name: string = \"BitCrusher\";\n\n\t/**\n\t * The bit depth of the effect\n\t * @min 1\n\t * @max 16\n\t */\n\treadonly bits: Param<\"positive\">;\n\n\t/**\n\t * The node which does the bit crushing effect. Runs in an AudioWorklet when possible.\n\t */\n\tprivate _bitCrusherWorklet: BitCrusherWorklet;\n\n\tconstructor(bits?: Positive);\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tBitCrusher.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"bits\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis._bitCrusherWorklet = new BitCrusherWorklet({\n\t\t\tcontext: this.context,\n\t\t\tbits: options.bits,\n\t\t});\n\t\t// connect it up\n\t\tthis.connectEffect(this._bitCrusherWorklet);\n\n\t\tthis.bits = this._bitCrusherWorklet.bits;\n\t}\n\n\tstatic getDefaults(): BitCrusherOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbits: 4,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._bitCrusherWorklet.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface BitCrusherWorkletOptions extends ToneAudioWorkletOptions {\n\tbits: number;\n}\n\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet<BitCrusherWorkletOptions> {\n\treadonly name: string = \"BitCrusherWorklet\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\treadonly bits: Param<\"positive\">;\n\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tBitCrusherWorklet.getDefaults(),\n\t\t\targuments\n\t\t);\n\t\tsuper(options);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tthis.bits = new Param<\"positive\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.bits,\n\t\t\tunits: \"positive\",\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 16,\n\t\t\tparam: this._dummyParam,\n\t\t\tswappable: true,\n\t\t});\n\t}\n\n\tstatic getDefaults(): BitCrusherWorkletOptions {\n\t\treturn Object.assign(ToneAudioWorklet.getDefaults(), {\n\t\t\tbits: 12,\n\t\t});\n\t}\n\n\tprotected _audioWorkletName(): string {\n\t\treturn workletName;\n\t}\n\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\tconst bits = node.parameters.get(\"bits\") as AudioParam;\n\t\tthis.bits.setParam(bits);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.bits.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}