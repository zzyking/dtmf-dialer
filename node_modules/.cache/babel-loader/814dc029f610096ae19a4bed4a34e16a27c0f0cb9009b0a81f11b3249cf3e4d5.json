{"ast":null,"code":"import { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Signal } from \"./Signal.js\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply extends Signal {\n  constructor() {\n    const options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n    super(options);\n    this.name = \"Multiply\";\n    /**\n     * Indicates if the value should be overridden on connection\n     */\n    this.override = false;\n    this._mult = this.input = this.output = new Gain({\n      context: this.context,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    this.factor = this._param = this._mult.gain;\n    this.factor.setValueAtTime(options.value, 0);\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._mult.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","optionsFromArguments","Signal","Multiply","constructor","options","getDefaults","arguments","name","override","_mult","input","output","context","minValue","maxValue","factor","_param","gain","setValueAtTime","value","Object","assign","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/signal/Multiply.ts"],"sourcesContent":["import { Gain } from \"../core/context/Gain.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Signal, SignalOptions } from \"./Signal.js\";\nimport { InputNode, OutputNode } from \"../core/context/ToneAudioNode.js\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply<\n\tTypeName extends \"number\" | \"positive\" = \"number\",\n> extends Signal<TypeName> {\n\treadonly name: string = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain;\n\n\t/**\n\t * The multiplicand input.\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<TypeName>;\n\n\t/**\n\t * @param value Constant value to multiple\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tMultiply.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"value\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis._mult =\n\t\t\tthis.input =\n\t\t\tthis.output =\n\t\t\t\tnew Gain({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tminValue: options.minValue,\n\t\t\t\t\tmaxValue: options.maxValue,\n\t\t\t\t});\n\n\t\tthis.factor = this._param = this._mult\n\t\t\t.gain as unknown as Param<TypeName>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,MAAM,QAAuB,aAAa;AAGnD;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,MAAOC,QAEX,SAAQD,MAAgB;EAiCzBE,YAAA;IACC,MAAMC,OAAO,GAAGJ,oBAAoB,CACnCE,QAAQ,CAACG,WAAW,EAAE,EACtBC,SAAS,EACT,CAAC,OAAO,CAAC,CACT;IACD,KAAK,CAACF,OAAO,CAAC;IAtCN,KAAAG,IAAI,GAAW,UAAU;IAElC;;;IAGS,KAAAC,QAAQ,GAAG,KAAK;IAmCxB,IAAI,CAACC,KAAK,GACT,IAAI,CAACC,KAAK,GACV,IAAI,CAACC,MAAM,GACV,IAAIZ,IAAI,CAAC;MACRa,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,QAAQ,EAAET,OAAO,CAACS,QAAQ;MAC1BC,QAAQ,EAAEV,OAAO,CAACU;KAClB,CAAC;IAEJ,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACP,KAAK,CACpCQ,IAAkC;IACpC,IAAI,CAACF,MAAM,CAACG,cAAc,CAACd,OAAO,CAACe,KAAK,EAAE,CAAC,CAAC;EAC7C;EAEA,OAAOd,WAAWA,CAAA;IACjB,OAAOe,MAAM,CAACC,MAAM,CAACpB,MAAM,CAACI,WAAW,EAAE,EAAE;MAC1Cc,KAAK,EAAE;KACP,CAAC;EACH;EAEAG,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACb,KAAK,CAACa,OAAO,EAAE;IACpB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}