{"ast":null,"code":"/* eslint-disable key-spacing */\nimport { getContext } from \"../Global.js\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions.js\";\nimport { ftom, getA4, setA4 } from \"./Conversions.js\";\nimport { TimeClass } from \"./Time.js\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Frequency\";\n    this.defaultUnits = \"hz\";\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n  static get A4() {\n    return getA4();\n  }\n  static set A4(freq) {\n    setA4(freq);\n  }\n  //-------------------------------------\n  // \tAUGMENT BASE EXPRESSIONS\n  //-------------------------------------\n  _getExpressions() {\n    return Object.assign({}, super._getExpressions(), {\n      midi: {\n        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n        method(value) {\n          if (this.defaultUnits === \"midi\") {\n            return value;\n          } else {\n            return FrequencyClass.mtof(value);\n          }\n        }\n      },\n      note: {\n        regexp: /^([a-g]{1}(?:b|#|##|x|bb|###|#x|x#|bbb)?)(-?[0-9]+)/i,\n        method(pitch, octave) {\n          const index = noteToScaleIndex[pitch.toLowerCase()];\n          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n          if (this.defaultUnits === \"midi\") {\n            return noteNumber;\n          } else {\n            return FrequencyClass.mtof(noteNumber);\n          }\n        }\n      },\n      tr: {\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n        method(m, q, s) {\n          let total = 1;\n          if (m && m !== \"0\") {\n            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n          if (q && q !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(q));\n          }\n          if (s && s !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(s) / 4);\n          }\n          return total;\n        }\n      }\n    });\n  }\n  //-------------------------------------\n  // \tEXPRESSIONS\n  //-------------------------------------\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return  A new transposed frequency\n   * @example\n   * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n   */\n  transpose(interval) {\n    return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n  }\n  /**\n   * Takes an array of semitone intervals and returns\n   * an array of frequencies transposed by those intervals.\n   * @return  Returns an array of Frequencies\n   * @example\n   * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n   */\n  harmonize(intervals) {\n    return intervals.map(interval => {\n      return this.transpose(interval);\n    });\n  }\n  //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Frequency(\"C4\").toMidi(); // 60\n   */\n  toMidi() {\n    return ftom(this.valueOf());\n  }\n  /**\n   * Return the value of the frequency in Scientific Pitch Notation\n   * @example\n   * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n   */\n  toNote() {\n    const freq = this.toFrequency();\n    const log = Math.log2(freq / FrequencyClass.A4);\n    let noteNumber = Math.round(12 * log) + 57;\n    const octave = Math.floor(noteNumber / 12);\n    if (octave < 0) {\n      noteNumber += -12 * octave;\n    }\n    const noteName = scaleIndexToNote[noteNumber % 12];\n    return noteName + octave.toString();\n  }\n  /**\n   * Return the duration of one cycle in seconds.\n   */\n  toSeconds() {\n    return 1 / super.toSeconds();\n  }\n  /**\n   * Return the duration of one cycle in ticks\n   */\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n    const quarters = this.valueOf() / quarterTime;\n    return Math.floor(quarters * this._getPPQ());\n  }\n  //-------------------------------------\n  // \tUNIT CONVERSIONS HELPERS\n  //-------------------------------------\n  /**\n   * With no arguments, return 0\n   */\n  _noArg() {\n    return 0;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n  _frequencyToUnits(freq) {\n    return freq;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n  _ticksToUnits(ticks) {\n    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n  _beatsToUnits(beats) {\n    return 1 / super._beatsToUnits(beats);\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n  _secondsToUnits(seconds) {\n    return 1 / seconds;\n  }\n  /**\n   * Convert a MIDI note to frequency value.\n   * @param  midi The midi number to convert.\n   * @return The corresponding frequency value\n   */\n  static mtof(midi) {\n    return mtof(midi);\n  }\n  /**\n   * Convert a frequency value to a MIDI note.\n   * @param frequency The value to frequency value to convert.\n   */\n  static ftom(frequency) {\n    return ftom(frequency);\n  }\n}\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n/**\n * Note to scale index.\n * @hidden\n */\nconst noteToScaleIndex = {\n  cbbb: -3,\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  \"c##\": 2,\n  \"c###\": 3,\n  \"cx#\": 3,\n  \"c#x\": 3,\n  dbbb: -1,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  \"d##\": 4,\n  \"d###\": 5,\n  \"dx#\": 5,\n  \"d#x\": 5,\n  ebbb: 1,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  \"e##\": 6,\n  \"e###\": 7,\n  \"ex#\": 7,\n  \"e#x\": 7,\n  fbbb: 2,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  \"f##\": 7,\n  \"f###\": 8,\n  \"fx#\": 8,\n  \"f#x\": 8,\n  gbbb: 4,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  \"g##\": 9,\n  \"g###\": 10,\n  \"gx#\": 10,\n  \"g#x\": 10,\n  abbb: 6,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  \"a##\": 11,\n  \"a###\": 12,\n  \"ax#\": 12,\n  \"a#x\": 12,\n  bbbb: 8,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13,\n  \"b##\": 13,\n  \"b###\": 14,\n  \"bx#\": 14,\n  \"b#x\": 14\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","map":{"version":3,"names":["getContext","intervalToFrequencyRatio","mtof","ftom","getA4","setA4","TimeClass","FrequencyClass","constructor","name","defaultUnits","A4","freq","_getExpressions","Object","assign","midi","regexp","method","value","note","pitch","octave","index","noteToScaleIndex","toLowerCase","noteNumber","parseInt","tr","m","q","s","total","_beatsToUnits","_getTimeSignature","parseFloat","transpose","interval","context","valueOf","harmonize","intervals","map","toMidi","toNote","toFrequency","log","Math","log2","round","floor","noteName","scaleIndexToNote","toString","toSeconds","toTicks","quarterTime","quarters","_getPPQ","_noArg","_frequencyToUnits","_ticksToUnits","ticks","_getBpm","beats","_secondsToUnits","seconds","frequency","cbbb","cbb","cb","c","cx","dbbb","dbb","db","d","dx","ebbb","ebb","eb","e","ex","fbbb","fbb","fb","f","fx","gbbb","gbb","gb","g","gx","abbb","abb","ab","a","ax","bbbb","bbb","bb","b","bx","Frequency","units"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/type/Frequency.ts"],"sourcesContent":["/* eslint-disable key-spacing */\nimport { getContext } from \"../Global.js\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions.js\";\nimport { ftom, getA4, setA4 } from \"./Conversions.js\";\nimport { TimeClass } from \"./Time.js\";\nimport { TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase.js\";\nimport {\n\tFrequency,\n\tHertz,\n\tInterval,\n\tMidiNote,\n\tNote,\n\tSeconds,\n\tTicks,\n} from \"./Units.js\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<\n\tType,\n\tFrequencyUnit\n> {\n\treadonly name: string = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t//-------------------------------------\n\t// \tAUGMENT BASE EXPRESSIONS\n\t//-------------------------------------\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote: {\n\t\t\t\tregexp: /^([a-g]{1}(?:b|#|##|x|bb|###|#x|x#|bbb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(\n\t\t\t\t\t\t\tthis._getTimeSignature() * parseFloat(m)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tEXPRESSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return  A new transposed frequency\n\t * @example\n\t * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(\n\t\t\tthis.context,\n\t\t\tthis.valueOf() * intervalToFrequencyRatio(interval)\n\t\t);\n\t}\n\n\t/**\n\t * Takes an array of semitone intervals and returns\n\t * an array of frequencies transposed by those intervals.\n\t * @return  Returns an array of Frequencies\n\t * @example\n\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map((interval) => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Frequency(\"C4\").toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn (noteName + octave.toString()) as Note;\n\t}\n\n\t/**\n\t * Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t * Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS HELPERS\n\t//-------------------------------------\n\n\t/**\n\t * With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (1 / ((ticks * 60) / (this._getBpm() * this._getPPQ()))) as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (1 / super._beatsToUnits(beats)) as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn (1 / seconds) as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index.\n * @hidden\n */\nconst noteToScaleIndex = {\n\tcbbb: -3,\n\tcbb: -2,\n\tcb: -1,\n\tc: 0,\n\t\"c#\": 1,\n\tcx: 2,\n\t\"c##\": 2,\n\t\"c###\": 3,\n\t\"cx#\": 3,\n\t\"c#x\": 3,\n\tdbbb: -1,\n\tdbb: 0,\n\tdb: 1,\n\td: 2,\n\t\"d#\": 3,\n\tdx: 4,\n\t\"d##\": 4,\n\t\"d###\": 5,\n\t\"dx#\": 5,\n\t\"d#x\": 5,\n\tebbb: 1,\n\tebb: 2,\n\teb: 3,\n\te: 4,\n\t\"e#\": 5,\n\tex: 6,\n\t\"e##\": 6,\n\t\"e###\": 7,\n\t\"ex#\": 7,\n\t\"e#x\": 7,\n\tfbbb: 2,\n\tfbb: 3,\n\tfb: 4,\n\tf: 5,\n\t\"f#\": 6,\n\tfx: 7,\n\t\"f##\": 7,\n\t\"f###\": 8,\n\t\"fx#\": 8,\n\t\"f#x\": 8,\n\tgbbb: 4,\n\tgbb: 5,\n\tgb: 6,\n\tg: 7,\n\t\"g#\": 8,\n\tgx: 9,\n\t\"g##\": 9,\n\t\"g###\": 10,\n\t\"gx#\": 10,\n\t\"g#x\": 10,\n\tabbb: 6,\n\tabb: 7,\n\tab: 8,\n\ta: 9,\n\t\"a#\": 10,\n\tax: 11,\n\t\"a##\": 11,\n\t\"a###\": 12,\n\t\"ax#\": 12,\n\t\"a#x\": 12,\n\tbbbb: 8,\n\tbbb: 9,\n\tbb: 10,\n\tb: 11,\n\t\"b#\": 12,\n\tbx: 13,\n\t\"b##\": 13,\n\t\"b###\": 14,\n\t\"bx#\": 14,\n\t\"b#x\": 14,\n};\n\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\n\t\"C\",\n\t\"C#\",\n\t\"D\",\n\t\"D#\",\n\t\"E\",\n\t\"F\",\n\t\"F#\",\n\t\"G\",\n\t\"G#\",\n\t\"A\",\n\t\"A#\",\n\t\"B\",\n];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(\n\tvalue?: TimeValue | Frequency,\n\tunits?: FrequencyUnit\n): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}