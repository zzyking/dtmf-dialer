{"ast":null,"code":"import { gainToDb } from \"../../core/type/Conversions.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase } from \"./MeterBase.js\";\nimport { warn } from \"../../core/util/Debug.js\";\nimport { Analyser } from \"./Analyser.js\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n * Setting `normalRange` to `true` will covert the output to a range of\n * 0-1. See an example using a graphical display\n * [here](https://tonejs.github.io/examples/meter).\n * @see {@link DCMeter}.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\nexport class Meter extends MeterBase {\n  constructor() {\n    const options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    super(options);\n    this.name = \"Meter\";\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channelCount\n    });\n    this.smoothing = options.smoothing, this.normalRange = options.normalRange;\n    this._rms = new Array(options.channelCount);\n    this._rms.fill(0);\n  }\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      smoothing: 0.8,\n      normalRange: false,\n      channelCount: 1\n    });\n  }\n  /**\n   * Use {@link getValue} instead. For the previous getValue behavior, use DCMeter.\n   * @deprecated\n   */\n  getLevel() {\n    warn(\"'getLevel' has been changed to 'getValue'\");\n    return this.getValue();\n  }\n  /**\n   * Get the current value of the incoming signal.\n   * Output is in decibels when {@link normalRange} is `false`.\n   * If {@link channels} = 1, then the output is a single number\n   * representing the value of the input signal. When {@link channels} > 1,\n   * then each channel is returned as a value in a number array.\n   */\n  getValue() {\n    const aValues = this._analyser.getValue();\n    const channelValues = this.channels === 1 ? [aValues] : aValues;\n    const vals = channelValues.map((values, index) => {\n      const totalSquared = values.reduce((total, current) => total + current * current, 0);\n      const rms = Math.sqrt(totalSquared / values.length);\n      // the rms can only fall at the rate of the smoothing\n      // but can jump up instantly\n      this._rms[index] = Math.max(rms, this._rms[index] * this.smoothing);\n      return this.normalRange ? this._rms[index] : gainToDb(this._rms[index]);\n    });\n    if (this.channels === 1) {\n      return vals[0];\n    } else {\n      return vals;\n    }\n  }\n  /**\n   * The number of channels of analysis.\n   */\n  get channels() {\n    return this._analyser.channels;\n  }\n  dispose() {\n    super.dispose();\n    this._analyser.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["gainToDb","optionsFromArguments","MeterBase","warn","Analyser","Meter","constructor","options","getDefaults","arguments","name","input","output","_analyser","context","size","type","channels","channelCount","smoothing","normalRange","_rms","Array","fill","Object","assign","getLevel","getValue","aValues","channelValues","vals","map","values","index","totalSquared","reduce","total","current","rms","Math","sqrt","length","max","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/analysis/Meter.ts"],"sourcesContent":["import { gainToDb } from \"../../core/type/Conversions.js\";\nimport { NormalRange } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase.js\";\nimport { warn } from \"../../core/util/Debug.js\";\nimport { Analyser } from \"./Analyser.js\";\n\nexport interface MeterOptions extends MeterBaseOptions {\n\tsmoothing: NormalRange;\n\tnormalRange: boolean;\n\tchannelCount: number;\n}\n\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n * Setting `normalRange` to `true` will covert the output to a range of\n * 0-1. See an example using a graphical display\n * [here](https://tonejs.github.io/examples/meter).\n * @see {@link DCMeter}.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\nexport class Meter extends MeterBase<MeterOptions> {\n\treadonly name: string = \"Meter\";\n\n\t/**\n\t * If the output should be in decibels or normal range between 0-1. If `normalRange` is false,\n\t * the output range will be the measured decibel value, otherwise the decibel value will be converted to\n\t * the range of 0-1\n\t */\n\tnormalRange: boolean;\n\n\t/**\n\t * A value from between 0 and 1 where 0 represents no time averaging with the last analysis frame.\n\t */\n\tsmoothing: number;\n\n\t/**\n\t * The previous frame's value for each channel.\n\t */\n\tprivate _rms: number[];\n\n\t/**\n\t * @param smoothing The amount of smoothing applied between frames.\n\t */\n\tconstructor(smoothing?: NormalRange);\n\tconstructor(options?: Partial<MeterOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Meter.getDefaults(), arguments, [\n\t\t\t\"smoothing\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis.input =\n\t\t\tthis.output =\n\t\t\tthis._analyser =\n\t\t\t\tnew Analyser({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tsize: 256,\n\t\t\t\t\ttype: \"waveform\",\n\t\t\t\t\tchannels: options.channelCount,\n\t\t\t\t});\n\n\t\t(this.smoothing = options.smoothing),\n\t\t\t(this.normalRange = options.normalRange);\n\t\tthis._rms = new Array(options.channelCount);\n\t\tthis._rms.fill(0);\n\t}\n\n\tstatic getDefaults(): MeterOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsmoothing: 0.8,\n\t\t\tnormalRange: false,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Use {@link getValue} instead. For the previous getValue behavior, use DCMeter.\n\t * @deprecated\n\t */\n\tgetLevel(): number | number[] {\n\t\twarn(\"'getLevel' has been changed to 'getValue'\");\n\t\treturn this.getValue();\n\t}\n\n\t/**\n\t * Get the current value of the incoming signal.\n\t * Output is in decibels when {@link normalRange} is `false`.\n\t * If {@link channels} = 1, then the output is a single number\n\t * representing the value of the input signal. When {@link channels} > 1,\n\t * then each channel is returned as a value in a number array.\n\t */\n\tgetValue(): number | number[] {\n\t\tconst aValues = this._analyser.getValue();\n\t\tconst channelValues =\n\t\t\tthis.channels === 1\n\t\t\t\t? [aValues as Float32Array]\n\t\t\t\t: (aValues as Float32Array[]);\n\t\tconst vals = channelValues.map((values, index) => {\n\t\t\tconst totalSquared = values.reduce(\n\t\t\t\t(total, current) => total + current * current,\n\t\t\t\t0\n\t\t\t);\n\t\t\tconst rms = Math.sqrt(totalSquared / values.length);\n\t\t\t// the rms can only fall at the rate of the smoothing\n\t\t\t// but can jump up instantly\n\t\t\tthis._rms[index] = Math.max(rms, this._rms[index] * this.smoothing);\n\t\t\treturn this.normalRange\n\t\t\t\t? this._rms[index]\n\t\t\t\t: gainToDb(this._rms[index]);\n\t\t});\n\t\tif (this.channels === 1) {\n\t\t\treturn vals[0];\n\t\t} else {\n\t\t\treturn vals;\n\t\t}\n\t}\n\n\t/**\n\t * The number of channels of analysis.\n\t */\n\tget channels(): number {\n\t\treturn this._analyser.channels;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}