{"ast":null,"code":"import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Multiply } from \"../signal/Multiply.js\";\nimport { ModulationSynth } from \"./ModulationSynth.js\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\nexport class FMSynth extends ModulationSynth {\n  constructor() {\n    const options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"FMSynth\";\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      value: options.modulationIndex\n    });\n    // control the two voices frequency\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n    this.detune.fan(this._carrier.detune, this._modulator.detune);\n    this._modulator.connect(this._modulationNode.gain);\n    this._modulationNode.connect(this._carrier.frequency);\n    this._carrier.connect(this.output);\n  }\n  static getDefaults() {\n    return Object.assign(ModulationSynth.getDefaults(), {\n      modulationIndex: 10\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.modulationIndex.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["optionsFromArguments","Multiply","ModulationSynth","FMSynth","constructor","options","getDefaults","arguments","name","modulationIndex","context","value","frequency","connect","_carrier","chain","harmonicity","_modulator","_modulationNode","detune","fan","gain","output","Object","assign","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/instrument/FMSynth.ts"],"sourcesContent":["import { Positive } from \"../core/type/Units.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { RecursivePartial } from \"../core/util/Interface.js\";\nimport { Multiply } from \"../signal/Multiply.js\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth.js\";\n\nexport interface FMSynthOptions extends ModulationSynthOptions {\n\tmodulationIndex: Positive;\n}\n\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth<FMSynthOptions> {\n\treadonly name: string = \"FMSynth\";\n\n\t/**\n\t * The modulation index which essentially the depth or amount of the modulation. It is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Multiply;\n\n\tconstructor(options?: RecursivePartial<FMSynthOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n\t\tsuper(options);\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t}\n\n\tstatic getDefaults(): FMSynthOptions {\n\t\treturn Object.assign(ModulationSynth.getDefaults(), {\n\t\t\tmodulationIndex: 10,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AACA,SAASA,oBAAoB,QAAQ,0BAA0B;AAE/D,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,eAAe,QAAgC,sBAAsB;AAM9E;;;;;;;;;;;;AAaA,OAAM,MAAOC,OAAQ,SAAQD,eAA+B;EAW3DE,YAAA;IACC,MAAMC,OAAO,GAAGL,oBAAoB,CAACG,OAAO,CAACG,WAAW,EAAE,EAAEC,SAAS,CAAC;IACtE,KAAK,CAACF,OAAO,CAAC;IAZN,KAAAG,IAAI,GAAW,SAAS;IAchC,IAAI,CAACC,eAAe,GAAG,IAAIR,QAAQ,CAAC;MACnCS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,KAAK,EAAEN,OAAO,CAACI;KACf,CAAC;IAEF;IACA,IAAI,CAACG,SAAS,CAACC,OAAO,CAAC,IAAI,CAACC,QAAQ,CAACF,SAAS,CAAC;IAC/C,IAAI,CAACA,SAAS,CAACG,KAAK,CAAC,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,UAAU,CAACL,SAAS,CAAC;IACjE,IAAI,CAACA,SAAS,CAACG,KAAK,CAAC,IAAI,CAACN,eAAe,EAAE,IAAI,CAACS,eAAe,CAAC;IAChE,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC,IAAI,CAACN,QAAQ,CAACK,MAAM,EAAE,IAAI,CAACF,UAAU,CAACE,MAAM,CAAC;IAC7D,IAAI,CAACF,UAAU,CAACJ,OAAO,CAAC,IAAI,CAACK,eAAe,CAACG,IAAI,CAAC;IAClD,IAAI,CAACH,eAAe,CAACL,OAAO,CAAC,IAAI,CAACC,QAAQ,CAACF,SAAS,CAAC;IACrD,IAAI,CAACE,QAAQ,CAACD,OAAO,CAAC,IAAI,CAACS,MAAM,CAAC;EACnC;EAEA,OAAOhB,WAAWA,CAAA;IACjB,OAAOiB,MAAM,CAACC,MAAM,CAACtB,eAAe,CAACI,WAAW,EAAE,EAAE;MACnDG,eAAe,EAAE;KACjB,CAAC;EACH;EAEAgB,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAAChB,eAAe,CAACgB,OAAO,EAAE;IAC9B,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}