{"ast":null,"code":"import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { Param } from \"./Param.js\";\nimport { ToneWithContext } from \"./ToneWithContext.js\";\nimport { assert, warn } from \"../util/Debug.js\";\n/**\n * ToneAudioNode is the base class for classes which process audio.\n * @category Core\n */\nexport class ToneAudioNode extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    /**\n     * List all of the node that must be set to match the ChannelProperties\n     */\n    this._internalChannels = [];\n  }\n  /**\n   * The number of inputs feeding into the AudioNode.\n   * For source nodes, this will be 0.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfInputs);\n   */\n  get numberOfInputs() {\n    if (isDefined(this.input)) {\n      if (isAudioParam(this.input) || this.input instanceof Param) {\n        return 1;\n      } else {\n        return this.input.numberOfInputs;\n      }\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of outputs of the AudioNode.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfOutputs);\n   */\n  get numberOfOutputs() {\n    if (isDefined(this.output)) {\n      return this.output.numberOfOutputs;\n    } else {\n      return 0;\n    }\n  }\n  //-------------------------------------\n  // AUDIO PROPERTIES\n  //-------------------------------------\n  /**\n   * Used to decide which nodes to get/set properties on\n   */\n  _isAudioNode(node) {\n    return isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n  }\n  /**\n   * Get all of the audio nodes (either internal or input/output) which together\n   * make up how the class node responds to channel input/output\n   */\n  _getInternalNodes() {\n    const nodeList = this._internalChannels.slice(0);\n    if (this._isAudioNode(this.input)) {\n      nodeList.push(this.input);\n    }\n    if (this._isAudioNode(this.output)) {\n      if (this.input !== this.output) {\n        nodeList.push(this.output);\n      }\n    }\n    return nodeList;\n  }\n  /**\n   * Set the audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   * @param options\n   */\n  _setChannelProperties(options) {\n    const nodeList = this._getInternalNodes();\n    nodeList.forEach(node => {\n      node.channelCount = options.channelCount;\n      node.channelCountMode = options.channelCountMode;\n      node.channelInterpretation = options.channelInterpretation;\n    });\n  }\n  /**\n   * Get the current audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   */\n  _getChannelProperties() {\n    const nodeList = this._getInternalNodes();\n    assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n    // use the first node to get properties\n    // they should all be the same\n    const node = nodeList[0];\n    return {\n      channelCount: node.channelCount,\n      channelCountMode: node.channelCountMode,\n      channelInterpretation: node.channelInterpretation\n    };\n  }\n  /**\n   * channelCount is the number of channels used when up-mixing and down-mixing\n   * connections to any inputs to the node. The default value is 2 except for\n   * specific nodes where its value is specially determined.\n   */\n  get channelCount() {\n    return this._getChannelProperties().channelCount;\n  }\n  set channelCount(channelCount) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelCount\n    }));\n  }\n  /**\n   * channelCountMode determines how channels will be counted when up-mixing and\n   * down-mixing connections to any inputs to the node.\n   * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n   * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n   * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n   * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n   */\n  get channelCountMode() {\n    return this._getChannelProperties().channelCountMode;\n  }\n  set channelCountMode(channelCountMode) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelCountMode\n    }));\n  }\n  /**\n   * channelInterpretation determines how individual channels will be treated\n   * when up-mixing and down-mixing connections to any inputs to the node.\n   * The default value is \"speakers\".\n   */\n  get channelInterpretation() {\n    return this._getChannelProperties().channelInterpretation;\n  }\n  set channelInterpretation(channelInterpretation) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelInterpretation\n    }));\n  }\n  //-------------------------------------\n  // CONNECTIONS\n  //-------------------------------------\n  /**\n   * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n   * @param destination The output to connect to\n   * @param outputNum The output to connect from\n   * @param inputNum The input to connect to\n   */\n  connect(destination, outputNum = 0, inputNum = 0) {\n    connect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * @example\n   * const osc = new Tone.Oscillator(\"C2\").start();\n   * osc.toDestination();\n   */\n  toDestination() {\n    this.connect(this.context.destination);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * @see {@link toDestination}\n   * @deprecated\n   */\n  toMaster() {\n    warn(\"toMaster() has been renamed toDestination()\");\n    return this.toDestination();\n  }\n  /**\n   * disconnect the output\n   */\n  disconnect(destination, outputNum = 0, inputNum = 0) {\n    disconnect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output of this node to the rest of the nodes in series.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3\");\n   * player.autostart = true;\n   * const filter = new Tone.AutoFilter(4).start();\n   * const distortion = new Tone.Distortion(0.5);\n   * // connect the player to the filter, distortion and then to the master output\n   * player.chain(filter, distortion, Tone.Destination);\n   */\n  chain(...nodes) {\n    connectSeries(this, ...nodes);\n    return this;\n  }\n  /**\n   * connect the output of this node to the rest of the nodes in parallel.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n   * player.autostart = true;\n   * const pitchShift = new Tone.PitchShift(4).toDestination();\n   * const filter = new Tone.Filter(\"G5\").toDestination();\n   * // connect a node to the pitch shift and filter in parallel\n   * player.fan(pitchShift, filter);\n   */\n  fan(...nodes) {\n    nodes.forEach(node => this.connect(node));\n    return this;\n  }\n  /**\n   * Dispose and disconnect\n   */\n  dispose() {\n    super.dispose();\n    if (isDefined(this.input)) {\n      if (this.input instanceof ToneAudioNode) {\n        this.input.dispose();\n      } else if (isAudioNode(this.input)) {\n        this.input.disconnect();\n      }\n    }\n    if (isDefined(this.output)) {\n      if (this.output instanceof ToneAudioNode) {\n        this.output.dispose();\n      } else if (isAudioNode(this.output)) {\n        this.output.disconnect();\n      }\n    }\n    this._internalChannels = [];\n    return this;\n  }\n}\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes) {\n  const first = nodes.shift();\n  nodes.reduce((prev, current) => {\n    if (prev instanceof ToneAudioNode) {\n      prev.connect(current);\n    } else if (isAudioNode(prev)) {\n      connect(prev, current);\n    }\n    return current;\n  }, first);\n}\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  assert(isDefined(srcNode), \"Cannot connect from undefined node\");\n  assert(isDefined(dstNode), \"Cannot connect to undefined node\");\n  if (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n    assert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n  }\n  assert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n  // resolve the input of the dstNode\n  while (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n    if (isDefined(dstNode.input)) {\n      dstNode = dstNode.input;\n    }\n  }\n  while (srcNode instanceof ToneAudioNode) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n  // make the connection\n  if (isAudioParam(dstNode)) {\n    srcNode.connect(dstNode, outputNumber);\n  } else {\n    srcNode.connect(dstNode, outputNumber, inputNumber);\n  }\n}\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  // resolve the destination node\n  if (isDefined(dstNode)) {\n    while (dstNode instanceof ToneAudioNode) {\n      dstNode = dstNode.input;\n    }\n  }\n  // resolve the src node\n  while (!isAudioNode(srcNode)) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n  if (isAudioParam(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber);\n  } else if (isAudioNode(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber, inputNumber);\n  } else {\n    srcNode.disconnect();\n  }\n}\n/**\n * Connect the output of one or more source nodes to a single destination node\n * @param nodes One or more source nodes followed by one destination node\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n * const player1 = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n * const filter = new Tone.Filter(\"G5\").toDestination();\n * // connect nodes to a common destination\n * Tone.fanIn(player, player1, filter);\n */\nexport function fanIn(...nodes) {\n  const dstNode = nodes.pop();\n  if (isDefined(dstNode)) {\n    nodes.forEach(node => connect(node, dstNode));\n  }\n}","map":{"version":3,"names":["isAudioNode","isAudioParam","isDefined","Param","ToneWithContext","assert","warn","ToneAudioNode","constructor","_internalChannels","numberOfInputs","input","numberOfOutputs","output","_isAudioNode","node","_getInternalNodes","nodeList","slice","push","_setChannelProperties","options","forEach","channelCount","channelCountMode","channelInterpretation","_getChannelProperties","length","props","Object","assign","connect","destination","outputNum","inputNum","toDestination","context","toMaster","disconnect","chain","nodes","connectSeries","fan","dispose","first","shift","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","fanIn","pop"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/context/ToneAudioNode.ts"],"sourcesContent":["import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { Param } from \"./Param.js\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext.js\";\nimport { assert, warn } from \"../util/Debug.js\";\n\nexport type InputNode = ToneAudioNode | AudioNode | Param<any> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n * ToneAudioNode is the base class for classes which process audio.\n * @category Core\n */\nexport abstract class ToneAudioNode<\n\tOptions extends ToneAudioNodeOptions = ToneAudioNodeOptions,\n> extends ToneWithContext<Options> {\n\t/**\n\t * The name of the class\n\t */\n\tabstract readonly name: string;\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t * The number of inputs feeding into the AudioNode.\n\t * For source nodes, this will be 0.\n\t * @example\n\t * const node = new Tone.Gain();\n\t * console.log(node.numberOfInputs);\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of outputs of the AudioNode.\n\t * @example\n\t * const node = new Tone.Gain();\n\t * console.log(node.numberOfOutputs);\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t//-------------------------------------\n\t// AUDIO PROPERTIES\n\t//-------------------------------------\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn (\n\t\t\tisDefined(node) &&\n\t\t\t(node instanceof ToneAudioNode || isAudioNode(node))\n\t\t);\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach((node) => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tassert(\n\t\t\tnodeList.length > 0,\n\t\t\t\"ToneAudioNode does not have any internal nodes\"\n\t\t);\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t * channelCount is the number of channels used when up-mixing and down-mixing\n\t * connections to any inputs to the node. The default value is 2 except for\n\t * specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t * channelCountMode determines how channels will be counted when up-mixing and\n\t * down-mixing connections to any inputs to the node.\n\t * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t * channelInterpretation determines how individual channels will be treated\n\t * when up-mixing and down-mixing connections to any inputs to the node.\n\t * The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(\n\t\t\tObject.assign(props, { channelInterpretation })\n\t\t);\n\t}\n\n\t//-------------------------------------\n\t// CONNECTIONS\n\t//-------------------------------------\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param destination The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * @example\n\t * const osc = new Tone.Oscillator(\"C2\").start();\n\t * osc.toDestination();\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * @see {@link toDestination}\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\twarn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t * disconnect the output\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output of this node to the rest of the nodes in series.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3\");\n\t * player.autostart = true;\n\t * const filter = new Tone.AutoFilter(4).start();\n\t * const distortion = new Tone.Distortion(0.5);\n\t * // connect the player to the filter, distortion and then to the master output\n\t * player.chain(filter, distortion, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the output of this node to the rest of the nodes in parallel.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n\t * player.autostart = true;\n\t * const pitchShift = new Tone.PitchShift(4).toDestination();\n\t * const filter = new Tone.Filter(\"G5\").toDestination();\n\t * // connect a node to the pitch shift and filter in parallel\n\t * player.fan(pitchShift, filter);\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach((node) => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(\n\tsrcNode: OutputNode,\n\tdstNode: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0\n): void {\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(\n\t\t\tdstNode.numberOfInputs > 0,\n\t\t\t\"Cannot connect to node with no inputs\"\n\t\t);\n\t}\n\tassert(\n\t\tsrcNode.numberOfOutputs > 0,\n\t\t\"Cannot connect from node with no outputs\"\n\t);\n\n\t// resolve the input of the dstNode\n\twhile (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0\n): void {\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!isAudioNode(srcNode)) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n\n/**\n * Connect the output of one or more source nodes to a single destination node\n * @param nodes One or more source nodes followed by one destination node\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n * const player1 = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n * const filter = new Tone.Filter(\"G5\").toDestination();\n * // connect nodes to a common destination\n * Tone.fanIn(player, player1, filter);\n */\nexport function fanIn(...nodes: OutputNode[]): void {\n\tconst dstNode = nodes.pop();\n\n\tif (isDefined(dstNode)) {\n\t\tnodes.forEach((node) => connect(node, dstNode));\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}