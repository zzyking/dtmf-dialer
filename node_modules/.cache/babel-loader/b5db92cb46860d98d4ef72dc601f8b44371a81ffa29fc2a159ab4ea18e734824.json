{"ast":null,"code":"import { Volume } from \"../../component/channel/Volume.js\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { noOp, readOnly } from \"../../core/util/Interface.js\";\nimport { Source } from \"../Source.js\";\nimport { Player } from \"./Player.js\";\n/**\n * Players combines multiple {@link Player} objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n    super(options);\n    this.name = \"Players\";\n    /**\n     * Players has no input.\n     */\n    this.input = undefined;\n    /**\n     * The container of all of the players\n     */\n    this._players = new Map();\n    /**\n     * The output volume node\n     */\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this._buffers = new ToneAudioBuffers({\n      urls: options.urls,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    // mute initially\n    this.mute = options.mute;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      baseUrl: \"\",\n      fadeIn: 0,\n      fadeOut: 0,\n      mute: false,\n      onload: noOp,\n      onerror: noOp,\n      urls: {},\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   */\n  get mute() {\n    return this._volume.mute;\n  }\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  /**\n   * The fadeIn time of the envelope applied to the source.\n   */\n  get fadeIn() {\n    return this._fadeIn;\n  }\n  set fadeIn(fadeIn) {\n    this._fadeIn = fadeIn;\n    this._players.forEach(player => {\n      player.fadeIn = fadeIn;\n    });\n  }\n  /**\n   * The fadeOut time of the each of the sources.\n   */\n  get fadeOut() {\n    return this._fadeOut;\n  }\n  set fadeOut(fadeOut) {\n    this._fadeOut = fadeOut;\n    this._players.forEach(player => {\n      player.fadeOut = fadeOut;\n    });\n  }\n  /**\n   * The state of the players object. Returns \"started\" if any of the players are playing.\n   */\n  get state() {\n    const playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n    return playing ? \"started\" : \"stopped\";\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param name  The key or index of the buffer.\n   */\n  has(name) {\n    return this._buffers.has(name);\n  }\n  /**\n   * Get a player by name.\n   * @param  name  The players name as defined in the constructor object or `add` method.\n   */\n  player(name) {\n    assert(this.has(name), `No Player with the name ${name} exists on this object`);\n    if (!this._players.has(name)) {\n      const player = new Player({\n        context: this.context,\n        fadeIn: this._fadeIn,\n        fadeOut: this._fadeOut,\n        url: this._buffers.get(name)\n      }).connect(this.output);\n      this._players.set(name, player);\n    }\n    return this._players.get(name);\n  }\n  /**\n   * If all the buffers are loaded or not\n   */\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Add a player by name and url to the Players\n   * @param  name A unique name to give the player\n   * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n   * @param callback  The callback to invoke when the url is loaded.\n   * @example\n   * const players = new Tone.Players();\n   * players.add(\"gong\", \"https://tonejs.github.io/audio/berklee/gong_1.mp3\", () => {\n   * \tconsole.log(\"gong loaded\");\n   * \tplayers.player(\"gong\").start();\n   * });\n   */\n  add(name, url, callback) {\n    assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n    this._buffers.add(name, url, callback);\n    return this;\n  }\n  /**\n   * Stop all of the players at the given time\n   * @param time The time to stop all of the players.\n   */\n  stopAll(time) {\n    this._players.forEach(player => player.stop(time));\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._volume.dispose();\n    this.volume.dispose();\n    this._players.forEach(player => player.dispose());\n    this._buffers.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Volume","ToneAudioBuffers","ToneAudioNode","optionsFromArguments","assert","noOp","readOnly","Source","Player","Players","constructor","options","getDefaults","arguments","name","input","undefined","_players","Map","_volume","output","context","volume","_buffers","urls","onload","baseUrl","onerror","mute","_fadeIn","fadeIn","_fadeOut","fadeOut","Object","assign","forEach","player","state","playing","Array","from","some","_","has","url","get","connect","set","loaded","add","callback","stopAll","time","stop","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/source/buffer/Players.ts"],"sourcesContent":["import { Volume } from \"../../component/channel/Volume.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport {\n\tToneAudioBuffers,\n\tToneAudioBuffersUrlMap,\n} from \"../../core/context/ToneAudioBuffers.js\";\nimport { OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { Decibels, Time } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { noOp, readOnly } from \"../../core/util/Interface.js\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline.js\";\nimport { Source, SourceOptions } from \"../Source.js\";\nimport { Player } from \"./Player.js\";\n\nexport interface PlayersOptions extends SourceOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tvolume: Decibels;\n\tmute: boolean;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tbaseUrl: string;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Players combines multiple {@link Player} objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode<PlayersOptions> {\n\treadonly name: string = \"Players\";\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * The combined output of all of the players\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * Players has no input.\n\t */\n\treadonly input = undefined;\n\n\t/**\n\t * The container of all of the players\n\t */\n\tprivate _players: Map<string, Player> = new Map();\n\n\t/**\n\t * The container of all the buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * private holder of the fadeIn time\n\t */\n\tprivate _fadeIn: Time;\n\n\t/**\n\t * private holder of the fadeOut time\n\t */\n\tprivate _fadeOut: Time;\n\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param onload The function to invoke when all buffers are loaded.\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, onload?: () => void);\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param options The remaining options associated with the players\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\toptions?: Partial<Omit<PlayersOptions, \"urls\">>\n\t);\n\tconstructor(options?: Partial<PlayersOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tPlayers.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"urls\", \"onload\"],\n\t\t\t\"urls\"\n\t\t);\n\t\tsuper(options);\n\n\t\t/**\n\t\t * The output volume node\n\t\t */\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._buffers = new ToneAudioBuffers({\n\t\t\turls: options.urls,\n\t\t\tonload: options.onload,\n\t\t\tbaseUrl: options.baseUrl,\n\t\t\tonerror: options.onerror,\n\t\t});\n\t\t// mute initially\n\t\tthis.mute = options.mute;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayersOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tbaseUrl: \"\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tmute: false,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\turls: {},\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t/**\n\t * The fadeIn time of the envelope applied to the source.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(fadeIn) {\n\t\tthis._fadeIn = fadeIn;\n\t\tthis._players.forEach((player) => {\n\t\t\tplayer.fadeIn = fadeIn;\n\t\t});\n\t}\n\n\t/**\n\t * The fadeOut time of the each of the sources.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(fadeOut) {\n\t\tthis._fadeOut = fadeOut;\n\t\tthis._players.forEach((player) => {\n\t\t\tplayer.fadeOut = fadeOut;\n\t\t});\n\t}\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t */\n\tget state(): BasicPlaybackState {\n\t\tconst playing = Array.from(this._players).some(\n\t\t\t([_, player]) => player.state === \"started\"\n\t\t);\n\t\treturn playing ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param name  The key or index of the buffer.\n\t */\n\thas(name: string): boolean {\n\t\treturn this._buffers.has(name);\n\t}\n\n\t/**\n\t * Get a player by name.\n\t * @param  name  The players name as defined in the constructor object or `add` method.\n\t */\n\tplayer(name: string): Player {\n\t\tassert(\n\t\t\tthis.has(name),\n\t\t\t`No Player with the name ${name} exists on this object`\n\t\t);\n\t\tif (!this._players.has(name)) {\n\t\t\tconst player = new Player({\n\t\t\t\tcontext: this.context,\n\t\t\t\tfadeIn: this._fadeIn,\n\t\t\t\tfadeOut: this._fadeOut,\n\t\t\t\turl: this._buffers.get(name),\n\t\t\t}).connect(this.output);\n\t\t\tthis._players.set(name, player);\n\t\t}\n\t\treturn this._players.get(name) as Player;\n\t}\n\n\t/**\n\t * If all the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Add a player by name and url to the Players\n\t * @param  name A unique name to give the player\n\t * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n\t * @param callback  The callback to invoke when the url is loaded.\n\t * @example\n\t * const players = new Tone.Players();\n\t * players.add(\"gong\", \"https://tonejs.github.io/audio/berklee/gong_1.mp3\", () => {\n\t * \tconsole.log(\"gong loaded\");\n\t * \tplayers.player(\"gong\").start();\n\t * });\n\t */\n\tadd(\n\t\tname: string,\n\t\turl: string | ToneAudioBuffer | AudioBuffer,\n\t\tcallback?: () => void\n\t): this {\n\t\tassert(\n\t\t\t!this._buffers.has(name),\n\t\t\t\"A buffer with that name already exists on this object\"\n\t\t);\n\t\tthis._buffers.add(name, url, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param time The time to stop all of the players.\n\t */\n\tstopAll(time?: Time): this {\n\t\tthis._players.forEach((player) => player.stop(time));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._players.forEach((player) => player.dispose());\n\t\tthis._buffers.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,mCAAmC;AAG1D,SACCC,gBAAgB,QAEV,wCAAwC;AAC/C,SAAqBC,aAAa,QAAQ,qCAAqC;AAE/E,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,IAAI,EAAEC,QAAQ,QAAQ,8BAA8B;AAE7D,SAASC,MAAM,QAAuB,cAAc;AACpD,SAASC,MAAM,QAAQ,aAAa;AAapC;;;;AAIA,OAAM,MAAOC,OAAQ,SAAQP,aAA6B;EAyDzDQ,YAAA;IACC,MAAMC,OAAO,GAAGR,oBAAoB,CACnCM,OAAO,CAACG,WAAW,EAAE,EACrBC,SAAS,EACT,CAAC,MAAM,EAAE,QAAQ,CAAC,EAClB,MAAM,CACN;IACD,KAAK,CAACF,OAAO,CAAC;IA/DN,KAAAG,IAAI,GAAW,SAAS;IAiBjC;;;IAGS,KAAAC,KAAK,GAAGC,SAAS;IAE1B;;;IAGQ,KAAAC,QAAQ,GAAwB,IAAIC,GAAG,EAAE;IAwChD;;;IAGA,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIpB,MAAM,CAAC;MACvCqB,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,MAAM,EAAEX,OAAO,CAACW;KAChB,CAAC;IAEF,IAAI,CAACA,MAAM,GAAG,IAAI,CAACH,OAAO,CAACG,MAAM;IACjChB,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC;IACxB,IAAI,CAACiB,QAAQ,GAAG,IAAItB,gBAAgB,CAAC;MACpCuB,IAAI,EAAEb,OAAO,CAACa,IAAI;MAClBC,MAAM,EAAEd,OAAO,CAACc,MAAM;MACtBC,OAAO,EAAEf,OAAO,CAACe,OAAO;MACxBC,OAAO,EAAEhB,OAAO,CAACgB;KACjB,CAAC;IACF;IACA,IAAI,CAACC,IAAI,GAAGjB,OAAO,CAACiB,IAAI;IACxB,IAAI,CAACC,OAAO,GAAGlB,OAAO,CAACmB,MAAM;IAC7B,IAAI,CAACC,QAAQ,GAAGpB,OAAO,CAACqB,OAAO;EAChC;EAEA,OAAOpB,WAAWA,CAAA;IACjB,OAAOqB,MAAM,CAACC,MAAM,CAAC3B,MAAM,CAACK,WAAW,EAAE,EAAE;MAC1Cc,OAAO,EAAE,EAAE;MACXI,MAAM,EAAE,CAAC;MACTE,OAAO,EAAE,CAAC;MACVJ,IAAI,EAAE,KAAK;MACXH,MAAM,EAAEpB,IAAI;MACZsB,OAAO,EAAEtB,IAAI;MACbmB,IAAI,EAAE,EAAE;MACRF,MAAM,EAAE;KACR,CAAC;EACH;EAEA;;;EAGA,IAAIM,IAAIA,CAAA;IACP,OAAO,IAAI,CAACT,OAAO,CAACS,IAAI;EACzB;EACA,IAAIA,IAAIA,CAACA,IAAI;IACZ,IAAI,CAACT,OAAO,CAACS,IAAI,GAAGA,IAAI;EACzB;EAEA;;;EAGA,IAAIE,MAAMA,CAAA;IACT,OAAO,IAAI,CAACD,OAAO;EACpB;EACA,IAAIC,MAAMA,CAACA,MAAM;IAChB,IAAI,CAACD,OAAO,GAAGC,MAAM;IACrB,IAAI,CAACb,QAAQ,CAACkB,OAAO,CAAEC,MAAM,IAAI;MAChCA,MAAM,CAACN,MAAM,GAAGA,MAAM;IACvB,CAAC,CAAC;EACH;EAEA;;;EAGA,IAAIE,OAAOA,CAAA;IACV,OAAO,IAAI,CAACD,QAAQ;EACrB;EACA,IAAIC,OAAOA,CAACA,OAAO;IAClB,IAAI,CAACD,QAAQ,GAAGC,OAAO;IACvB,IAAI,CAACf,QAAQ,CAACkB,OAAO,CAAEC,MAAM,IAAI;MAChCA,MAAM,CAACJ,OAAO,GAAGA,OAAO;IACzB,CAAC,CAAC;EACH;EAEA;;;EAGA,IAAIK,KAAKA,CAAA;IACR,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACvB,QAAQ,CAAC,CAACwB,IAAI,CAC7C,CAAC,CAACC,CAAC,EAAEN,MAAM,CAAC,KAAKA,MAAM,CAACC,KAAK,KAAK,SAAS,CAC3C;IACD,OAAOC,OAAO,GAAG,SAAS,GAAG,SAAS;EACvC;EAEA;;;;EAIAK,GAAGA,CAAC7B,IAAY;IACf,OAAO,IAAI,CAACS,QAAQ,CAACoB,GAAG,CAAC7B,IAAI,CAAC;EAC/B;EAEA;;;;EAIAsB,MAAMA,CAACtB,IAAY;IAClBV,MAAM,CACL,IAAI,CAACuC,GAAG,CAAC7B,IAAI,CAAC,EACd,2BAA2BA,IAAI,wBAAwB,CACvD;IACD,IAAI,CAAC,IAAI,CAACG,QAAQ,CAAC0B,GAAG,CAAC7B,IAAI,CAAC,EAAE;MAC7B,MAAMsB,MAAM,GAAG,IAAI5B,MAAM,CAAC;QACzBa,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBS,MAAM,EAAE,IAAI,CAACD,OAAO;QACpBG,OAAO,EAAE,IAAI,CAACD,QAAQ;QACtBa,GAAG,EAAE,IAAI,CAACrB,QAAQ,CAACsB,GAAG,CAAC/B,IAAI;OAC3B,CAAC,CAACgC,OAAO,CAAC,IAAI,CAAC1B,MAAM,CAAC;MACvB,IAAI,CAACH,QAAQ,CAAC8B,GAAG,CAACjC,IAAI,EAAEsB,MAAM,CAAC;IAChC;IACA,OAAO,IAAI,CAACnB,QAAQ,CAAC4B,GAAG,CAAC/B,IAAI,CAAW;EACzC;EAEA;;;EAGA,IAAIkC,MAAMA,CAAA;IACT,OAAO,IAAI,CAACzB,QAAQ,CAACyB,MAAM;EAC5B;EAEA;;;;;;;;;;;;EAYAC,GAAGA,CACFnC,IAAY,EACZ8B,GAA2C,EAC3CM,QAAqB;IAErB9C,MAAM,CACL,CAAC,IAAI,CAACmB,QAAQ,CAACoB,GAAG,CAAC7B,IAAI,CAAC,EACxB,uDAAuD,CACvD;IACD,IAAI,CAACS,QAAQ,CAAC0B,GAAG,CAACnC,IAAI,EAAE8B,GAAG,EAAEM,QAAQ,CAAC;IACtC,OAAO,IAAI;EACZ;EAEA;;;;EAIAC,OAAOA,CAACC,IAAW;IAClB,IAAI,CAACnC,QAAQ,CAACkB,OAAO,CAAEC,MAAM,IAAKA,MAAM,CAACiB,IAAI,CAACD,IAAI,CAAC,CAAC;IACpD,OAAO,IAAI;EACZ;EAEAE,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACnC,OAAO,CAACmC,OAAO,EAAE;IACtB,IAAI,CAAChC,MAAM,CAACgC,OAAO,EAAE;IACrB,IAAI,CAACrC,QAAQ,CAACkB,OAAO,CAAEC,MAAM,IAAKA,MAAM,CAACkB,OAAO,EAAE,CAAC;IACnD,IAAI,CAAC/B,QAAQ,CAAC+B,OAAO,EAAE;IACvB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}