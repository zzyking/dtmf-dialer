{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) => {\n  return (context, nativeContext) => {\n    const nativeListener = nativeContext.listener;\n    // Bug #117: Only Chrome & Edge support the new interface already.\n    const createFakeAudioParams = () => {\n      const buffer = new Float32Array(1);\n      const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      let isScriptProcessorNodeCreated = false;\n      let lastOrientation = [0, 0, -1, 0, 1, 0];\n      let lastPosition = [0, 0, 0];\n      const createScriptProcessorNode = () => {\n        if (isScriptProcessorNodeCreated) {\n          return;\n        }\n        isScriptProcessorNodeCreated = true;\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({\n          inputBuffer\n        }) => {\n          const orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2), getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n          if (orientation.some((value, index) => value !== lastOrientation[index])) {\n            nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n            lastOrientation = orientation;\n          }\n          const positon = [getFirstSample(inputBuffer, buffer, 6), getFirstSample(inputBuffer, buffer, 7), getFirstSample(inputBuffer, buffer, 8)];\n          if (positon.some((value, index) => value !== lastPosition[index])) {\n            nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n            lastPosition = positon;\n          }\n        };\n        channelMergerNode.connect(scriptProcessorNode);\n      };\n      const createSetOrientation = index => value => {\n        if (value !== lastOrientation[index]) {\n          lastOrientation[index] = value;\n          nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n      };\n      const createSetPosition = index => value => {\n        if (value !== lastPosition[index]) {\n          lastPosition[index] = value;\n          nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n      };\n      const createFakeAudioParam = (input, initialValue, setValue) => {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: initialValue\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input);\n        // @todo This should be stopped when the context is closed.\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get() {\n            return initialValue;\n          }\n        });\n        /*\n         * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n        const audioParam = createAudioParam({\n          context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        overwriteAccessors(audioParam, 'value', get => () => get.call(audioParam), set => value => {\n          try {\n            set.call(audioParam, value);\n          } catch (err) {\n            if (err.code !== 9) {\n              throw err;\n            }\n          }\n          createScriptProcessorNode();\n          if (isOffline) {\n            // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n            setValue(value);\n          }\n        });\n        audioParam.cancelAndHoldAtTime = (cancelAndHoldAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = cancelAndHoldAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.cancelAndHoldAtTime);\n        audioParam.cancelScheduledValues = (cancelScheduledValues => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = cancelScheduledValues.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.cancelScheduledValues);\n        audioParam.exponentialRampToValueAtTime = (exponentialRampToValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = exponentialRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.exponentialRampToValueAtTime);\n        audioParam.linearRampToValueAtTime = (linearRampToValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = linearRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.linearRampToValueAtTime);\n        audioParam.setTargetAtTime = (setTargetAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = setTargetAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setTargetAtTime);\n        audioParam.setValueAtTime = (setValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = setValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setValueAtTime);\n        audioParam.setValueCurveAtTime = (setValueCurveAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = setValueCurveAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setValueCurveAtTime);\n        return audioParam;\n      };\n      return {\n        forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n        forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n        forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n        positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n        positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n        positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n        upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n        upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n        upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n      };\n    };\n    const {\n      forwardX,\n      forwardY,\n      forwardZ,\n      positionX,\n      positionY,\n      positionZ,\n      upX,\n      upY,\n      upZ\n    } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n      get forwardY() {\n        return forwardY;\n      },\n      get forwardZ() {\n        return forwardZ;\n      },\n      get positionX() {\n        return positionX;\n      },\n      get positionY() {\n        return positionY;\n      },\n      get positionZ() {\n        return positionZ;\n      },\n      get upX() {\n        return upX;\n      },\n      get upY() {\n        return upY;\n      },\n      get upZ() {\n        return upZ;\n      }\n    };\n  };\n};","map":{"version":3,"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","createAudioListenerFactory","createAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeScriptProcessorNode","createNotSupportedError","getFirstSample","isNativeOfflineAudioContext","overwriteAccessors","context","nativeContext","nativeListener","listener","createFakeAudioParams","buffer","Float32Array","channelMergerNode","channelCount","channelCountMode","channelInterpretation","numberOfInputs","isOffline","isScriptProcessorNodeCreated","lastOrientation","lastPosition","createScriptProcessorNode","scriptProcessorNode","onaudioprocess","inputBuffer","orientation","some","value","index","setOrientation","positon","setPosition","connect","createSetOrientation","createSetPosition","createFakeAudioParam","input","initialValue","setValue","constantSourceNode","offset","start","Object","defineProperty","get","audioParam","call","set","err","code","cancelAndHoldAtTime","args","apply","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setTargetAtTime","setValueAtTime","setValueCurveAtTime","forwardX","forwardY","forwardZ","positionX","positionY","positionZ","upX","upY","upZ","undefined"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/factories/audio-listener-factory.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam } from '../interfaces';\nimport { TAudioListenerFactoryFactory } from '../types';\n\nexport const createAudioListenerFactory: TAudioListenerFactoryFactory = (\n    createAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    getFirstSample,\n    isNativeOfflineAudioContext,\n    overwriteAccessors\n) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n\n        // Bug #117: Only Chrome & Edge support the new interface already.\n        const createFakeAudioParams = () => {\n            const buffer = new Float32Array(1);\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 9\n            });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n            let isScriptProcessorNodeCreated = false;\n            let lastOrientation: [number, number, number, number, number, number] = [0, 0, -1, 0, 1, 0];\n            let lastPosition: [number, number, number] = [0, 0, 0];\n\n            const createScriptProcessorNode = () => {\n                if (isScriptProcessorNodeCreated) {\n                    return;\n                }\n\n                isScriptProcessorNodeCreated = true;\n\n                const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n                // tslint:disable-next-line:deprecation\n                scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                    const orientation: [number, number, number, number, number, number] = [\n                        getFirstSample(inputBuffer, buffer, 0),\n                        getFirstSample(inputBuffer, buffer, 1),\n                        getFirstSample(inputBuffer, buffer, 2),\n                        getFirstSample(inputBuffer, buffer, 3),\n                        getFirstSample(inputBuffer, buffer, 4),\n                        getFirstSample(inputBuffer, buffer, 5)\n                    ];\n\n                    if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                        nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n                        lastOrientation = orientation;\n                    }\n\n                    const positon: [number, number, number] = [\n                        getFirstSample(inputBuffer, buffer, 6),\n                        getFirstSample(inputBuffer, buffer, 7),\n                        getFirstSample(inputBuffer, buffer, 8)\n                    ];\n\n                    if (positon.some((value, index) => value !== lastPosition[index])) {\n                        nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n\n                        lastPosition = positon;\n                    }\n                };\n\n                channelMergerNode.connect(scriptProcessorNode);\n            };\n            const createSetOrientation = (index: number) => (value: number) => {\n                if (value !== lastOrientation[index]) {\n                    lastOrientation[index] = value;\n\n                    nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n                }\n            };\n            const createSetPosition = (index: number) => (value: number) => {\n                if (value !== lastPosition[index]) {\n                    lastPosition[index] = value;\n\n                    nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n                }\n            };\n            const createFakeAudioParam = (input: number, initialValue: number, setValue: (value: number) => void) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: initialValue\n                });\n\n                constantSourceNode.connect(channelMergerNode, 0, input);\n\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get(): number {\n                        return initialValue;\n                    }\n                });\n\n                /*\n                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                const audioParam = createAudioParam(\n                    <any>{ context },\n                    isOffline,\n                    constantSourceNode.offset,\n                    MOST_POSITIVE_SINGLE_FLOAT,\n                    MOST_NEGATIVE_SINGLE_FLOAT\n                );\n\n                overwriteAccessors(\n                    audioParam,\n                    'value',\n                    (get) => () => get.call(audioParam),\n                    (set) => (value) => {\n                        try {\n                            set.call(audioParam, value);\n                        } catch (err) {\n                            if (err.code !== 9) {\n                                throw err;\n                            }\n                        }\n\n                        createScriptProcessorNode();\n\n                        if (isOffline) {\n                            // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n                            setValue(value);\n                        }\n                    }\n                );\n\n                audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['cancelAndHoldAtTime']>) => {\n                        const value = cancelAndHoldAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.cancelAndHoldAtTime);\n                audioParam.cancelScheduledValues = ((cancelScheduledValues) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['cancelScheduledValues']>) => {\n                        const value = cancelScheduledValues.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.cancelScheduledValues);\n                audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['exponentialRampToValueAtTime']>) => {\n                        const value = exponentialRampToValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.exponentialRampToValueAtTime);\n                audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['linearRampToValueAtTime']>) => {\n                        const value = linearRampToValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.linearRampToValueAtTime);\n                audioParam.setTargetAtTime = ((setTargetAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setTargetAtTime']>) => {\n                        const value = setTargetAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setTargetAtTime);\n                audioParam.setValueAtTime = ((setValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setValueAtTime']>) => {\n                        const value = setValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setValueAtTime);\n                audioParam.setValueCurveAtTime = ((setValueCurveAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setValueCurveAtTime']>) => {\n                        const value = setValueCurveAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setValueCurveAtTime);\n\n                return audioParam;\n            };\n\n            return {\n                forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n                forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n                forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n                positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n                positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n                positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n                upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n                upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n                upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n            };\n        };\n\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } =\n            nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n\n        return {\n            get forwardX(): IAudioParam {\n                return forwardX;\n            },\n            get forwardY(): IAudioParam {\n                return forwardY;\n            },\n            get forwardZ(): IAudioParam {\n                return forwardZ;\n            },\n            get positionX(): IAudioParam {\n                return positionX;\n            },\n            get positionY(): IAudioParam {\n                return positionY;\n            },\n            get positionZ(): IAudioParam {\n                return positionZ;\n            },\n            get upX(): IAudioParam {\n                return upX;\n            },\n            get upY(): IAudioParam {\n                return upY;\n            },\n            get upZ(): IAudioParam {\n                return upZ;\n            }\n        };\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}