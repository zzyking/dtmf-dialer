{"ast":null,"code":"import { Loop } from \"./Loop.js\";\nimport { PatternGenerator } from \"./PatternGenerator.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns.\n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\nexport class Pattern extends Loop {\n  constructor() {\n    const options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n    super(options);\n    this.name = \"Pattern\";\n    this.callback = options.callback;\n    this._values = options.values;\n    this._pattern = PatternGenerator(options.values.length, options.pattern);\n    this._type = options.pattern;\n  }\n  static getDefaults() {\n    return Object.assign(Loop.getDefaults(), {\n      pattern: \"up\",\n      values: [],\n      callback: noOp\n    });\n  }\n  /**\n   * Internal function called when the notes should be called\n   */\n  _tick(time) {\n    const index = this._pattern.next();\n    this._index = index.value;\n    this._value = this._values[index.value];\n    this.callback(time, this._value);\n  }\n  /**\n   * The array of events.\n   */\n  get values() {\n    return this._values;\n  }\n  set values(val) {\n    this._values = val;\n    // reset the pattern\n    this.pattern = this._type;\n  }\n  /**\n   * The current value of the pattern.\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * The current index of the pattern.\n   */\n  get index() {\n    return this._index;\n  }\n  /**\n   * The pattern type.\n   */\n  get pattern() {\n    return this._type;\n  }\n  set pattern(pattern) {\n    this._type = pattern;\n    this._pattern = PatternGenerator(this._values.length, this._type);\n  }\n}","map":{"version":3,"names":["Loop","PatternGenerator","optionsFromArguments","noOp","Pattern","constructor","options","getDefaults","arguments","name","callback","_values","values","_pattern","length","pattern","_type","Object","assign","_tick","time","index","next","_index","value","_value","val"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/event/Pattern.ts"],"sourcesContent":["import { Loop, LoopOptions } from \"./Loop.js\";\nimport { PatternGenerator, PatternName } from \"./PatternGenerator.js\";\nimport { ToneEventCallback } from \"./ToneEvent.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Seconds } from \"../core/type/Units.js\";\nimport { noOp } from \"../core/util/Interface.js\";\n\nexport interface PatternOptions<ValueType> extends LoopOptions {\n\tpattern: PatternName;\n\tvalues: ValueType[];\n\tcallback: (time: Seconds, value?: ValueType) => void;\n}\n\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns.\n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\nexport class Pattern<ValueType> extends Loop<PatternOptions<ValueType>> {\n\treadonly name: string = \"Pattern\";\n\n\t/**\n\t * The pattern generator function\n\t */\n\tprivate _pattern: Iterator<number>;\n\n\t/**\n\t * The current index\n\t */\n\tprivate _index?: number;\n\n\t/**\n\t * The current value\n\t */\n\tprivate _value?: ValueType;\n\n\t/**\n\t * Hold the pattern type\n\t */\n\tprivate _type: PatternName;\n\n\t/**\n\t * Hold the values\n\t */\n\tprivate _values: ValueType[];\n\n\t/**\n\t * The callback to be invoked at a regular interval\n\t */\n\tcallback: (time: Seconds, value?: ValueType) => void;\n\n\t/**\n\t * @param  callback The callback to invoke with the event.\n\t * @param  values The values to arpeggiate over.\n\t * @param  pattern  The name of the pattern\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tvalues?: ValueType[],\n\t\tpattern?: PatternName\n\t);\n\tconstructor(options?: Partial<PatternOptions<ValueType>>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Pattern.getDefaults(), arguments, [\n\t\t\t\"callback\",\n\t\t\t\"values\",\n\t\t\t\"pattern\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis.callback = options.callback;\n\t\tthis._values = options.values;\n\t\tthis._pattern = PatternGenerator(\n\t\t\toptions.values.length,\n\t\t\toptions.pattern\n\t\t);\n\t\tthis._type = options.pattern;\n\t}\n\n\tstatic getDefaults(): PatternOptions<any> {\n\t\treturn Object.assign(Loop.getDefaults(), {\n\t\t\tpattern: \"up\" as const,\n\t\t\tvalues: [],\n\t\t\tcallback: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst index = this._pattern.next() as IteratorResult<ValueType>;\n\t\tthis._index = index.value;\n\t\tthis._value = this._values[index.value];\n\t\tthis.callback(time, this._value);\n\t}\n\n\t/**\n\t * The array of events.\n\t */\n\tget values(): ValueType[] {\n\t\treturn this._values;\n\t}\n\tset values(val) {\n\t\tthis._values = val;\n\t\t// reset the pattern\n\t\tthis.pattern = this._type;\n\t}\n\n\t/**\n\t * The current value of the pattern.\n\t */\n\tget value(): ValueType | undefined {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * The current index of the pattern.\n\t */\n\tget index(): number | undefined {\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * The pattern type.\n\t */\n\tget pattern(): PatternName {\n\t\treturn this._type;\n\t}\n\tset pattern(pattern) {\n\t\tthis._type = pattern;\n\t\tthis._pattern = PatternGenerator(this._values.length, this._type);\n\t}\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAqB,WAAW;AAC7C,SAASC,gBAAgB,QAAqB,uBAAuB;AAErE,SAASC,oBAAoB,QAAQ,0BAA0B;AAE/D,SAASC,IAAI,QAAQ,2BAA2B;AAQhD;;;;;;;;;AASA,OAAM,MAAOC,OAAmB,SAAQJ,IAA+B;EA4CtEK,YAAA;IACC,MAAMC,OAAO,GAAGJ,oBAAoB,CAACE,OAAO,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CACtE,UAAU,EACV,QAAQ,EACR,SAAS,CACT,CAAC;IACF,KAAK,CAACF,OAAO,CAAC;IAjDN,KAAAG,IAAI,GAAW,SAAS;IAmDhC,IAAI,CAACC,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;IAChC,IAAI,CAACC,OAAO,GAAGL,OAAO,CAACM,MAAM;IAC7B,IAAI,CAACC,QAAQ,GAAGZ,gBAAgB,CAC/BK,OAAO,CAACM,MAAM,CAACE,MAAM,EACrBR,OAAO,CAACS,OAAO,CACf;IACD,IAAI,CAACC,KAAK,GAAGV,OAAO,CAACS,OAAO;EAC7B;EAEA,OAAOR,WAAWA,CAAA;IACjB,OAAOU,MAAM,CAACC,MAAM,CAAClB,IAAI,CAACO,WAAW,EAAE,EAAE;MACxCQ,OAAO,EAAE,IAAa;MACtBH,MAAM,EAAE,EAAE;MACVF,QAAQ,EAAEP;KACV,CAAC;EACH;EAEA;;;EAGUgB,KAAKA,CAACC,IAAa;IAC5B,MAAMC,KAAK,GAAG,IAAI,CAACR,QAAQ,CAACS,IAAI,EAA+B;IAC/D,IAAI,CAACC,MAAM,GAAGF,KAAK,CAACG,KAAK;IACzB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACd,OAAO,CAACU,KAAK,CAACG,KAAK,CAAC;IACvC,IAAI,CAACd,QAAQ,CAACU,IAAI,EAAE,IAAI,CAACK,MAAM,CAAC;EACjC;EAEA;;;EAGA,IAAIb,MAAMA,CAAA;IACT,OAAO,IAAI,CAACD,OAAO;EACpB;EACA,IAAIC,MAAMA,CAACc,GAAG;IACb,IAAI,CAACf,OAAO,GAAGe,GAAG;IAClB;IACA,IAAI,CAACX,OAAO,GAAG,IAAI,CAACC,KAAK;EAC1B;EAEA;;;EAGA,IAAIQ,KAAKA,CAAA;IACR,OAAO,IAAI,CAACC,MAAM;EACnB;EAEA;;;EAGA,IAAIJ,KAAKA,CAAA;IACR,OAAO,IAAI,CAACE,MAAM;EACnB;EAEA;;;EAGA,IAAIR,OAAOA,CAAA;IACV,OAAO,IAAI,CAACC,KAAK;EAClB;EACA,IAAID,OAAOA,CAACA,OAAO;IAClB,IAAI,CAACC,KAAK,GAAGD,OAAO;IACpB,IAAI,CAACF,QAAQ,GAAGZ,gBAAgB,CAAC,IAAI,CAACU,OAAO,CAACG,MAAM,EAAE,IAAI,CAACE,KAAK,CAAC;EAClE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}