{"ast":null,"code":"import \"../core/clock/Transport.js\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext.js\";\nimport { TicksClass } from \"../core/type/Ticks.js\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { StateTimeline } from \"../core/util/StateTimeline.js\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck.js\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent extends ToneWithContext {\n  constructor() {\n    const options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    super(options);\n    this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n    this._startOffset = 0;\n    this._loop = options.loop;\n    this.callback = options.callback;\n    this.value = options.value;\n    this._loopStart = this.toTicks(options.loopStart);\n    this._loopEnd = this.toTicks(options.loopEnd);\n    this._playbackRate = options.playbackRate;\n    this._probability = options.probability;\n    this._humanize = options.humanize;\n    this.mute = options.mute;\n    this._playbackRate = options.playbackRate;\n    this._state.increasing = true;\n    // schedule the events for the first time\n    this._rescheduleEvents();\n  }\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      humanize: false,\n      loop: false,\n      loopEnd: \"1m\",\n      loopStart: 0,\n      mute: false,\n      playbackRate: 1,\n      probability: 1,\n      value: null\n    });\n  }\n  /**\n   * Reschedule all of the events along the timeline\n   * with the updated values.\n   * @param after Only reschedules events after the given time.\n   */\n  _rescheduleEvents(after = -1) {\n    // if no argument is given, schedules all of the events\n    this._state.forEachFrom(after, event => {\n      let duration;\n      if (event.state === \"started\") {\n        if (event.id !== -1) {\n          this.context.transport.clear(event.id);\n        }\n        const startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n        if (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n          duration = Infinity;\n          if (isNumber(this._loop)) {\n            duration = this._loop * this._getLoopDuration();\n          }\n          const nextEvent = this._state.getAfter(startTick);\n          if (nextEvent !== null) {\n            duration = Math.min(duration, nextEvent.time - startTick);\n          }\n          if (duration !== Infinity) {\n            duration = new TicksClass(this.context, duration);\n          }\n          const interval = new TicksClass(this.context, this._getLoopDuration());\n          event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n        } else {\n          event.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n        }\n      }\n    });\n  }\n  /**\n   * Returns the playback state of the note, either \"started\" or \"stopped\".\n   */\n  get state() {\n    return this._state.getValueAtTime(this.context.transport.ticks);\n  }\n  /**\n   * The start from the scheduled start time.\n   */\n  get startOffset() {\n    return this._startOffset;\n  }\n  set startOffset(offset) {\n    this._startOffset = offset;\n  }\n  /**\n   * The probability of the notes being triggered.\n   */\n  get probability() {\n    return this._probability;\n  }\n  set probability(prob) {\n    this._probability = prob;\n  }\n  /**\n   * If set to true, will apply small random variation\n   * to the callback time. If the value is given as a time, it will randomize\n   * by that amount.\n   * @example\n   * const event = new Tone.ToneEvent();\n   * event.humanize = true;\n   */\n  get humanize() {\n    return this._humanize;\n  }\n  set humanize(variation) {\n    this._humanize = variation;\n  }\n  /**\n   * Start the note at the given time.\n   * @param  time  When the event should start.\n   */\n  start(time) {\n    const ticks = this.toTicks(time);\n    if (this._state.getValueAtTime(ticks) === \"stopped\") {\n      this._state.add({\n        id: -1,\n        state: \"started\",\n        time: ticks\n      });\n      this._rescheduleEvents(ticks);\n    }\n    return this;\n  }\n  /**\n   * Stop the Event at the given time.\n   * @param  time  When the event should stop.\n   */\n  stop(time) {\n    this.cancel(time);\n    const ticks = this.toTicks(time);\n    if (this._state.getValueAtTime(ticks) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", ticks, {\n        id: -1\n      });\n      const previousEvent = this._state.getBefore(ticks);\n      let rescheduleTime = ticks;\n      if (previousEvent !== null) {\n        rescheduleTime = previousEvent.time;\n      }\n      this._rescheduleEvents(rescheduleTime);\n    }\n    return this;\n  }\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n  cancel(time) {\n    time = defaultArg(time, -Infinity);\n    const ticks = this.toTicks(time);\n    this._state.forEachFrom(ticks, event => {\n      this.context.transport.clear(event.id);\n    });\n    this._state.cancel(ticks);\n    return this;\n  }\n  /**\n   * The callback function invoker. Also\n   * checks if the Event is done playing\n   * @param  time  The time of the event in seconds\n   */\n  _tick(time) {\n    const ticks = this.context.transport.getTicksAtTime(time);\n    if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n      if (this.probability < 1 && Math.random() > this.probability) {\n        return;\n      }\n      if (this.humanize) {\n        let variation = 0.02;\n        if (!isBoolean(this.humanize)) {\n          variation = this.toSeconds(this.humanize);\n        }\n        time += (Math.random() * 2 - 1) * variation;\n      }\n      this.callback(time, this.value);\n    }\n  }\n  /**\n   * Get the duration of the loop.\n   */\n  _getLoopDuration() {\n    return (this._loopEnd - this._loopStart) / this._playbackRate;\n  }\n  /**\n   * If the note should loop or not\n   * between ToneEvent.loopStart and\n   * ToneEvent.loopEnd. If set to true,\n   * the event will loop indefinitely,\n   * if set to a number greater than 1\n   * it will play a specific number of\n   * times, if set to false, 0 or 1, the\n   * part will only play once.\n   */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this._rescheduleEvents();\n  }\n  /**\n   * The playback rate of the event. Defaults to 1.\n   * @example\n   * const note = new Tone.ToneEvent();\n   * note.loop = true;\n   * // repeat the note twice as fast\n   * note.playbackRate = 2;\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    this._rescheduleEvents();\n  }\n  /**\n   * The loopEnd point is the time the event will loop\n   * if ToneEvent.loop is true.\n   */\n  get loopEnd() {\n    return new TicksClass(this.context, this._loopEnd).toSeconds();\n  }\n  set loopEnd(loopEnd) {\n    this._loopEnd = this.toTicks(loopEnd);\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The time when the loop should start.\n   */\n  get loopStart() {\n    return new TicksClass(this.context, this._loopStart).toSeconds();\n  }\n  set loopStart(loopStart) {\n    this._loopStart = this.toTicks(loopStart);\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The current progress of the loop interval.\n   * Returns 0 if the event is not started yet or\n   * it is not set to loop.\n   */\n  get progress() {\n    if (this._loop) {\n      const ticks = this.context.transport.ticks;\n      const lastEvent = this._state.get(ticks);\n      if (lastEvent !== null && lastEvent.state === \"started\") {\n        const loopDuration = this._getLoopDuration();\n        const progress = (ticks - lastEvent.time) % loopDuration;\n        return progress / loopDuration;\n      } else {\n        return 0;\n      }\n    } else {\n      return 0;\n    }\n  }\n  dispose() {\n    super.dispose();\n    this.cancel();\n    this._state.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneWithContext","TicksClass","defaultArg","optionsFromArguments","noOp","StateTimeline","isBoolean","isNumber","ToneEvent","constructor","options","getDefaults","arguments","name","_state","_startOffset","_loop","loop","callback","value","_loopStart","toTicks","loopStart","_loopEnd","loopEnd","_playbackRate","playbackRate","_probability","probability","_humanize","humanize","mute","increasing","_rescheduleEvents","Object","assign","after","forEachFrom","event","duration","state","id","context","transport","clear","startTick","time","Math","round","startOffset","Infinity","_getLoopDuration","nextEvent","getAfter","min","interval","scheduleRepeat","_tick","bind","schedule","getValueAtTime","ticks","offset","prob","variation","start","add","stop","cancel","setStateAtTime","previousEvent","getBefore","rescheduleTime","getTicksAtTime","random","toSeconds","rate","progress","lastEvent","get","loopDuration","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/event/ToneEvent.ts"],"sourcesContent":["import \"../core/clock/Transport.js\";\nimport {\n\tToneWithContext,\n\tToneWithContextOptions,\n} from \"../core/context/ToneWithContext.js\";\nimport { TicksClass } from \"../core/type/Ticks.js\";\nimport { TransportTimeClass } from \"../core/type/TransportTime.js\";\nimport {\n\tNormalRange,\n\tPositive,\n\tSeconds,\n\tTicks,\n\tTime,\n\tTransportTime,\n} from \"../core/type/Units.js\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport {\n\tBasicPlaybackState,\n\tStateTimeline,\n} from \"../core/util/StateTimeline.js\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck.js\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<\n\tToneEventOptions<ValueType>\n> {\n\treadonly name: string = \"ToneEvent\";\n\n\t/**\n\t * Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t * The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t * The value which is passed to the\n\t * callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The playback speed of the note. A speed of 1\n\t * is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t * A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t * private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t * the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t * If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param value The value or values which should be passed to the callback function on invocation.\n\t */\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tToneEvent.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"callback\", \"value\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._state.increasing = true;\n\t\t// schedule the events for the first time\n\t\tthis._rescheduleEvents();\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp,\n\t\t\thumanize: false,\n\t\t\tloop: false,\n\t\t\tloopEnd: \"1m\",\n\t\t\tloopStart: 0,\n\t\t\tmute: false,\n\t\t\tplaybackRate: 1,\n\t\t\tprobability: 1,\n\t\t\tvalue: null,\n\t\t});\n\t}\n\n\t/**\n\t * Reschedule all of the events along the timeline\n\t * with the updated values.\n\t * @param after Only reschedules events after the given time.\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, (event) => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick =\n\t\t\t\t\tevent.time +\n\t\t\t\t\tMath.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (\n\t\t\t\t\tthis._loop === true ||\n\t\t\t\t\t(isNumber(this._loop) && this._loop > 1)\n\t\t\t\t) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = this._loop * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(\n\t\t\t\t\t\t\tduration,\n\t\t\t\t\t\t\tnextEvent.time - startTick\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(\n\t\t\t\t\t\tthis.context,\n\t\t\t\t\t\tthis._getLoopDuration()\n\t\t\t\t\t);\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this),\n\t\t\t\t\t\tinterval,\n\t\t\t\t\t\tnew TicksClass(this.context, startTick),\n\t\t\t\t\t\tduration\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(\n\t\t\t\t\t\tthis._tick.bind(this),\n\t\t\t\t\t\tnew TicksClass(this.context, startTick)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(\n\t\t\tthis.context.transport.ticks\n\t\t) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t * The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * const event = new Tone.ToneEvent();\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t * Start the note at the given time.\n\t * @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the Event at the given time.\n\t * @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet rescheduleTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\trescheduleTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(rescheduleTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, (event) => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The callback function invoker. Also\n\t * checks if the Event is done playing\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t * Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn (this._loopEnd - this._loopStart) / this._playbackRate;\n\t}\n\n\t/**\n\t * If the note should loop or not\n\t * between ToneEvent.loopStart and\n\t * ToneEvent.loopEnd. If set to true,\n\t * the event will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The playback rate of the event. Defaults to 1.\n\t * @example\n\t * const note = new Tone.ToneEvent();\n\t * note.loop = true;\n\t * // repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The loopEnd point is the time the event will loop\n\t * if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The current progress of the loop interval.\n\t * Returns 0 if the event is not started yet or\n\t * it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,OAAO,4BAA4B;AACnC,SACCA,eAAe,QAET,oCAAoC;AAC3C,SAASC,UAAU,QAAQ,uBAAuB;AAUlD,SAASC,UAAU,EAAEC,oBAAoB,QAAQ,0BAA0B;AAC3E,SAASC,IAAI,QAAQ,2BAA2B;AAChD,SAECC,aAAa,QACP,+BAA+B;AACtC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,2BAA2B;AAgB/D;;;;;;;;;;;;;;;;;;AAkBA,OAAM,MAAOC,SAA2B,SAAQR,eAE/C;EAoEAS,YAAA;IACC,MAAMC,OAAO,GAAGP,oBAAoB,CACnCK,SAAS,CAACG,WAAW,EAAE,EACvBC,SAAS,EACT,CAAC,UAAU,EAAE,OAAO,CAAC,CACrB;IACD,KAAK,CAACF,OAAO,CAAC;IAzEN,KAAAG,IAAI,GAAW,WAAW;IA4BnC;;;IAGU,KAAAC,MAAM,GAEX,IAAIT,aAAa,CAAC,SAAS,CAAC;IAQjC;;;IAGU,KAAAU,YAAY,GAAU,CAAC;IA+BhC,IAAI,CAACC,KAAK,GAAGN,OAAO,CAACO,IAAI;IACzB,IAAI,CAACC,QAAQ,GAAGR,OAAO,CAACQ,QAAQ;IAChC,IAAI,CAACC,KAAK,GAAGT,OAAO,CAACS,KAAK;IAC1B,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,OAAO,CAACX,OAAO,CAACY,SAAS,CAAC;IACjD,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,OAAO,CAACX,OAAO,CAACc,OAAO,CAAC;IAC7C,IAAI,CAACC,aAAa,GAAGf,OAAO,CAACgB,YAAY;IACzC,IAAI,CAACC,YAAY,GAAGjB,OAAO,CAACkB,WAAW;IACvC,IAAI,CAACC,SAAS,GAAGnB,OAAO,CAACoB,QAAQ;IACjC,IAAI,CAACC,IAAI,GAAGrB,OAAO,CAACqB,IAAI;IACxB,IAAI,CAACN,aAAa,GAAGf,OAAO,CAACgB,YAAY;IACzC,IAAI,CAACZ,MAAM,CAACkB,UAAU,GAAG,IAAI;IAC7B;IACA,IAAI,CAACC,iBAAiB,EAAE;EACzB;EAEA,OAAOtB,WAAWA,CAAA;IACjB,OAAOuB,MAAM,CAACC,MAAM,CAACnC,eAAe,CAACW,WAAW,EAAE,EAAE;MACnDO,QAAQ,EAAEd,IAAI;MACd0B,QAAQ,EAAE,KAAK;MACfb,IAAI,EAAE,KAAK;MACXO,OAAO,EAAE,IAAI;MACbF,SAAS,EAAE,CAAC;MACZS,IAAI,EAAE,KAAK;MACXL,YAAY,EAAE,CAAC;MACfE,WAAW,EAAE,CAAC;MACdT,KAAK,EAAE;KACP,CAAC;EACH;EAEA;;;;;EAKQc,iBAAiBA,CAACG,KAAA,GAAe,CAAC,CAAC;IAC1C;IACA,IAAI,CAACtB,MAAM,CAACuB,WAAW,CAACD,KAAK,EAAGE,KAAK,IAAI;MACxC,IAAIC,QAAQ;MACZ,IAAID,KAAK,CAACE,KAAK,KAAK,SAAS,EAAE;QAC9B,IAAIF,KAAK,CAACG,EAAE,KAAK,CAAC,CAAC,EAAE;UACpB,IAAI,CAACC,OAAO,CAACC,SAAS,CAACC,KAAK,CAACN,KAAK,CAACG,EAAE,CAAC;QACvC;QACA,MAAMI,SAAS,GACdP,KAAK,CAACQ,IAAI,GACVC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACxB,aAAa,CAAC;QAClD,IACC,IAAI,CAACT,KAAK,KAAK,IAAI,IAClBT,QAAQ,CAAC,IAAI,CAACS,KAAK,CAAC,IAAI,IAAI,CAACA,KAAK,GAAG,CAAE,EACvC;UACDuB,QAAQ,GAAGW,QAAQ;UACnB,IAAI3C,QAAQ,CAAC,IAAI,CAACS,KAAK,CAAC,EAAE;YACzBuB,QAAQ,GAAG,IAAI,CAACvB,KAAK,GAAG,IAAI,CAACmC,gBAAgB,EAAE;UAChD;UACA,MAAMC,SAAS,GAAG,IAAI,CAACtC,MAAM,CAACuC,QAAQ,CAACR,SAAS,CAAC;UACjD,IAAIO,SAAS,KAAK,IAAI,EAAE;YACvBb,QAAQ,GAAGQ,IAAI,CAACO,GAAG,CAClBf,QAAQ,EACRa,SAAS,CAACN,IAAI,GAAGD,SAAS,CAC1B;UACF;UACA,IAAIN,QAAQ,KAAKW,QAAQ,EAAE;YAC1BX,QAAQ,GAAG,IAAItC,UAAU,CAAC,IAAI,CAACyC,OAAO,EAAEH,QAAQ,CAAC;UAClD;UACA,MAAMgB,QAAQ,GAAG,IAAItD,UAAU,CAC9B,IAAI,CAACyC,OAAO,EACZ,IAAI,CAACS,gBAAgB,EAAE,CACvB;UACDb,KAAK,CAACG,EAAE,GAAG,IAAI,CAACC,OAAO,CAACC,SAAS,CAACa,cAAc,CAC/C,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,EACrBH,QAAQ,EACR,IAAItD,UAAU,CAAC,IAAI,CAACyC,OAAO,EAAEG,SAAS,CAAC,EACvCN,QAAQ,CACR;QACF,CAAC,MAAM;UACND,KAAK,CAACG,EAAE,GAAG,IAAI,CAACC,OAAO,CAACC,SAAS,CAACgB,QAAQ,CACzC,IAAI,CAACF,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,EACrB,IAAIzD,UAAU,CAAC,IAAI,CAACyC,OAAO,EAAEG,SAAS,CAAC,CACvC;QACF;MACD;IACD,CAAC,CAAC;EACH;EAEA;;;EAGA,IAAIL,KAAKA,CAAA;IACR,OAAO,IAAI,CAAC1B,MAAM,CAAC8C,cAAc,CAChC,IAAI,CAAClB,OAAO,CAACC,SAAS,CAACkB,KAAK,CACN;EACxB;EAEA;;;EAGA,IAAIZ,WAAWA,CAAA;IACd,OAAO,IAAI,CAAClC,YAAY;EACzB;EACA,IAAIkC,WAAWA,CAACa,MAAM;IACrB,IAAI,CAAC/C,YAAY,GAAG+C,MAAM;EAC3B;EAEA;;;EAGA,IAAIlC,WAAWA,CAAA;IACd,OAAO,IAAI,CAACD,YAAY;EACzB;EACA,IAAIC,WAAWA,CAACmC,IAAI;IACnB,IAAI,CAACpC,YAAY,GAAGoC,IAAI;EACzB;EAEA;;;;;;;;EAQA,IAAIjC,QAAQA,CAAA;IACX,OAAO,IAAI,CAACD,SAAS;EACtB;EAEA,IAAIC,QAAQA,CAACkC,SAAS;IACrB,IAAI,CAACnC,SAAS,GAAGmC,SAAS;EAC3B;EAEA;;;;EAIAC,KAAKA,CAACnB,IAAyC;IAC9C,MAAMe,KAAK,GAAG,IAAI,CAACxC,OAAO,CAACyB,IAAI,CAAC;IAChC,IAAI,IAAI,CAAChC,MAAM,CAAC8C,cAAc,CAACC,KAAK,CAAC,KAAK,SAAS,EAAE;MACpD,IAAI,CAAC/C,MAAM,CAACoD,GAAG,CAAC;QACfzB,EAAE,EAAE,CAAC,CAAC;QACND,KAAK,EAAE,SAAS;QAChBM,IAAI,EAAEe;OACN,CAAC;MACF,IAAI,CAAC5B,iBAAiB,CAAC4B,KAAK,CAAC;IAC9B;IACA,OAAO,IAAI;EACZ;EAEA;;;;EAIAM,IAAIA,CAACrB,IAAyC;IAC7C,IAAI,CAACsB,MAAM,CAACtB,IAAI,CAAC;IACjB,MAAMe,KAAK,GAAG,IAAI,CAACxC,OAAO,CAACyB,IAAI,CAAC;IAChC,IAAI,IAAI,CAAChC,MAAM,CAAC8C,cAAc,CAACC,KAAK,CAAC,KAAK,SAAS,EAAE;MACpD,IAAI,CAAC/C,MAAM,CAACuD,cAAc,CAAC,SAAS,EAAER,KAAK,EAAE;QAAEpB,EAAE,EAAE,CAAC;MAAC,CAAE,CAAC;MACxD,MAAM6B,aAAa,GAAG,IAAI,CAACxD,MAAM,CAACyD,SAAS,CAACV,KAAK,CAAC;MAClD,IAAIW,cAAc,GAAGX,KAAK;MAC1B,IAAIS,aAAa,KAAK,IAAI,EAAE;QAC3BE,cAAc,GAAGF,aAAa,CAACxB,IAAI;MACpC;MACA,IAAI,CAACb,iBAAiB,CAACuC,cAAc,CAAC;IACvC;IACA,OAAO,IAAI;EACZ;EAEA;;;;EAIAJ,MAAMA,CAACtB,IAAyC;IAC/CA,IAAI,GAAG5C,UAAU,CAAC4C,IAAI,EAAE,CAACI,QAAQ,CAAC;IAClC,MAAMW,KAAK,GAAG,IAAI,CAACxC,OAAO,CAACyB,IAAI,CAAC;IAChC,IAAI,CAAChC,MAAM,CAACuB,WAAW,CAACwB,KAAK,EAAGvB,KAAK,IAAI;MACxC,IAAI,CAACI,OAAO,CAACC,SAAS,CAACC,KAAK,CAACN,KAAK,CAACG,EAAE,CAAC;IACvC,CAAC,CAAC;IACF,IAAI,CAAC3B,MAAM,CAACsD,MAAM,CAACP,KAAK,CAAC;IACzB,OAAO,IAAI;EACZ;EAEA;;;;;EAKUJ,KAAKA,CAACX,IAAa;IAC5B,MAAMe,KAAK,GAAG,IAAI,CAACnB,OAAO,CAACC,SAAS,CAAC8B,cAAc,CAAC3B,IAAI,CAAC;IACzD,IAAI,CAAC,IAAI,CAACf,IAAI,IAAI,IAAI,CAACjB,MAAM,CAAC8C,cAAc,CAACC,KAAK,CAAC,KAAK,SAAS,EAAE;MAClE,IAAI,IAAI,CAACjC,WAAW,GAAG,CAAC,IAAImB,IAAI,CAAC2B,MAAM,EAAE,GAAG,IAAI,CAAC9C,WAAW,EAAE;QAC7D;MACD;MACA,IAAI,IAAI,CAACE,QAAQ,EAAE;QAClB,IAAIkC,SAAS,GAAG,IAAI;QACpB,IAAI,CAAC1D,SAAS,CAAC,IAAI,CAACwB,QAAQ,CAAC,EAAE;UAC9BkC,SAAS,GAAG,IAAI,CAACW,SAAS,CAAC,IAAI,CAAC7C,QAAQ,CAAC;QAC1C;QACAgB,IAAI,IAAI,CAACC,IAAI,CAAC2B,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,IAAIV,SAAS;MAC5C;MACA,IAAI,CAAC9C,QAAQ,CAAC4B,IAAI,EAAE,IAAI,CAAC3B,KAAK,CAAC;IAChC;EACD;EAEA;;;EAGUgC,gBAAgBA,CAAA;IACzB,OAAO,CAAC,IAAI,CAAC5B,QAAQ,GAAG,IAAI,CAACH,UAAU,IAAI,IAAI,CAACK,aAAa;EAC9D;EAEA;;;;;;;;;;EAUA,IAAIR,IAAIA,CAAA;IACP,OAAO,IAAI,CAACD,KAAK;EAClB;EACA,IAAIC,IAAIA,CAACA,IAAI;IACZ,IAAI,CAACD,KAAK,GAAGC,IAAI;IACjB,IAAI,CAACgB,iBAAiB,EAAE;EACzB;EAEA;;;;;;;;EAQA,IAAIP,YAAYA,CAAA;IACf,OAAO,IAAI,CAACD,aAAa;EAC1B;EACA,IAAIC,YAAYA,CAACkD,IAAI;IACpB,IAAI,CAACnD,aAAa,GAAGmD,IAAI;IACzB,IAAI,CAAC3C,iBAAiB,EAAE;EACzB;EAEA;;;;EAIA,IAAIT,OAAOA,CAAA;IACV,OAAO,IAAIvB,UAAU,CAAC,IAAI,CAACyC,OAAO,EAAE,IAAI,CAACnB,QAAQ,CAAC,CAACoD,SAAS,EAAE;EAC/D;EACA,IAAInD,OAAOA,CAACA,OAAO;IAClB,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACF,OAAO,CAACG,OAAO,CAAC;IACrC,IAAI,IAAI,CAACR,KAAK,EAAE;MACf,IAAI,CAACiB,iBAAiB,EAAE;IACzB;EACD;EAEA;;;EAGA,IAAIX,SAASA,CAAA;IACZ,OAAO,IAAIrB,UAAU,CAAC,IAAI,CAACyC,OAAO,EAAE,IAAI,CAACtB,UAAU,CAAC,CAACuD,SAAS,EAAE;EACjE;EACA,IAAIrD,SAASA,CAACA,SAAS;IACtB,IAAI,CAACF,UAAU,GAAG,IAAI,CAACC,OAAO,CAACC,SAAS,CAAC;IACzC,IAAI,IAAI,CAACN,KAAK,EAAE;MACf,IAAI,CAACiB,iBAAiB,EAAE;IACzB;EACD;EAEA;;;;;EAKA,IAAI4C,QAAQA,CAAA;IACX,IAAI,IAAI,CAAC7D,KAAK,EAAE;MACf,MAAM6C,KAAK,GAAG,IAAI,CAACnB,OAAO,CAACC,SAAS,CAACkB,KAAK;MAC1C,MAAMiB,SAAS,GAAG,IAAI,CAAChE,MAAM,CAACiE,GAAG,CAAClB,KAAK,CAAC;MACxC,IAAIiB,SAAS,KAAK,IAAI,IAAIA,SAAS,CAACtC,KAAK,KAAK,SAAS,EAAE;QACxD,MAAMwC,YAAY,GAAG,IAAI,CAAC7B,gBAAgB,EAAE;QAC5C,MAAM0B,QAAQ,GAAG,CAAChB,KAAK,GAAGiB,SAAS,CAAChC,IAAI,IAAIkC,YAAY;QACxD,OAAOH,QAAQ,GAAGG,YAAY;MAC/B,CAAC,MAAM;QACN,OAAO,CAAC;MACT;IACD,CAAC,MAAM;MACN,OAAO,CAAC;IACT;EACD;EAEAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACb,MAAM,EAAE;IACb,IAAI,CAACtD,MAAM,CAACmE,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}