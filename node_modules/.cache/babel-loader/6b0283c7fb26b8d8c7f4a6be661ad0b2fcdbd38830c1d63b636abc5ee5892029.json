{"ast":null,"code":"import { getContext } from \"../Global.js\";\nimport { ftom } from \"./Conversions.js\";\nimport { TimeBaseClass } from \"./TimeBase.js\";\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass extends TimeBaseClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"TimeClass\";\n  }\n  _getExpressions() {\n    return Object.assign(super._getExpressions(), {\n      now: {\n        method: capture => {\n          return this._now() + new this.constructor(this.context, capture).valueOf();\n        },\n        regexp: /^\\+(.+)/\n      },\n      quantize: {\n        method: capture => {\n          const quantTo = new TimeClass(this.context, capture).valueOf();\n          return this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n        },\n        regexp: /^@(.+)/\n      }\n    });\n  }\n  /**\n   * Quantize the time by the given subdivision. Optionally add a\n   * percentage which will move the time value towards the ideal\n   * quantized value by that percentage.\n   * @param  subdiv    The subdivision to quantize to\n   * @param  percent  Move the time value towards the quantized value by a percentage.\n   * @example\n   * Tone.Time(21).quantize(2); // returns 22\n   * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n   */\n  quantize(subdiv, percent = 1) {\n    const subdivision = new this.constructor(this.context, subdiv).valueOf();\n    const value = this.valueOf();\n    const multiple = Math.round(value / subdivision);\n    const ideal = multiple * subdivision;\n    const diff = ideal - value;\n    return value + diff * percent;\n  }\n  //-------------------------------------\n  // CONVERSIONS\n  //-------------------------------------\n  /**\n   * Convert a Time to Notation. The notation values are will be the\n   * closest representation between 1m to 128th note.\n   * @return {Notation}\n   * @example\n   * // if the Transport is at 120bpm:\n   * Tone.Time(2).toNotation(); // returns \"1m\"\n   */\n  toNotation() {\n    const time = this.toSeconds();\n    const testNotations = [\"1m\"];\n    for (let power = 1; power < 9; power++) {\n      const subdiv = Math.pow(2, power);\n      testNotations.push(subdiv + \"n.\");\n      testNotations.push(subdiv + \"n\");\n      testNotations.push(subdiv + \"t\");\n    }\n    testNotations.push(\"0\");\n    // find the closets notation representation\n    let closest = testNotations[0];\n    let closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n    testNotations.forEach(notation => {\n      const notationSeconds = new TimeClass(this.context, notation).toSeconds();\n      if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n        closest = notation;\n        closestSeconds = notationSeconds;\n      }\n    });\n    return closest;\n  }\n  /**\n   * Return the time encoded as Bars:Beats:Sixteenths.\n   */\n  toBarsBeatsSixteenths() {\n    const quarterTime = this._beatsToUnits(1);\n    let quarters = this.valueOf() / quarterTime;\n    quarters = parseFloat(quarters.toFixed(4));\n    const measures = Math.floor(quarters / this._getTimeSignature());\n    let sixteenths = quarters % 1 * 4;\n    quarters = Math.floor(quarters) % this._getTimeSignature();\n    const sixteenthString = sixteenths.toString();\n    if (sixteenthString.length > 3) {\n      // the additional parseFloat removes insignificant trailing zeroes\n      sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n    }\n    const progress = [measures, quarters, sixteenths];\n    return progress.join(\":\");\n  }\n  /**\n   * Return the time in ticks.\n   */\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n    const quarters = this.valueOf() / quarterTime;\n    return quarters * this._getPPQ();\n  }\n  /**\n   * Return the time in seconds.\n   */\n  toSeconds() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value as a midi note.\n   */\n  toMidi() {\n    return ftom(this.toFrequency());\n  }\n  _now() {\n    return this.context.now();\n  }\n}\n/**\n * Create a TimeClass from a time string or number. The time is computed against the\n * global Tone.Context. To use a specific context, use {@link TimeClass}\n * @param value A value which represents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n * @example\n * const time = Tone.Time(\"4n\").toSeconds();\n * console.log(time);\n * @example\n * const note = Tone.Time(1).toNotation();\n * console.log(note);\n * @example\n * const freq = Tone.Time(0.5).toFrequency();\n * console.log(freq);\n */\nexport function Time(value, units) {\n  return new TimeClass(getContext(), value, units);\n}","map":{"version":3,"names":["getContext","ftom","TimeBaseClass","TimeClass","constructor","name","_getExpressions","Object","assign","now","method","capture","_now","context","valueOf","regexp","quantize","quantTo","_secondsToUnits","transport","nextSubdivision","subdiv","percent","subdivision","value","multiple","Math","round","ideal","diff","toNotation","time","toSeconds","testNotations","power","pow","push","closest","closestSeconds","forEach","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","_beatsToUnits","quarters","parseFloat","toFixed","measures","floor","_getTimeSignature","sixteenths","sixteenthString","toString","length","progress","join","toTicks","_getPPQ","toMidi","toFrequency","Time","units"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/type/Time.ts"],"sourcesContent":["import { getContext } from \"../Global.js\";\nimport { ftom } from \"./Conversions.js\";\nimport {\n\tTimeBaseClass,\n\tTimeBaseUnit,\n\tTimeExpression,\n\tTimeValue,\n} from \"./TimeBase.js\";\nimport {\n\tBarsBeatsSixteenths,\n\tMidiNote,\n\tSeconds,\n\tSubdivision,\n\tTicks,\n\tTime,\n} from \"./Units.js\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass<\n\tType extends Seconds | Ticks = Seconds,\n\tUnit extends string = TimeBaseUnit,\n> extends TimeBaseClass<Type, Unit> {\n\treadonly name: string = \"TimeClass\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn (this._now() +\n\t\t\t\t\t\tnew (this.constructor as typeof TimeClass)(\n\t\t\t\t\t\t\tthis.context,\n\t\t\t\t\t\t\tcapture\n\t\t\t\t\t\t).valueOf()) as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(\n\t\t\t\t\t\tthis.context,\n\t\t\t\t\t\tcapture\n\t\t\t\t\t).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(\n\t\t\t\t\t\tthis.context.transport.nextSubdivision(quantTo)\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  subdiv    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Tone.Time(21).quantize(2); // returns 22\n\t * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(\n\t\t\tthis.context,\n\t\t\tsubdiv\n\t\t).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn (value + diff * percent) as Type;\n\t}\n\n\t//-------------------------------------\n\t// CONVERSIONS\n\t//-------------------------------------\n\t/**\n\t * Convert a Time to Notation. The notation values are will be the\n\t * closest representation between 1m to 128th note.\n\t * @return {Notation}\n\t * @example\n\t * // if the Transport is at 120bpm:\n\t * Tone.Time(2).toNotation(); // returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push((subdiv + \"n.\") as Subdivision);\n\t\t\ttestNotations.push((subdiv + \"n\") as Subdivision);\n\t\t\ttestNotations.push((subdiv + \"t\") as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(\n\t\t\tthis.context,\n\t\t\ttestNotations[0]\n\t\t).toSeconds();\n\t\ttestNotations.forEach((notation) => {\n\t\t\tconst notationSeconds = new TimeClass(\n\t\t\t\tthis.context,\n\t\t\t\tnotation\n\t\t\t).toSeconds();\n\t\t\tif (\n\t\t\t\tMath.abs(notationSeconds - time) <\n\t\t\t\tMath.abs(closestSeconds - time)\n\t\t\t) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t * Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\") as BarsBeatsSixteenths;\n\t}\n\n\t/**\n\t * Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn quarters * this._getPPQ();\n\t}\n\n\t/**\n\t * Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number. The time is computed against the\n * global Tone.Context. To use a specific context, use {@link TimeClass}\n * @param value A value which represents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n * @example\n * const time = Tone.Time(\"4n\").toSeconds();\n * console.log(time);\n * @example\n * const note = Tone.Time(1).toNotation();\n * console.log(note);\n * @example\n * const freq = Tone.Time(0.5).toFrequency();\n * console.log(freq);\n */\nexport function Time(\n\tvalue?: TimeValue,\n\tunits?: TimeBaseUnit\n): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}