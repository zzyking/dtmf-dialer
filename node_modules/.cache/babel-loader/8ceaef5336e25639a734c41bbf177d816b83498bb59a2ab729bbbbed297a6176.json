{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n    super(options);\n    this.name = \"Merge\";\n    this._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._merger.disconnect();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","Merge","constructor","options","getDefaults","arguments","name","_merger","output","input","context","createChannelMerger","channels","Object","assign","dispose","disconnect"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/channel/Merge.ts"],"sourcesContent":["import {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { Positive } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\treadonly name: string = \"Merge\";\n\n\t/**\n\t * The merger node for the channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a single (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: Positive);\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\n\t\t\t\"channels\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis._merger =\n\t\t\tthis.output =\n\t\t\tthis.input =\n\t\t\t\tthis.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SACCA,aAAa,QAEP,qCAAqC;AAE5C,SAASC,oBAAoB,QAAQ,6BAA6B;AAMlE;;;;;;;;;;;AAWA,OAAM,MAAOC,KAAM,SAAQF,aAA2B;EAuBrDG,YAAA;IACC,MAAMC,OAAO,GAAGH,oBAAoB,CAACC,KAAK,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CACpE,UAAU,CACV,CAAC;IACF,KAAK,CAACF,OAAO,CAAC;IA1BN,KAAAG,IAAI,GAAW,OAAO;IA4B9B,IAAI,CAACC,OAAO,GACX,IAAI,CAACC,MAAM,GACX,IAAI,CAACC,KAAK,GACT,IAAI,CAACC,OAAO,CAACC,mBAAmB,CAACR,OAAO,CAACS,QAAQ,CAAC;EACrD;EAEA,OAAOR,WAAWA,CAAA;IACjB,OAAOS,MAAM,CAACC,MAAM,CAACf,aAAa,CAACK,WAAW,EAAE,EAAE;MACjDQ,QAAQ,EAAE;KACV,CAAC;EACH;EAEAG,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACR,OAAO,CAACS,UAAU,EAAE;IACzB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}