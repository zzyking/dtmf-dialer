{"ast":null,"code":"export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = convertNumberToUnsignedLong => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (copyFromChannel => {\n      return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n        if (bufferOffset < audioBuffer.length) {\n          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyFromChannel);\n    audioBuffer.copyToChannel = (copyToChannel => {\n      return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n        if (bufferOffset < audioBuffer.length) {\n          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyToChannel);\n  };\n};","map":{"version":3,"names":["createWrapAudioBufferCopyChannelMethodsOutOfBounds","convertNumberToUnsignedLong","audioBuffer","copyFromChannel","destination","channelNumberAsNumber","bufferOffsetAsNumber","bufferOffset","channelNumber","length","call","copyToChannel","source"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.ts"],"sourcesContent":["import { TNativeAudioBuffer, TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory } from '../types';\n\nexport const createWrapAudioBufferCopyChannelMethodsOutOfBounds: TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory = (\n    convertNumberToUnsignedLong\n) => {\n    return (audioBuffer: TNativeAudioBuffer): void => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,kDAAkD,GAC3DC,2BAA2B,IAC3B;EACA,OAAQC,WAA+B,IAAU;IAC7CA,WAAW,CAACC,eAAe,GAAG,CAAEA,eAAe,IAAI;MAC/C,OAAO,CAACC,WAAyB,EAAEC,qBAA6B,EAAEC,oBAAoB,GAAG,CAAC,KAAI;QAC1F,MAAMC,YAAY,GAAGN,2BAA2B,CAACK,oBAAoB,CAAC;QACtE,MAAME,aAAa,GAAGP,2BAA2B,CAACI,qBAAqB,CAAC;QAExE,IAAIE,YAAY,GAAGL,WAAW,CAACO,MAAM,EAAE;UACnC,OAAON,eAAe,CAACO,IAAI,CAACR,WAAW,EAAEE,WAAW,EAAEI,aAAa,EAAED,YAAY,CAAC;QACtF;MACJ,CAAC;IACL,CAAC,EAAEL,WAAW,CAACC,eAAe,CAAC;IAE/BD,WAAW,CAACS,aAAa,GAAG,CAAEA,aAAa,IAAI;MAC3C,OAAO,CAACC,MAAoB,EAAEP,qBAA6B,EAAEC,oBAAoB,GAAG,CAAC,KAAI;QACrF,MAAMC,YAAY,GAAGN,2BAA2B,CAACK,oBAAoB,CAAC;QACtE,MAAME,aAAa,GAAGP,2BAA2B,CAACI,qBAAqB,CAAC;QAExE,IAAIE,YAAY,GAAGL,WAAW,CAACO,MAAM,EAAE;UACnC,OAAOE,aAAa,CAACD,IAAI,CAACR,WAAW,EAAEU,MAAM,EAAEJ,aAAa,EAAED,YAAY,CAAC;QAC/E;MACJ,CAAC;IACL,CAAC,EAAEL,WAAW,CAACS,aAAa,CAAC;EACjC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}