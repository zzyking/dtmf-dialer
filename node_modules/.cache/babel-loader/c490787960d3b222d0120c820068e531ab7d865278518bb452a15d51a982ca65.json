{"ast":null,"code":"import { Delay } from \"../core/context/Delay.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { FeedbackEffect } from \"./FeedbackEffect.js\";\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new Tone.MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\nexport class FeedbackDelay extends FeedbackEffect {\n  constructor() {\n    const options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    super(options);\n    this.name = \"FeedbackDelay\";\n    this._delayNode = new Delay({\n      context: this.context,\n      delayTime: options.delayTime,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = this._delayNode.delayTime;\n    // connect it up\n    this.connectEffect(this._delayNode);\n    readOnly(this, \"delayTime\");\n  }\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._delayNode.dispose();\n    this.delayTime.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Delay","optionsFromArguments","readOnly","FeedbackEffect","FeedbackDelay","constructor","options","getDefaults","arguments","name","_delayNode","context","delayTime","maxDelay","connectEffect","Object","assign","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/effect/FeedbackDelay.ts"],"sourcesContent":["import { Delay } from \"../core/context/Delay.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { NormalRange, Time } from \"../core/type/Units.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect.js\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new Tone.MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\treadonly name: string = \"FeedbackDelay\";\n\n\t/**\n\t * the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t * The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tFeedbackDelay.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"delayTime\", \"feedback\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,0BAA0B;AAGhD,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,cAAc,QAA+B,qBAAqB;AAO3E;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,aAAc,SAAQD,cAAoC;EAetEE,YAAA;IACC,MAAMC,OAAO,GAAGL,oBAAoB,CACnCG,aAAa,CAACG,WAAW,EAAE,EAC3BC,SAAS,EACT,CAAC,WAAW,EAAE,UAAU,CAAC,CACzB;IACD,KAAK,CAACF,OAAO,CAAC;IApBN,KAAAG,IAAI,GAAW,eAAe;IAsBtC,IAAI,CAACC,UAAU,GAAG,IAAIV,KAAK,CAAC;MAC3BW,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,SAAS,EAAEN,OAAO,CAACM,SAAS;MAC5BC,QAAQ,EAAEP,OAAO,CAACO;KAClB,CAAC;IACF,IAAI,CAACD,SAAS,GAAG,IAAI,CAACF,UAAU,CAACE,SAAS;IAE1C;IACA,IAAI,CAACE,aAAa,CAAC,IAAI,CAACJ,UAAU,CAAC;IACnCR,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC;EAC5B;EAEA,OAAOK,WAAWA,CAAA;IACjB,OAAOQ,MAAM,CAACC,MAAM,CAACb,cAAc,CAACI,WAAW,EAAE,EAAE;MAClDK,SAAS,EAAE,IAAI;MACfC,QAAQ,EAAE;KACV,CAAC;EACH;EAEAI,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACP,UAAU,CAACO,OAAO,EAAE;IACzB,IAAI,CAACL,SAAS,CAACK,OAAO,EAAE;IACxB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}