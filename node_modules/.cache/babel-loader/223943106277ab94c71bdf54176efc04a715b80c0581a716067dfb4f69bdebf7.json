{"ast":null,"code":"import { AutomationEventList } from 'automation-events';\nexport const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible) => {\n  return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n    // Bug #196 Only Safari sets the defaultValue to the initial value.\n    const defaultValue = nativeAudioParam.value;\n    const automationEventList = new AutomationEventList(defaultValue);\n    const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n    const audioParam = {\n      get defaultValue() {\n        return defaultValue;\n      },\n      get maxValue() {\n        return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n      },\n      get minValue() {\n        return minValue === null ? nativeAudioParam.minValue : minValue;\n      },\n      get value() {\n        return nativeAudioParam.value;\n      },\n      set value(value) {\n        nativeAudioParam.value = value;\n        // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n        audioParam.setValueAtTime(value, audioNode.context.currentTime);\n      },\n      cancelAndHoldAtTime(cancelTime) {\n        // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n        if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n        } else {\n          const previousLastEvent = Array.from(automationEventList).pop();\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          const currentLastEvent = Array.from(automationEventList).pop();\n          nativeAudioParam.cancelScheduledValues(cancelTime);\n          if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n            if (currentLastEvent.type === 'exponentialRampToValue') {\n              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'linearRampToValue') {\n              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'setValue') {\n              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n            } else if (currentLastEvent.type === 'setValueCurve') {\n              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n            }\n          }\n        }\n        return audioParam;\n      },\n      cancelScheduledValues(cancelTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n        automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n        nativeAudioParam.cancelScheduledValues(cancelTime);\n        return audioParam;\n      },\n      exponentialRampToValueAtTime(value, endTime) {\n        // Bug #45: Safari does not throw an error yet.\n        if (value === 0) {\n          throw new RangeError();\n        }\n        // Bug #187: Safari does not throw an error yet.\n        if (!Number.isFinite(endTime) || endTime < 0) {\n          throw new RangeError();\n        }\n        const currentTime = audioNode.context.currentTime;\n        if (audioParamRenderer === null) {\n          automationEventList.flush(currentTime);\n        }\n        // Bug #194: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n        if (Array.from(automationEventList).length === 0) {\n          automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n          nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n        }\n        automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n      linearRampToValueAtTime(value, endTime) {\n        const currentTime = audioNode.context.currentTime;\n        if (audioParamRenderer === null) {\n          automationEventList.flush(currentTime);\n        }\n        // Bug #195: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n        if (Array.from(automationEventList).length === 0) {\n          automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n          nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n        }\n        automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.linearRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n      setTargetAtTime(target, startTime, timeConstant) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n        automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n        return audioParam;\n      },\n      setValueAtTime(value, startTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n        automationEventList.add(createSetValueAutomationEvent(value, startTime));\n        nativeAudioParam.setValueAtTime(value, startTime);\n        return audioParam;\n      },\n      setValueCurveAtTime(values, startTime, duration) {\n        // Bug 183: Safari only accepts a Float32Array.\n        const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n        /*\n         * Bug #152: Safari does not correctly interpolate the values of the curve.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n         * existence of the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n          const endTime = startTime + duration;\n          const sampleRate = audioNode.context.sampleRate;\n          const firstSample = Math.ceil(startTime * sampleRate);\n          const lastSample = Math.floor(endTime * sampleRate);\n          const numberOfInterpolatedValues = lastSample - firstSample;\n          const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n          for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n            const theoreticIndex = (convertedValues.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            interpolatedValues[i] = lowerIndex === upperIndex ? convertedValues[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n          }\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n          automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n          const timeOfLastSample = lastSample / sampleRate;\n          if (timeOfLastSample < endTime) {\n            setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n          }\n          setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n        } else {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n          automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n        }\n        return audioParam;\n      }\n    };\n    audioParamStore.set(audioParam, nativeAudioParam);\n    audioParamAudioNodeStore.set(audioParam, audioNode);\n    addAudioParamConnections(audioParam, audioParamRenderer);\n    return audioParam;\n  };\n};","map":{"version":3,"names":["AutomationEventList","createAudioParamFactory","addAudioParamConnections","audioParamAudioNodeStore","audioParamStore","createAudioParamRenderer","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","nativeAudioContextConstructor","setValueAtTimeUntilPossible","audioNode","isAudioParamOfOfflineAudioContext","nativeAudioParam","maxValue","minValue","defaultValue","value","automationEventList","audioParamRenderer","audioParam","setValueAtTime","context","currentTime","cancelAndHoldAtTime","cancelTime","flush","add","previousLastEvent","Array","from","pop","currentLastEvent","cancelScheduledValues","undefined","type","exponentialRampToValueAtTime","endTime","linearRampToValueAtTime","startTime","setValueCurveAtTime","values","duration","RangeError","Number","isFinite","length","setTargetAtTime","target","timeConstant","convertedValues","Float32Array","name","sampleRate","firstSample","Math","ceil","lastSample","floor","numberOfInterpolatedValues","interpolatedValues","i","theoreticIndex","lowerIndex","upperIndex","timeOfLastSample","set"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/factories/audio-param-factory.ts"],"sourcesContent":["import { AutomationEventList } from 'automation-events';\nimport { IAudioNode, IAudioParam, IAudioParamRenderer, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAudioParamFactoryFactory, TContext, TNativeAudioParam } from '../types';\n\nexport const createAudioParamFactory: TAudioParamFactoryFactory = (\n    addAudioParamConnections,\n    audioParamAudioNodeStore,\n    audioParamStore,\n    createAudioParamRenderer,\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent,\n    nativeAudioContextConstructor,\n    setValueAtTimeUntilPossible\n) => {\n    return <T extends TContext>(\n        audioNode: IAudioNode<T>,\n        isAudioParamOfOfflineAudioContext: boolean,\n        nativeAudioParam: TNativeAudioParam,\n        maxValue: null | number = null,\n        minValue: null | number = null\n    ): IAudioParam => {\n        // Bug #196 Only Safari sets the defaultValue to the initial value.\n        const defaultValue = nativeAudioParam.value;\n        const automationEventList = new AutomationEventList(defaultValue);\n        const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue(): number {\n                return defaultValue;\n            },\n            get maxValue(): number {\n                return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue(): number {\n                return minValue === null ? nativeAudioParam.minValue : minValue;\n            },\n            get value(): number {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n\n                // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime: number): IAudioParam {\n                // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                } else {\n                    const previousLastEvent = Array.from(automationEventList).pop();\n\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n\n                    const currentLastEvent = Array.from(automationEventList).pop();\n\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        } else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        } else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        } else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(\n                                currentLastEvent.values,\n                                currentLastEvent.startTime,\n                                currentLastEvent.duration\n                            );\n                        }\n                    }\n                }\n\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value: number, endTime: number): IAudioParam {\n                // Bug #45: Safari does not throw an error yet.\n                if (value === 0) {\n                    throw new RangeError();\n                }\n\n                // Bug #187: Safari does not throw an error yet.\n                if (!Number.isFinite(endTime) || endTime < 0) {\n                    throw new RangeError();\n                }\n\n                const currentTime = audioNode.context.currentTime;\n\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(currentTime);\n                }\n\n                // Bug #194: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n                if (Array.from(automationEventList).length === 0) {\n                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n                }\n\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n\n                return audioParam;\n            },\n            linearRampToValueAtTime(value: number, endTime: number): IAudioParam {\n                const currentTime = audioNode.context.currentTime;\n\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(currentTime);\n                }\n\n                // Bug #195: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n                if (Array.from(automationEventList).length === 0) {\n                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n                }\n\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n\n                return audioParam;\n            },\n            setTargetAtTime(target: number, startTime: number, timeConstant: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n\n                return audioParam;\n            },\n            setValueAtTime(value: number, startTime: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n\n                return audioParam;\n            },\n            setValueCurveAtTime(values: Iterable<number>, startTime: number, duration: number): IAudioParam {\n                // Bug 183: Safari only accepts a Float32Array.\n                const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor(endTime * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((convertedValues.length - 1) / duration) * ((firstSample + i) / sampleRate - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n\n                        interpolatedValues[i] =\n                            lowerIndex === upperIndex\n                                ? convertedValues[lowerIndex]\n                                : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] +\n                                  (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n                    }\n\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n\n                    const timeOfLastSample = lastSample / sampleRate;\n\n                    if (timeOfLastSample < endTime) {\n                        setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n\n                    setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n                } else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n                }\n\n                return audioParam;\n            }\n        };\n\n        audioParamStore.set(audioParam, nativeAudioParam);\n        audioParamAudioNodeStore.set(audioParam, audioNode);\n\n        addAudioParamConnections(\n            audioParam,\n            <T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? IAudioParamRenderer : null>audioParamRenderer\n        );\n\n        return audioParam;\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}