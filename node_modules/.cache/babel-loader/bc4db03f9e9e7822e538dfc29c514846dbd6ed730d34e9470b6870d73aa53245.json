{"ast":null,"code":"import { Param } from \"../context/Param.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { readOnly } from \"../util/Interface.js\";\nimport { ToneAudioNode } from \"./ToneAudioNode.js\";\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst delay = new Tone.Delay(0.1).toDestination();\n * \t// connect the signal to both the delay and the destination\n * \tconst pulse = new Tone.PulseOscillator().connect(delay).toDestination();\n * \t// start and stop the pulse\n * \tpulse.start(0).stop(0.01);\n * }, 0.5, 1);\n */\nexport class Delay extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n    super(options);\n    this.name = \"Delay\";\n    const maxDelayInSeconds = this.toSeconds(options.maxDelay);\n    this._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n    this._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n    this.delayTime = new Param({\n      context: this.context,\n      param: this._delayNode.delayTime,\n      units: \"time\",\n      value: options.delayTime,\n      minValue: 0,\n      maxValue: this.maxDelay\n    });\n    readOnly(this, \"delayTime\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0,\n      maxDelay: 1\n    });\n  }\n  /**\n   * The maximum delay time. This cannot be changed after\n   * the value is passed into the constructor.\n   */\n  get maxDelay() {\n    return this._maxDelay;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._delayNode.disconnect();\n    this.delayTime.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Param","optionsFromArguments","readOnly","ToneAudioNode","Delay","constructor","options","getDefaults","arguments","name","maxDelayInSeconds","toSeconds","maxDelay","_maxDelay","Math","max","delayTime","_delayNode","input","output","context","createDelay","param","units","value","minValue","maxValue","Object","assign","dispose","disconnect"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/context/Delay.ts"],"sourcesContent":["import { Param } from \"../context/Param.js\";\nimport { Seconds, Time } from \"../type/Units.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { readOnly } from \"../util/Interface.js\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode.js\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst delay = new Tone.Delay(0.1).toDestination();\n * \t// connect the signal to both the delay and the destination\n * \tconst pulse = new Tone.PulseOscillator().connect(delay).toDestination();\n * \t// start and stop the pulse\n * \tpulse.start(0).stop(0.01);\n * }, 0.5, 1);\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\treadonly name: string = \"Delay\";\n\n\t/**\n\t * Private holder of the max delay time\n\t */\n\tprivate _maxDelay: Seconds;\n\n\t/**\n\t * The amount of time the incoming signal is delayed.\n\t * @example\n\t * const delay = new Tone.Delay().toDestination();\n\t * // modulate the delayTime between 0.1 and 1 seconds\n\t * const delayLFO = new Tone.LFO(0.5, 0.1, 1).start().connect(delay.delayTime);\n\t * const pulse = new Tone.PulseOscillator().connect(delay).start();\n\t * // the change in delayTime causes the pitch to go up and down\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * @param delayTime The delay applied to the incoming signal.\n\t * @param maxDelay The maximum delay time.\n\t */\n\tconstructor(delayTime?: Time, maxDelay?: Time);\n\tconstructor(options?: Partial<DelayOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\n\t\t\t\"delayTime\",\n\t\t\t\"maxDelay\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis._maxDelay = Math.max(\n\t\t\tmaxDelayInSeconds,\n\t\t\tthis.toSeconds(options.delayTime)\n\t\t);\n\n\t\tthis._delayNode =\n\t\t\tthis.input =\n\t\t\tthis.output =\n\t\t\t\tthis.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._delayNode.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t\tminValue: 0,\n\t\t\tmaxValue: this.maxDelay,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\tget maxDelay(): Seconds {\n\t\treturn this._maxDelay;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAqB;AAE3C,SAASC,oBAAoB,QAAQ,qBAAqB;AAC1D,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,aAAa,QAA8B,oBAAoB;AAOxE;;;;;;;;;;;;AAYA,OAAM,MAAOC,KAAM,SAAQD,aAA2B;EAgCrDE,YAAA;IACC,MAAMC,OAAO,GAAGL,oBAAoB,CAACG,KAAK,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CACpE,WAAW,EACX,UAAU,CACV,CAAC;IACF,KAAK,CAACF,OAAO,CAAC;IApCN,KAAAG,IAAI,GAAW,OAAO;IAsC9B,MAAMC,iBAAiB,GAAG,IAAI,CAACC,SAAS,CAACL,OAAO,CAACM,QAAQ,CAAC;IAC1D,IAAI,CAACC,SAAS,GAAGC,IAAI,CAACC,GAAG,CACxBL,iBAAiB,EACjB,IAAI,CAACC,SAAS,CAACL,OAAO,CAACU,SAAS,CAAC,CACjC;IAED,IAAI,CAACC,UAAU,GACd,IAAI,CAACC,KAAK,GACV,IAAI,CAACC,MAAM,GACV,IAAI,CAACC,OAAO,CAACC,WAAW,CAACX,iBAAiB,CAAC;IAE7C,IAAI,CAACM,SAAS,GAAG,IAAIhB,KAAK,CAAC;MAC1BoB,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBE,KAAK,EAAE,IAAI,CAACL,UAAU,CAACD,SAAS;MAChCO,KAAK,EAAE,MAAM;MACbC,KAAK,EAAElB,OAAO,CAACU,SAAS;MACxBS,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE,IAAI,CAACd;KACf,CAAC;IAEFV,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC;EAC5B;EAEA,OAAOK,WAAWA,CAAA;IACjB,OAAOoB,MAAM,CAACC,MAAM,CAACzB,aAAa,CAACI,WAAW,EAAE,EAAE;MACjDS,SAAS,EAAE,CAAC;MACZJ,QAAQ,EAAE;KACV,CAAC;EACH;EAEA;;;;EAIA,IAAIA,QAAQA,CAAA;IACX,OAAO,IAAI,CAACC,SAAS;EACtB;EAEA;;;EAGAgB,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACZ,UAAU,CAACa,UAAU,EAAE;IAC5B,IAAI,CAACd,SAAS,CAACa,OAAO,EAAE;IACxB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}