{"ast":null,"code":"import { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Signal } from \"./Signal.js\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Add extends Signal {\n  constructor() {\n    super(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"]));\n    this.override = false;\n    this.name = \"Add\";\n    /**\n     * the summing node\n     */\n    this._sum = new Gain({\n      context: this.context\n    });\n    this.input = this._sum;\n    this.output = this._sum;\n    /**\n     * The value which is added to the input signal\n     */\n    this.addend = this._param;\n    connectSeries(this._constantSource, this._sum);\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._sum.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["connectSeries","Gain","optionsFromArguments","Signal","Add","constructor","getDefaults","arguments","override","name","_sum","context","input","output","addend","_param","_constantSource","Object","assign","value","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/signal/Add.ts"],"sourcesContent":["import { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Signal, SignalOptions } from \"./Signal.js\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Add extends Signal {\n\toverride = false;\n\n\treadonly name: string = \"Add\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value If no value is provided, will sum the input and {@link addend}.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"]));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kCAAkC;AAChE,SAASC,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,MAAM,QAAuB,aAAa;AAEnD;;;;;;;;;;;;;;;;AAgBA,OAAM,MAAOC,GAAI,SAAQD,MAAM;EAsB9BE,YAAA;IACC,KAAK,CAACH,oBAAoB,CAACE,GAAG,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAtBrE,KAAAC,QAAQ,GAAG,KAAK;IAEP,KAAAC,IAAI,GAAW,KAAK;IAE7B;;;IAGQ,KAAAC,IAAI,GAAS,IAAIT,IAAI,CAAC;MAAEU,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAC/C,KAAAC,KAAK,GAAG,IAAI,CAACF,IAAI;IACjB,KAAAG,MAAM,GAAG,IAAI,CAACH,IAAI;IAE3B;;;IAGS,KAAAI,MAAM,GAAoB,IAAI,CAACC,MAAM;IAU7Cf,aAAa,CAAC,IAAI,CAACgB,eAAe,EAAE,IAAI,CAACN,IAAI,CAAC;EAC/C;EAEA,OAAOJ,WAAWA,CAAA;IACjB,OAAOW,MAAM,CAACC,MAAM,CAACf,MAAM,CAACG,WAAW,EAAE,EAAE;MAC1Ca,KAAK,EAAE;KACP,CAAC;EACH;EAEAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACV,IAAI,CAACU,OAAO,EAAE;IACnB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}