{"ast":null,"code":"import { AudioContext as stdAudioContext, AudioWorkletNode as stdAudioWorkletNode, OfflineAudioContext as stdOfflineAudioContext } from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(options) {\n  return new stdAudioContext(options);\n}\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels, length, sampleRate) {\n  return new stdOfflineAudioContext(channels, length, sampleRate);\n}\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow = typeof self === \"object\" ? self : null;\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow && (theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\nexport function createAudioWorkletNode(context, name, options) {\n  assert(isDefined(stdAudioWorkletNode), \"AudioWorkletNode only works in a secure context (https or localhost)\");\n  return new (context instanceof (theWindow === null || theWindow === void 0 ? void 0 : theWindow.BaseAudioContext) ? theWindow === null || theWindow === void 0 ? void 0 : theWindow.AudioWorkletNode : stdAudioWorkletNode)(context, name, options);\n}\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";","map":{"version":3,"names":["AudioContext","stdAudioContext","AudioWorkletNode","stdAudioWorkletNode","OfflineAudioContext","stdOfflineAudioContext","assert","isDefined","createAudioContext","options","createOfflineAudioContext","channels","length","sampleRate","theWindow","self","hasAudioContext","hasOwnProperty","createAudioWorkletNode","context","name","BaseAudioContext","isSupported","supported"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/context/AudioContext.ts"],"sourcesContent":["import {\n\tAudioContext as stdAudioContext,\n\tAudioWorkletNode as stdAudioWorkletNode,\n\tOfflineAudioContext as stdOfflineAudioContext,\n} from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\n\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(\n\toptions?: AudioContextOptions\n): AudioContext {\n\treturn new stdAudioContext(options) as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(\n\tchannels: number,\n\tlength: number,\n\tsampleRate: number\n): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(\n\t\tchannels,\n\t\tlength,\n\t\tsampleRate\n\t) as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n\tBaseAudioContext: any;\n\tAudioWorkletNode: any;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null =\n\ttypeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext =\n\ttheWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") ||\n\t\ttheWindow.hasOwnProperty(\"webkitAudioContext\"));\n\nexport function createAudioWorkletNode(\n\tcontext: AnyAudioContext,\n\tname: string,\n\toptions?: Partial<AudioWorkletNodeOptions>\n): AudioWorkletNode {\n\tassert(\n\t\tisDefined(stdAudioWorkletNode),\n\t\t\"AudioWorkletNode only works in a secure context (https or localhost)\"\n\t);\n\treturn new (\n\t\tcontext instanceof theWindow?.BaseAudioContext\n\t\t\t? theWindow?.AudioWorkletNode\n\t\t\t: stdAudioWorkletNode\n\t)(context, name, options);\n}\n\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";\n"],"mappings":"AAAA,SACCA,YAAY,IAAIC,eAAe,EAC/BC,gBAAgB,IAAIC,mBAAmB,EACvCC,mBAAmB,IAAIC,sBAAsB,QACvC,4BAA4B;AACnC,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,SAAS,QAAQ,sBAAsB;AAEhD;;;AAGA,OAAM,SAAUC,kBAAkBA,CACjCC,OAA6B;EAE7B,OAAO,IAAIR,eAAe,CAACQ,OAAO,CAA4B;AAC/D;AAEA;;;AAGA,OAAM,SAAUC,yBAAyBA,CACxCC,QAAgB,EAChBC,MAAc,EACdC,UAAkB;EAElB,OAAO,IAAIR,sBAAsB,CAChCM,QAAQ,EACRC,MAAM,EACNC,UAAU,CACwB;AACpC;AAiBA;;;;AAIA,OAAO,MAAMC,SAAS,GACrB,OAAOC,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAG,IAAI;AAEvC;;;;AAIA,OAAO,MAAMC,eAAe,GAC3BF,SAAS,KACRA,SAAS,CAACG,cAAc,CAAC,cAAc,CAAC,IACxCH,SAAS,CAACG,cAAc,CAAC,oBAAoB,CAAC,CAAC;AAEjD,OAAM,SAAUC,sBAAsBA,CACrCC,OAAwB,EACxBC,IAAY,EACZX,OAA0C;EAE1CH,MAAM,CACLC,SAAS,CAACJ,mBAAmB,CAAC,EAC9B,sEAAsE,CACtE;EACD,OAAO,KACNgB,OAAO,aAAYL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEO,gBAAgB,IAC3CP,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEZ,gBAAgB,GAC3BC,mBAAmB,EACrBgB,OAAO,EAAEC,IAAI,EAAEX,OAAO,CAAC;AAC1B;AAEA;;;;;AAKA,SAASa,WAAW,IAAIC,SAAS,QAAQ,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}