{"ast":null,"code":"export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    return (when = 0) => {\n      if (when < 0) {\n        throw new RangeError(\"The parameter can't be negative.\");\n      }\n      stop.call(nativeAudioScheduledSourceNode, when);\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};","map":{"version":3,"names":["wrapAudioScheduledSourceNodeStopMethodNegativeParameters","nativeAudioScheduledSourceNode","stop","when","RangeError","call"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.ts"],"sourcesContent":["import { TNativeAudioBufferSourceNode, TNativeConstantSourceNode, TNativeOscillatorNode } from '../types';\n\nexport const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (\n    nativeAudioScheduledSourceNode: TNativeAudioBufferSourceNode | TNativeConstantSourceNode | TNativeOscillatorNode\n): void => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n"],"mappings":"AAEA,OAAO,MAAMA,wDAAwD,GACjEC,8BAAgH,IAC1G;EACNA,8BAA8B,CAACC,IAAI,GAAG,CAAEA,IAAI,IAAI;IAC5C,OAAO,CAACC,IAAI,GAAG,CAAC,KAAI;MAChB,IAAIA,IAAI,GAAG,CAAC,EAAE;QACV,MAAM,IAAIC,UAAU,CAAC,kCAAkC,CAAC;MAC5D;MAEAF,IAAI,CAACG,IAAI,CAACJ,8BAA8B,EAAEE,IAAI,CAAC;IACnD,CAAC;EACL,CAAC,EAAEF,8BAA8B,CAACC,IAAI,CAAC;AAC3C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}