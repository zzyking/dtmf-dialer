{"ast":null,"code":"import { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase } from \"./MeterBase.js\";\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n * @see {@link Meter}.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(DCMeter.getDefaults(), arguments));\n    this.name = \"DCMeter\";\n    this._analyser.type = \"waveform\";\n    this._analyser.size = 256;\n  }\n  /**\n   * Get the signal value of the incoming signal\n   */\n  getValue() {\n    const value = this._analyser.getValue();\n    return value[0];\n  }\n}","map":{"version":3,"names":["optionsFromArguments","MeterBase","DCMeter","constructor","getDefaults","arguments","name","_analyser","type","size","getValue","value"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/analysis/DCMeter.ts"],"sourcesContent":["import { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase.js\";\n\nexport type DCMeterOptions = MeterBaseOptions;\n\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n * @see {@link Meter}.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase<DCMeterOptions> {\n\treadonly name: string = \"DCMeter\";\n\n\tconstructor(options?: Partial<DCMeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DCMeter.getDefaults(), arguments));\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis._analyser.size = 256;\n\t}\n\n\t/**\n\t * Get the signal value of the incoming signal\n\t */\n\tgetValue(): number {\n\t\tconst value = this._analyser.getValue() as Float32Array;\n\t\treturn value[0];\n\t}\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,SAAS,QAA0B,gBAAgB;AAI5D;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,OAAQ,SAAQD,SAAyB;EAIrDE,YAAA;IACC,KAAK,CAACH,oBAAoB,CAACE,OAAO,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IAJrD,KAAAC,IAAI,GAAW,SAAS;IAMhC,IAAI,CAACC,SAAS,CAACC,IAAI,GAAG,UAAU;IAChC,IAAI,CAACD,SAAS,CAACE,IAAI,GAAG,GAAG;EAC1B;EAEA;;;EAGAC,QAAQA,CAAA;IACP,MAAMC,KAAK,GAAG,IAAI,CAACJ,SAAS,CAACG,QAAQ,EAAkB;IACvD,OAAOC,KAAK,CAAC,CAAC,CAAC;EAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}