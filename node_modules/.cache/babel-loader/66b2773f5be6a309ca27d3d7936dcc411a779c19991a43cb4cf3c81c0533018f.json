{"ast":null,"code":"import { ToneAudioNode } from \"../context/ToneAudioNode.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { getWorkletGlobalScope } from \"./WorkletGlobalScope.js\";\nexport class ToneAudioWorklet extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"ToneAudioWorklet\";\n    /**\n     * The constructor options for the node\n     */\n    this.workletOptions = {};\n    /**\n     * Callback which is invoked when there is an error in the processing\n     */\n    this.onprocessorerror = noOp;\n    const blobUrl = URL.createObjectURL(new Blob([getWorkletGlobalScope()], {\n      type: \"text/javascript\"\n    }));\n    const name = this._audioWorkletName();\n    this._dummyGain = this.context.createGain();\n    this._dummyParam = this._dummyGain.gain;\n    // Register the processor\n    this.context.addAudioWorkletModule(blobUrl).then(() => {\n      // create the worklet when it's read\n      if (!this.disposed) {\n        this._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n        this._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n        this.onReady(this._worklet);\n      }\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._dummyGain.disconnect();\n    if (this._worklet) {\n      this._worklet.port.postMessage(\"dispose\");\n      this._worklet.disconnect();\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","noOp","getWorkletGlobalScope","ToneAudioWorklet","constructor","options","name","workletOptions","onprocessorerror","blobUrl","URL","createObjectURL","Blob","type","_audioWorkletName","_dummyGain","context","createGain","_dummyParam","gain","addAudioWorkletModule","then","disposed","_worklet","createAudioWorkletNode","bind","onReady","dispose","disconnect","port","postMessage"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/worklet/ToneAudioWorklet.ts"],"sourcesContent":["import {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../context/ToneAudioNode.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { getWorkletGlobalScope } from \"./WorkletGlobalScope.js\";\n\nexport type ToneAudioWorkletOptions = ToneAudioNodeOptions;\n\nexport abstract class ToneAudioWorklet<\n\tOptions extends ToneAudioWorkletOptions,\n> extends ToneAudioNode<Options> {\n\treadonly name: string = \"ToneAudioWorklet\";\n\n\t/**\n\t * The processing node\n\t */\n\tprotected _worklet!: AudioWorkletNode;\n\n\t/**\n\t * A dummy gain node to create a dummy audio param from\n\t */\n\tprivate _dummyGain: GainNode;\n\n\t/**\n\t * A dummy audio param to use when creating Params\n\t */\n\tprotected _dummyParam: AudioParam;\n\n\t/**\n\t * The constructor options for the node\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {};\n\n\t/**\n\t * Get the name of the audio worklet\n\t */\n\tprotected abstract _audioWorkletName(): string;\n\n\t/**\n\t * Invoked when the module is loaded and the node is created\n\t */\n\tprotected abstract onReady(node: AudioWorkletNode): void;\n\n\t/**\n\t * Callback which is invoked when there is an error in the processing\n\t */\n\tonprocessorerror: (e: string) => void = noOp;\n\n\tconstructor(options: Options) {\n\t\tsuper(options);\n\n\t\tconst blobUrl = URL.createObjectURL(\n\t\t\tnew Blob([getWorkletGlobalScope()], { type: \"text/javascript\" })\n\t\t);\n\t\tconst name = this._audioWorkletName();\n\n\t\tthis._dummyGain = this.context.createGain();\n\t\tthis._dummyParam = this._dummyGain.gain;\n\n\t\t// Register the processor\n\t\tthis.context.addAudioWorkletModule(blobUrl).then(() => {\n\t\t\t// create the worklet when it's read\n\t\t\tif (!this.disposed) {\n\t\t\t\tthis._worklet = this.context.createAudioWorkletNode(\n\t\t\t\t\tname,\n\t\t\t\t\tthis.workletOptions\n\t\t\t\t);\n\t\t\t\tthis._worklet.onprocessorerror =\n\t\t\t\t\tthis.onprocessorerror.bind(this);\n\t\t\t\tthis.onReady(this._worklet);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dummyGain.disconnect();\n\t\tif (this._worklet) {\n\t\t\tthis._worklet.port.postMessage(\"dispose\");\n\t\t\tthis._worklet.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SACCA,aAAa,QAEP,6BAA6B;AACpC,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,qBAAqB,QAAQ,yBAAyB;AAI/D,OAAM,MAAgBC,gBAEpB,SAAQH,aAAsB;EAsC/BI,YAAYC,OAAgB;IAC3B,KAAK,CAACA,OAAO,CAAC;IAtCN,KAAAC,IAAI,GAAW,kBAAkB;IAiB1C;;;IAGU,KAAAC,cAAc,GAAqC,EAAE;IAY/D;;;IAGA,KAAAC,gBAAgB,GAAwBP,IAAI;IAK3C,MAAMQ,OAAO,GAAGC,GAAG,CAACC,eAAe,CAClC,IAAIC,IAAI,CAAC,CAACV,qBAAqB,EAAE,CAAC,EAAE;MAAEW,IAAI,EAAE;IAAiB,CAAE,CAAC,CAChE;IACD,MAAMP,IAAI,GAAG,IAAI,CAACQ,iBAAiB,EAAE;IAErC,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,OAAO,CAACC,UAAU,EAAE;IAC3C,IAAI,CAACC,WAAW,GAAG,IAAI,CAACH,UAAU,CAACI,IAAI;IAEvC;IACA,IAAI,CAACH,OAAO,CAACI,qBAAqB,CAACX,OAAO,CAAC,CAACY,IAAI,CAAC,MAAK;MACrD;MACA,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;QACnB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACP,OAAO,CAACQ,sBAAsB,CAClDlB,IAAI,EACJ,IAAI,CAACC,cAAc,CACnB;QACD,IAAI,CAACgB,QAAQ,CAACf,gBAAgB,GAC7B,IAAI,CAACA,gBAAgB,CAACiB,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC;MAC5B;IACD,CAAC,CAAC;EACH;EAEAI,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACZ,UAAU,CAACa,UAAU,EAAE;IAC5B,IAAI,IAAI,CAACL,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,CAACM,IAAI,CAACC,WAAW,CAAC,SAAS,CAAC;MACzC,IAAI,CAACP,QAAQ,CAACK,UAAU,EAAE;IAC3B;IACA,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}