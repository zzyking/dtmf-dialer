{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { assert } from \"../../core/util/Debug.js\";\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to {@link Filter} but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\nexport class BiquadFilter extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    super(options);\n    this.name = \"BiquadFilter\";\n    this._filter = this.context.createBiquadFilter();\n    this.input = this.output = this._filter;\n    this.Q = new Param({\n      context: this.context,\n      units: \"number\",\n      value: options.Q,\n      param: this._filter.Q\n    });\n    this.frequency = new Param({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      param: this._filter.frequency\n    });\n    this.detune = new Param({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune,\n      param: this._filter.detune\n    });\n    this.gain = new Param({\n      context: this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain,\n      param: this._filter.gain\n    });\n    this.type = options.type;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      type: \"lowpass\",\n      frequency: 350,\n      detune: 0,\n      gain: 0\n    });\n  }\n  /**\n   * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n   * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n   */\n  get type() {\n    return this._filter.type;\n  }\n  set type(type) {\n    const types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n    assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n    this._filter.type = type;\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n  getFrequencyResponse(len = 128) {\n    // start with all 1s\n    const freqValues = new Float32Array(len);\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len);\n    // clone the filter to remove any connections which may be changing the value\n    const filterClone = this.context.createBiquadFilter();\n    filterClone.type = this.type;\n    filterClone.Q.value = this.Q.value;\n    filterClone.frequency.value = this.frequency.value;\n    filterClone.gain.value = this.gain.value;\n    filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n    return magValues;\n  }\n  dispose() {\n    super.dispose();\n    this._filter.disconnect();\n    this.Q.dispose();\n    this.frequency.dispose();\n    this.gain.dispose();\n    this.detune.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","Param","assert","BiquadFilter","constructor","options","getDefaults","arguments","name","_filter","context","createBiquadFilter","input","output","Q","units","value","param","frequency","detune","gain","convert","type","Object","assign","types","indexOf","getFrequencyResponse","len","freqValues","Float32Array","i","norm","Math","pow","freq","magValues","phaseValues","filterClone","dispose","disconnect"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/filter/BiquadFilter.ts"],"sourcesContent":["import {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { Cents, Frequency, GainFactor } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { assert } from \"../../core/util/Debug.js\";\n\nexport interface BiquadFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tQ: number;\n\ttype: BiquadFilterType;\n\tgain: GainFactor;\n}\n\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to {@link Filter} but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\nexport class BiquadFilter extends ToneAudioNode<BiquadFilterOptions> {\n\treadonly name: string = \"BiquadFilter\";\n\n\treadonly input: BiquadFilterNode;\n\treadonly output: BiquadFilterNode;\n\n\t/**\n\t * The frequency of the filter\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * A detune value, in cents, for the frequency.\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\t/**\n\t * The Q factor of the filter.\n\t * For lowpass and highpass filters the Q value is interpreted to be in dB.\n\t * For these filters the nominal range is [‚àíùëÑùëôùëñùëö,ùëÑùëôùëñùëö] where ùëÑùëôùëñùëö is the largest value for which 10ùëÑ/20 does not overflow. This is approximately 770.63678.\n\t * For the bandpass, notch, allpass, and peaking filters, this value is a linear value.\n\t * The value is related to the bandwidth of the filter and hence should be a positive value. The nominal range is\n\t * [0,3.4028235ùëí38], the upper limit being the most-positive-single-float.\n\t * This is not used for the lowshelf and highshelf filters.\n\t */\n\treadonly Q: Param<\"number\">;\n\n\t/**\n\t * The gain of the filter. Its value is in dB units. The gain is only used for lowshelf, highshelf, and peaking filters.\n\t */\n\treadonly gain: Param<\"decibels\">;\n\n\tprivate readonly _filter: BiquadFilterNode;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType);\n\tconstructor(options?: Partial<BiquadFilterOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tBiquadFilter.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"frequency\", \"type\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis._filter = this.context.createBiquadFilter();\n\t\tthis.input = this.output = this._filter;\n\n\t\tthis.Q = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"number\",\n\t\t\tvalue: options.Q,\n\t\t\tparam: this._filter.Q,\n\t\t});\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t\tparam: this._filter.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t\tparam: this._filter.detune,\n\t\t});\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tconvert: false,\n\t\t\tvalue: options.gain,\n\t\t\tparam: this._filter.gain,\n\t\t});\n\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): BiquadFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\ttype: \"lowpass\" as const,\n\t\t\tfrequency: 350,\n\t\t\tdetune: 0,\n\t\t\tgain: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n\t * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._filter.type;\n\t}\n\tset type(type) {\n\t\tconst types: BiquadFilterType[] = [\n\t\t\t\"lowpass\",\n\t\t\t\"highpass\",\n\t\t\t\"bandpass\",\n\t\t\t\"lowshelf\",\n\t\t\t\"highshelf\",\n\t\t\t\"notch\",\n\t\t\t\"allpass\",\n\t\t\t\"peaking\",\n\t\t];\n\t\tassert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._filter.type = type;\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\t// clone the filter to remove any connections which may be changing the value\n\t\tconst filterClone = this.context.createBiquadFilter();\n\t\tfilterClone.type = this.type;\n\t\tfilterClone.Q.value = this.Q.value;\n\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\tfilterClone.gain.value = this.gain.value as number;\n\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filter.disconnect();\n\t\tthis.Q.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.gain.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}