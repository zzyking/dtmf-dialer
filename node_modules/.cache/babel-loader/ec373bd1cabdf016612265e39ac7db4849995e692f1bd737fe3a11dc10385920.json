{"ast":null,"code":"import { noOp } from \"../util/Interface.js\";\n/**\n * TransportEvent is an internal class used by {@link TransportClass}\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  constructor(transport, opts) {\n    /**\n     * The unique id of the event\n     */\n    this.id = TransportEvent._eventId++;\n    /**\n     * The remaining value between the passed in time, and Math.floor(time).\n     * This value is later added back when scheduling to get sub-tick precision.\n     */\n    this._remainderTime = 0;\n    const options = Object.assign(TransportEvent.getDefaults(), opts);\n    this.transport = transport;\n    this.callback = options.callback;\n    this._once = options.once;\n    this.time = Math.floor(options.time);\n    this._remainderTime = options.time - this.time;\n  }\n  static getDefaults() {\n    return {\n      callback: noOp,\n      once: false,\n      time: 0\n    };\n  }\n  /**\n   * Get the time and remainder time.\n   */\n  get floatTime() {\n    return this.time + this._remainderTime;\n  }\n  /**\n   * Invoke the event callback.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n  invoke(time) {\n    if (this.callback) {\n      const tickDuration = this.transport.bpm.getDurationOfTicks(1, time);\n      this.callback(time + this._remainderTime * tickDuration);\n      if (this._once) {\n        this.transport.clear(this.id);\n      }\n    }\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    this.callback = undefined;\n    return this;\n  }\n}\n/**\n * Current ID counter\n */\nTransportEvent._eventId = 0;","map":{"version":3,"names":["noOp","TransportEvent","constructor","transport","opts","id","_eventId","_remainderTime","options","Object","assign","getDefaults","callback","_once","once","time","Math","floor","floatTime","invoke","tickDuration","bpm","getDurationOfTicks","clear","dispose","undefined"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/clock/TransportEvent.ts"],"sourcesContent":["import { Seconds, Ticks } from \"../type/Units.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport type { TransportClass as Transport } from \"./Transport.js\";\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by {@link TransportClass}\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\t/**\n\t * The remaining value between the passed in time, and Math.floor(time).\n\t * This value is later added back when scheduling to get sub-tick precision.\n\t */\n\tprotected _remainderTime = 0;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\t\tconst options: TransportEventOptions = Object.assign(\n\t\t\tTransportEvent.getDefaults(),\n\t\t\topts\n\t\t);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = Math.floor(options.time);\n\t\tthis._remainderTime = options.time - this.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId = 0;\n\n\t/**\n\t * Get the time and remainder time.\n\t */\n\tprotected get floatTime(): number {\n\t\treturn this.time + this._remainderTime;\n\t}\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tconst tickDuration = this.transport.bpm.getDurationOfTicks(1, time);\n\t\t\tthis.callback(time + this._remainderTime * tickDuration);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n"],"mappings":"AACA,SAASA,IAAI,QAAQ,sBAAsB;AAS3C;;;;;AAKA,OAAM,MAAOC,cAAc;EAgC1B;;;EAGAC,YAAYC,SAAoB,EAAEC,IAAoC;IA7BtE;;;IAGA,KAAAC,EAAE,GAAWJ,cAAc,CAACK,QAAQ,EAAE;IAiBtC;;;;IAIU,KAAAC,cAAc,GAAG,CAAC;IAM3B,MAAMC,OAAO,GAA0BC,MAAM,CAACC,MAAM,CACnDT,cAAc,CAACU,WAAW,EAAE,EAC5BP,IAAI,CACJ;IAED,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACS,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;IAChC,IAAI,CAACC,KAAK,GAAGL,OAAO,CAACM,IAAI;IACzB,IAAI,CAACC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACT,OAAO,CAACO,IAAI,CAAC;IACpC,IAAI,CAACR,cAAc,GAAGC,OAAO,CAACO,IAAI,GAAG,IAAI,CAACA,IAAI;EAC/C;EAEA,OAAOJ,WAAWA,CAAA;IACjB,OAAO;MACNC,QAAQ,EAAEZ,IAAI;MACdc,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;KACN;EACF;EAOA;;;EAGA,IAAcG,SAASA,CAAA;IACtB,OAAO,IAAI,CAACH,IAAI,GAAG,IAAI,CAACR,cAAc;EACvC;EAEA;;;;EAIAY,MAAMA,CAACJ,IAAa;IACnB,IAAI,IAAI,CAACH,QAAQ,EAAE;MAClB,MAAMQ,YAAY,GAAG,IAAI,CAACjB,SAAS,CAACkB,GAAG,CAACC,kBAAkB,CAAC,CAAC,EAAEP,IAAI,CAAC;MACnE,IAAI,CAACH,QAAQ,CAACG,IAAI,GAAG,IAAI,CAACR,cAAc,GAAGa,YAAY,CAAC;MACxD,IAAI,IAAI,CAACP,KAAK,EAAE;QACf,IAAI,CAACV,SAAS,CAACoB,KAAK,CAAC,IAAI,CAAClB,EAAE,CAAC;MAC9B;IACD;EACD;EAEA;;;EAGAmB,OAAOA,CAAA;IACN,IAAI,CAACZ,QAAQ,GAAGa,SAAS;IACzB,OAAO,IAAI;EACZ;;AAhCA;;;AAGexB,cAAA,CAAAK,QAAQ,GAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}