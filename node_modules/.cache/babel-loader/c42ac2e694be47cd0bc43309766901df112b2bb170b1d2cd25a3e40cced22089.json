{"ast":null,"code":"import { connect } from \"../../core/context/ToneAudioNode.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { OneShotSource } from \"../OneShotSource.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***{@link Oscillator} is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource {\n  constructor() {\n    const options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    super(options);\n    this.name = \"ToneOscillatorNode\";\n    /**\n     * The oscillator\n     */\n    this._oscillator = this.context.createOscillator();\n    this._internalChannels = [this._oscillator];\n    connect(this._oscillator, this._gainNode);\n    this.type = options.type;\n    this.frequency = new Param({\n      context: this.context,\n      param: this._oscillator.frequency,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Param({\n      context: this.context,\n      param: this._oscillator.detune,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      type: \"sine\"\n    });\n  }\n  /**\n   * Start the oscillator node at the given time\n   * @param  time When to start the oscillator\n   */\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n    this._startGain(computedTime);\n    this._oscillator.start(computedTime);\n    return this;\n  }\n  _stopSource(time) {\n    this._oscillator.stop(time);\n  }\n  /**\n   * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n   * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n   */\n  setPeriodicWave(periodicWave) {\n    this._oscillator.setPeriodicWave(periodicWave);\n    return this;\n  }\n  /**\n   * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n   */\n  get type() {\n    return this._oscillator.type;\n  }\n  set type(type) {\n    this._oscillator.type = type;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    if (this.state === \"started\") {\n      this.stop();\n    }\n    this._oscillator.disconnect();\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["connect","Param","optionsFromArguments","OneShotSource","readOnly","ToneOscillatorNode","constructor","options","getDefaults","arguments","name","_oscillator","context","createOscillator","_internalChannels","_gainNode","type","frequency","param","units","value","detune","Object","assign","start","time","computedTime","toSeconds","log","_startGain","_stopSource","stop","setPeriodicWave","periodicWave","dispose","state","disconnect"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/source/oscillator/ToneOscillatorNode.ts"],"sourcesContent":["import { connect } from \"../../core/context/ToneAudioNode.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n\nexport interface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***{@link Oscillator} is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\treadonly name: string = \"ToneOscillatorNode\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\t/**\n\t * @param  frequency   The frequency value\n\t * @param  type  The basic oscillator type\n\t */\n\tconstructor(frequency: Frequency, type: OscillatorType);\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tToneOscillatorNode.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"frequency\", \"type\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.frequency,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.detune,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}