{"ast":null,"code":"import { connect } from \"../core/context/ToneAudioNode.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { OneShotSource } from \"../source/OneShotSource.js\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource extends OneShotSource {\n  constructor() {\n    const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    super(options);\n    this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n    this._source = this.context.createConstantSource();\n    connect(this._source, this._gainNode);\n    this.offset = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n  }\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      convert: true,\n      offset: 1,\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the source node at the given time\n   * @param  time When to start the source\n   */\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n    this._startGain(computedTime);\n    this._source.start(computedTime);\n    return this;\n  }\n  _stopSource(time) {\n    this._source.stop(time);\n  }\n  dispose() {\n    super.dispose();\n    if (this.state === \"started\") {\n      this.stop();\n    }\n    this._source.disconnect();\n    this.offset.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["connect","Param","optionsFromArguments","OneShotSource","ToneConstantSource","constructor","options","getDefaults","arguments","name","_source","context","createConstantSource","_gainNode","offset","convert","param","units","value","minValue","maxValue","Object","assign","start","time","computedTime","toSeconds","log","_startGain","_stopSource","stop","dispose","state","disconnect"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/signal/ToneConstantSource.ts"],"sourcesContent":["import { connect } from \"../core/context/ToneAudioNode.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { Seconds, Time, UnitMap, UnitName } from \"../core/type/Units.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport {\n\tOneShotSource,\n\tOneShotSourceOptions,\n} from \"../source/OneShotSource.js\";\n\nexport interface ToneConstantSourceOptions<TypeName extends UnitName>\n\textends OneShotSourceOptions {\n\tconvert: boolean;\n\toffset: UnitMap[TypeName];\n\tunits: TypeName;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource<\n\tTypeName extends UnitName = \"number\",\n> extends OneShotSource<ToneConstantSourceOptions<TypeName>> {\n\treadonly name: string = \"ToneConstantSource\";\n\n\t/**\n\t * The signal generator\n\t */\n\tprivate _source = this.context.createConstantSource();\n\n\t/**\n\t * The offset of the signal generator\n\t */\n\treadonly offset: Param<TypeName>;\n\n\t/**\n\t * @param  offset   The offset value\n\t */\n\tconstructor(offset: UnitMap[TypeName]);\n\tconstructor(options?: Partial<ToneConstantSourceOptions<TypeName>>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tToneConstantSource.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"offset\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tconnect(this._source, this._gainNode);\n\n\t\tthis.offset = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._source.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.offset,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneConstantSourceOptions<any> {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\toffset: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the source\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._source.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._source.stop(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._source.disconnect();\n\t\tthis.offset.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,kCAAkC;AAC1D,SAASC,KAAK,QAAQ,0BAA0B;AAEhD,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SACCC,aAAa,QAEP,4BAA4B;AAWnC;;;;;AAKA,OAAM,MAAOC,kBAEX,SAAQD,aAAkD;EAkB3DE,YAAA;IACC,MAAMC,OAAO,GAAGJ,oBAAoB,CACnCE,kBAAkB,CAACG,WAAW,EAAE,EAChCC,SAAS,EACT,CAAC,QAAQ,CAAC,CACV;IACD,KAAK,CAACF,OAAO,CAAC;IAvBN,KAAAG,IAAI,GAAW,oBAAoB;IAE5C;;;IAGQ,KAAAC,OAAO,GAAG,IAAI,CAACC,OAAO,CAACC,oBAAoB,EAAE;IAoBpDZ,OAAO,CAAC,IAAI,CAACU,OAAO,EAAE,IAAI,CAACG,SAAS,CAAC;IAErC,IAAI,CAACC,MAAM,GAAG,IAAIb,KAAK,CAAC;MACvBU,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBI,OAAO,EAAET,OAAO,CAACS,OAAO;MACxBC,KAAK,EAAE,IAAI,CAACN,OAAO,CAACI,MAAM;MAC1BG,KAAK,EAAEX,OAAO,CAACW,KAAK;MACpBC,KAAK,EAAEZ,OAAO,CAACQ,MAAM;MACrBK,QAAQ,EAAEb,OAAO,CAACa,QAAQ;MAC1BC,QAAQ,EAAEd,OAAO,CAACc;KAClB,CAAC;EACH;EAEA,OAAOb,WAAWA,CAAA;IACjB,OAAOc,MAAM,CAACC,MAAM,CAACnB,aAAa,CAACI,WAAW,EAAE,EAAE;MACjDQ,OAAO,EAAE,IAAI;MACbD,MAAM,EAAE,CAAC;MACTG,KAAK,EAAE;KACP,CAAC;EACH;EAEA;;;;EAIAM,KAAKA,CAACC,IAAW;IAChB,MAAMC,YAAY,GAAG,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC;IACzC,IAAI,CAACG,GAAG,CAAC,OAAO,EAAEF,YAAY,CAAC;IAC/B,IAAI,CAACG,UAAU,CAACH,YAAY,CAAC;IAC7B,IAAI,CAACf,OAAO,CAACa,KAAK,CAACE,YAAY,CAAC;IAChC,OAAO,IAAI;EACZ;EAEUI,WAAWA,CAACL,IAAc;IACnC,IAAI,CAACd,OAAO,CAACoB,IAAI,CAACN,IAAI,CAAC;EACxB;EAEAO,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,IAAI,CAACC,KAAK,KAAK,SAAS,EAAE;MAC7B,IAAI,CAACF,IAAI,EAAE;IACZ;IACA,IAAI,CAACpB,OAAO,CAACuB,UAAU,EAAE;IACzB,IAAI,CAACnB,MAAM,CAACiB,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}