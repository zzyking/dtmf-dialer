{"ast":null,"code":"import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n    super(options);\n    this.name = \"Solo\";\n    this.input = this.output = new Gain({\n      context: this.context\n    });\n    if (!Solo._allSolos.has(this.context)) {\n      Solo._allSolos.set(this.context, new Set());\n    }\n    Solo._allSolos.get(this.context).add(this);\n    // set initially\n    this.solo = options.solo;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      solo: false\n    });\n  }\n  /**\n   * Isolates this instance and mutes all other instances of Solo.\n   * Only one instance can be soloed at a time. A soloed\n   * instance will report `solo=false` when another instance is soloed.\n   */\n  get solo() {\n    return this._isSoloed();\n  }\n  set solo(solo) {\n    if (solo) {\n      this._addSolo();\n    } else {\n      this._removeSolo();\n    }\n    Solo._allSolos.get(this.context).forEach(instance => instance._updateSolo());\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed\n   */\n  get muted() {\n    return this.input.gain.value === 0;\n  }\n  /**\n   * Add this to the soloed array\n   */\n  _addSolo() {\n    if (!Solo._soloed.has(this.context)) {\n      Solo._soloed.set(this.context, new Set());\n    }\n    Solo._soloed.get(this.context).add(this);\n  }\n  /**\n   * Remove this from the soloed array\n   */\n  _removeSolo() {\n    if (Solo._soloed.has(this.context)) {\n      Solo._soloed.get(this.context).delete(this);\n    }\n  }\n  /**\n   * Is this on the soloed array\n   */\n  _isSoloed() {\n    return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n  }\n  /**\n   * Returns true if no one is soloed\n   */\n  _noSolos() {\n    // either does not have any soloed added\n    return !Solo._soloed.has(this.context) ||\n    // or has a solo set but doesn't include any items\n    Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;\n  }\n  /**\n   * Solo the current instance and unsolo all other instances.\n   */\n  _updateSolo() {\n    if (this._isSoloed()) {\n      this.input.gain.value = 1;\n    } else if (this._noSolos()) {\n      // no one is soloed\n      this.input.gain.value = 1;\n    } else {\n      this.input.gain.value = 0;\n    }\n  }\n  dispose() {\n    super.dispose();\n    Solo._allSolos.get(this.context).delete(this);\n    this._removeSolo();\n    return this;\n  }\n}\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\nSolo._soloed = new Map();","map":{"version":3,"names":["Gain","ToneAudioNode","optionsFromArguments","Solo","constructor","options","getDefaults","arguments","name","input","output","context","_allSolos","has","set","Set","get","add","solo","Object","assign","_isSoloed","_addSolo","_removeSolo","forEach","instance","_updateSolo","muted","gain","value","_soloed","delete","_noSolos","size","dispose","Map"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/channel/Solo.ts"],"sourcesContent":["import { BaseContext } from \"../../core/context/BaseContext.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n\nexport interface SoloOptions extends ToneAudioNodeOptions {\n\tsolo: boolean;\n}\n\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode<SoloOptions> {\n\treadonly name: string = \"Solo\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param solo If the connection should be initially solo'ed.\n\t */\n\tconstructor(solo?: boolean);\n\tconstructor(options?: Partial<SoloOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Solo.getDefaults(), arguments, [\n\t\t\t\"solo\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tif (!Solo._allSolos.has(this.context)) {\n\t\t\tSolo._allSolos.set(this.context, new Set());\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).add(this);\n\n\t\t// set initially\n\t\tthis.solo = options.solo;\n\t}\n\n\tstatic getDefaults(): SoloOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsolo: false,\n\t\t});\n\t}\n\n\t/**\n\t * Hold all of the solo'ed tracks belonging to a specific context\n\t */\n\tprivate static _allSolos: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Hold the currently solo'ed instance(s)\n\t */\n\tprivate static _soloed: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Isolates this instance and mutes all other instances of Solo.\n\t * Only one instance can be soloed at a time. A soloed\n\t * instance will report `solo=false` when another instance is soloed.\n\t */\n\tget solo(): boolean {\n\t\treturn this._isSoloed();\n\t}\n\tset solo(solo) {\n\t\tif (solo) {\n\t\t\tthis._addSolo();\n\t\t} else {\n\t\t\tthis._removeSolo();\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).forEach((instance) =>\n\t\t\tinstance._updateSolo()\n\t\t);\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed\n\t */\n\tget muted(): boolean {\n\t\treturn this.input.gain.value === 0;\n\t}\n\n\t/**\n\t * Add this to the soloed array\n\t */\n\tprivate _addSolo(): void {\n\t\tif (!Solo._soloed.has(this.context)) {\n\t\t\tSolo._soloed.set(this.context, new Set());\n\t\t}\n\t\t(Solo._soloed.get(this.context) as Set<Solo>).add(this);\n\t}\n\n\t/**\n\t * Remove this from the soloed array\n\t */\n\tprivate _removeSolo(): void {\n\t\tif (Solo._soloed.has(this.context)) {\n\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).delete(this);\n\t\t}\n\t}\n\n\t/**\n\t * Is this on the soloed array\n\t */\n\tprivate _isSoloed(): boolean {\n\t\treturn (\n\t\t\tSolo._soloed.has(this.context) &&\n\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).has(this)\n\t\t);\n\t}\n\n\t/**\n\t * Returns true if no one is soloed\n\t */\n\tprivate _noSolos(): boolean {\n\t\t// either does not have any soloed added\n\t\treturn (\n\t\t\t!Solo._soloed.has(this.context) ||\n\t\t\t// or has a solo set but doesn't include any items\n\t\t\t(Solo._soloed.has(this.context) &&\n\t\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).size === 0)\n\t\t);\n\t}\n\n\t/**\n\t * Solo the current instance and unsolo all other instances.\n\t */\n\tprivate _updateSolo(): void {\n\t\tif (this._isSoloed()) {\n\t\t\tthis.input.gain.value = 1;\n\t\t} else if (this._noSolos()) {\n\t\t\t// no one is soloed\n\t\t\tthis.input.gain.value = 1;\n\t\t} else {\n\t\t\tthis.input.gain.value = 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).delete(this);\n\t\tthis._removeSolo();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}