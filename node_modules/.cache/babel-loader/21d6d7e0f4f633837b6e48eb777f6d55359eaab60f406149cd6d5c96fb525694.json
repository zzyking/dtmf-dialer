{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { GreaterThan } from \"../../signal/GreaterThan.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { Follower } from \"../analysis/Follower.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions.js\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses {@link Follower} to follow the ampltiude\n * of the incoming signal and compares it to the {@link threshold} value using {@link GreaterThan}.\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\nexport class Gate extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    super(options);\n    this.name = \"Gate\";\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.smoothing\n    });\n    this._gt = new GreaterThan({\n      context: this.context,\n      value: dbToGain(options.threshold)\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this._gate = this.output = new Gain({\n      context: this.context\n    });\n    // connections\n    this.input.connect(this._gate);\n    // the control signal\n    this.input.chain(this._follower, this._gt, this._gate.gain);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.1,\n      threshold: -40\n    });\n  }\n  /**\n   * The threshold of the gate in decibels\n   */\n  get threshold() {\n    return gainToDb(this._gt.value);\n  }\n  set threshold(thresh) {\n    this._gt.value = dbToGain(thresh);\n  }\n  /**\n   * The attack/decay speed of the gate.\n   * @see {@link Follower.smoothing}\n   */\n  get smoothing() {\n    return this._follower.smoothing;\n  }\n  set smoothing(smoothingTime) {\n    this._follower.smoothing = smoothingTime;\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this._follower.dispose();\n    this._gt.dispose();\n    this._gate.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","GreaterThan","Gain","Follower","optionsFromArguments","dbToGain","gainToDb","Gate","constructor","options","getDefaults","arguments","name","_follower","context","smoothing","_gt","value","threshold","input","_gate","output","connect","chain","gain","Object","assign","thresh","smoothingTime","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/dynamics/Gate.ts"],"sourcesContent":["import {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { Decibels, Time } from \"../../core/type/Units.js\";\nimport { GreaterThan } from \"../../signal/GreaterThan.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { Follower } from \"../analysis/Follower.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions.js\";\n\nexport interface GateOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n\tsmoothing: Time;\n}\n\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses {@link Follower} to follow the ampltiude\n * of the incoming signal and compares it to the {@link threshold} value using {@link GreaterThan}.\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\nexport class Gate extends ToneAudioNode<GateOptions> {\n\treadonly name: string = \"Gate\";\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Follow the incoming signal\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * Test if it's greater than the threshold\n\t */\n\tprivate _gt: GreaterThan;\n\n\t/**\n\t * Gate the incoming signal when it does not exceed the threshold\n\t */\n\tprivate _gate: Gain;\n\n\t/**\n\t * @param threshold The threshold above which the gate will open.\n\t * @param smoothing The follower's smoothing time\n\t */\n\tconstructor(threshold?: Decibels, smoothing?: Time);\n\tconstructor(options?: Partial<GateOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Gate.getDefaults(), arguments, [\n\t\t\t\"threshold\",\n\t\t\t\"smoothing\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.smoothing,\n\t\t});\n\t\tthis._gt = new GreaterThan({\n\t\t\tcontext: this.context,\n\t\t\tvalue: dbToGain(options.threshold),\n\t\t});\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis._gate = this.output = new Gain({ context: this.context });\n\n\t\t// connections\n\t\tthis.input.connect(this._gate);\n\t\t// the control signal\n\t\tthis.input.chain(this._follower, this._gt, this._gate.gain);\n\t}\n\n\tstatic getDefaults(): GateOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.1,\n\t\t\tthreshold: -40,\n\t\t});\n\t}\n\n\t/**\n\t * The threshold of the gate in decibels\n\t */\n\tget threshold(): Decibels {\n\t\treturn gainToDb(this._gt.value);\n\t}\n\tset threshold(thresh) {\n\t\tthis._gt.value = dbToGain(thresh);\n\t}\n\n\t/**\n\t * The attack/decay speed of the gate.\n\t * @see {@link Follower.smoothing}\n\t */\n\tget smoothing(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset smoothing(smoothingTime) {\n\t\tthis._follower.smoothing = smoothingTime;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._gt.dispose();\n\t\tthis._gate.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SACCA,aAAa,QAEP,qCAAqC;AAE5C,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,IAAI,QAAQ,4BAA4B;AACjD,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,gCAAgC;AAOnE;;;;;;;;;;;;AAYA,OAAM,MAAOC,IAAK,SAAQP,aAA0B;EA2BnDQ,YAAA;IACC,MAAMC,OAAO,GAAGL,oBAAoB,CAACG,IAAI,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CACnE,WAAW,EACX,WAAW,CACX,CAAC;IACF,KAAK,CAACF,OAAO,CAAC;IA/BN,KAAAG,IAAI,GAAW,MAAM;IAiC7B,IAAI,CAACC,SAAS,GAAG,IAAIV,QAAQ,CAAC;MAC7BW,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,SAAS,EAAEN,OAAO,CAACM;KACnB,CAAC;IACF,IAAI,CAACC,GAAG,GAAG,IAAIf,WAAW,CAAC;MAC1Ba,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBG,KAAK,EAAEZ,QAAQ,CAACI,OAAO,CAACS,SAAS;KACjC,CAAC;IACF,IAAI,CAACC,KAAK,GAAG,IAAIjB,IAAI,CAAC;MAAEY,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAChD,IAAI,CAACM,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAInB,IAAI,CAAC;MAAEY,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAE9D;IACA,IAAI,CAACK,KAAK,CAACG,OAAO,CAAC,IAAI,CAACF,KAAK,CAAC;IAC9B;IACA,IAAI,CAACD,KAAK,CAACI,KAAK,CAAC,IAAI,CAACV,SAAS,EAAE,IAAI,CAACG,GAAG,EAAE,IAAI,CAACI,KAAK,CAACI,IAAI,CAAC;EAC5D;EAEA,OAAOd,WAAWA,CAAA;IACjB,OAAOe,MAAM,CAACC,MAAM,CAAC1B,aAAa,CAACU,WAAW,EAAE,EAAE;MACjDK,SAAS,EAAE,GAAG;MACdG,SAAS,EAAE,CAAC;KACZ,CAAC;EACH;EAEA;;;EAGA,IAAIA,SAASA,CAAA;IACZ,OAAOZ,QAAQ,CAAC,IAAI,CAACU,GAAG,CAACC,KAAK,CAAC;EAChC;EACA,IAAIC,SAASA,CAACS,MAAM;IACnB,IAAI,CAACX,GAAG,CAACC,KAAK,GAAGZ,QAAQ,CAACsB,MAAM,CAAC;EAClC;EAEA;;;;EAIA,IAAIZ,SAASA,CAAA;IACZ,OAAO,IAAI,CAACF,SAAS,CAACE,SAAS;EAChC;EACA,IAAIA,SAASA,CAACa,aAAa;IAC1B,IAAI,CAACf,SAAS,CAACE,SAAS,GAAGa,aAAa;EACzC;EAEAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACV,KAAK,CAACU,OAAO,EAAE;IACpB,IAAI,CAAChB,SAAS,CAACgB,OAAO,EAAE;IACxB,IAAI,CAACb,GAAG,CAACa,OAAO,EAAE;IAClB,IAAI,CAACT,KAAK,CAACS,OAAO,EAAE;IACpB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}