{"ast":null,"code":"import { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { Delay } from \"../core/context/Delay.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an {@link LFO} applied to the delayTime of each channel.\n * When {@link feedback} is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [Sound On Sound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect {\n  constructor() {\n    const options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n    super(options);\n    this.name = \"Chorus\";\n    this._depth = options.depth;\n    this._delayTime = options.delayTime / 1000;\n    this._lfoL = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    this._delayNodeL = new Delay({\n      context: this.context\n    });\n    this._delayNodeR = new Delay({\n      context: this.context\n    });\n    this.frequency = this._lfoL.frequency;\n    readOnly(this, [\"frequency\"]);\n    // have one LFO frequency control the other\n    this._lfoL.frequency.connect(this._lfoR.frequency);\n    // connections\n    this.connectEffectLeft(this._delayNodeL);\n    this.connectEffectRight(this._delayNodeR);\n    // lfo setup\n    this._lfoL.connect(this._delayNodeL.delayTime);\n    this._lfoR.connect(this._delayNodeR.delayTime);\n    // set the initial values\n    this.depth = this._depth;\n    this.type = options.type;\n    this.spread = options.spread;\n  }\n  static getDefaults() {\n    return Object.assign(StereoFeedbackEffect.getDefaults(), {\n      frequency: 1.5,\n      delayTime: 3.5,\n      depth: 0.7,\n      type: \"sine\",\n      spread: 180,\n      feedback: 0,\n      wet: 0.5\n    });\n  }\n  /**\n   * The depth of the effect. A depth of 1 makes the delayTime\n   * modulate between 0 and 2*delayTime (centered around the delayTime).\n   */\n  get depth() {\n    return this._depth;\n  }\n  set depth(depth) {\n    this._depth = depth;\n    const deviation = this._delayTime * depth;\n    this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n    this._lfoL.max = this._delayTime + deviation;\n    this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n    this._lfoR.max = this._delayTime + deviation;\n  }\n  /**\n   * The delayTime in milliseconds of the chorus. A larger delayTime\n   * will give a more pronounced effect. Nominal range a delayTime\n   * is between 2 and 20ms.\n   */\n  get delayTime() {\n    return this._delayTime * 1000;\n  }\n  set delayTime(delayTime) {\n    this._delayTime = delayTime / 1000;\n    this.depth = this._depth;\n  }\n  /**\n   * The oscillator type of the LFO.\n   */\n  get type() {\n    return this._lfoL.type;\n  }\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase;\n  }\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n  /**\n   * Start the effect.\n   */\n  start(time) {\n    this._lfoL.start(time);\n    this._lfoR.start(time);\n    return this;\n  }\n  /**\n   * Stop the lfo\n   */\n  stop(time) {\n    this._lfoL.stop(time);\n    this._lfoR.stop(time);\n    return this;\n  }\n  /**\n   * Sync the filter to the transport.\n   * @see {@link LFO.sync}\n   */\n  sync() {\n    this._lfoL.sync();\n    this._lfoR.sync();\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport.\n   */\n  unsync() {\n    this._lfoL.unsync();\n    this._lfoR.unsync();\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._lfoL.dispose();\n    this._lfoR.dispose();\n    this._delayNodeL.dispose();\n    this._delayNodeR.dispose();\n    this.frequency.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["StereoFeedbackEffect","optionsFromArguments","LFO","Delay","readOnly","Chorus","constructor","options","getDefaults","arguments","name","_depth","depth","_delayTime","delayTime","_lfoL","context","frequency","min","max","_lfoR","phase","_delayNodeL","_delayNodeR","connect","connectEffectLeft","connectEffectRight","type","spread","Object","assign","feedback","wet","deviation","Math","start","time","stop","sync","unsync","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/effect/Chorus.ts"],"sourcesContent":["import {\n\tStereoFeedbackEffect,\n\tStereoFeedbackEffectOptions,\n} from \"../effect/StereoFeedbackEffect.js\";\nimport {\n\tDegrees,\n\tFrequency,\n\tMilliseconds,\n\tNormalRange,\n\tSeconds,\n\tTime,\n} from \"../core/type/Units.js\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { Delay } from \"../core/context/Delay.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n\nexport interface ChorusOptions extends StereoFeedbackEffectOptions {\n\tfrequency: Frequency;\n\tdelayTime: Milliseconds;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n\tspread: Degrees;\n}\n\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an {@link LFO} applied to the delayTime of each channel.\n * When {@link feedback} is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [Sound On Sound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect<ChorusOptions> {\n\treadonly name: string = \"Chorus\";\n\n\t/**\n\t * the depth of the chorus\n\t */\n\tprivate _depth: NormalRange;\n\n\t/**\n\t * the delayTime in seconds.\n\t */\n\tprivate _delayTime: Seconds;\n\n\t/**\n\t * the lfo which controls the delayTime\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * another LFO for the right side with a 180 degree phase diff\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * delay for left\n\t */\n\tprivate _delayNodeL: Delay;\n\n\t/**\n\t * delay for right\n\t */\n\tprivate _delayNodeR: Delay;\n\n\t/**\n\t * The frequency of the LFO which modulates the delayTime.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The frequency of the LFO.\n\t * @param delayTime The delay of the chorus effect in ms.\n\t * @param depth The depth of the chorus.\n\t */\n\tconstructor(\n\t\tfrequency?: Frequency,\n\t\tdelayTime?: Milliseconds,\n\t\tdepth?: NormalRange\n\t);\n\tconstructor(options?: Partial<ChorusOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Chorus.getDefaults(), arguments, [\n\t\t\t\"frequency\",\n\t\t\t\"delayTime\",\n\t\t\t\"depth\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis._depth = options.depth;\n\t\tthis._delayTime = options.delayTime / 1000;\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180,\n\t\t});\n\t\tthis._delayNodeL = new Delay({ context: this.context });\n\t\tthis._delayNodeR = new Delay({ context: this.context });\n\t\tthis.frequency = this._lfoL.frequency;\n\t\treadOnly(this, [\"frequency\"]);\n\t\t// have one LFO frequency control the other\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\n\t\t// connections\n\t\tthis.connectEffectLeft(this._delayNodeL);\n\t\tthis.connectEffectRight(this._delayNodeR);\n\t\t// lfo setup\n\t\tthis._lfoL.connect(this._delayNodeL.delayTime);\n\t\tthis._lfoR.connect(this._delayNodeR.delayTime);\n\t\t// set the initial values\n\t\tthis.depth = this._depth;\n\t\tthis.type = options.type;\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): ChorusOptions {\n\t\treturn Object.assign(StereoFeedbackEffect.getDefaults(), {\n\t\t\tfrequency: 1.5,\n\t\t\tdelayTime: 3.5,\n\t\t\tdepth: 0.7,\n\t\t\ttype: \"sine\" as const,\n\t\t\tspread: 180,\n\t\t\tfeedback: 0,\n\t\t\twet: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * The depth of the effect. A depth of 1 makes the delayTime\n\t * modulate between 0 and 2*delayTime (centered around the delayTime).\n\t */\n\tget depth(): NormalRange {\n\t\treturn this._depth;\n\t}\n\tset depth(depth) {\n\t\tthis._depth = depth;\n\t\tconst deviation = this._delayTime * depth;\n\t\tthis._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoL.max = this._delayTime + deviation;\n\t\tthis._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoR.max = this._delayTime + deviation;\n\t}\n\n\t/**\n\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t * will give a more pronounced effect. Nominal range a delayTime\n\t * is between 2 and 20ms.\n\t */\n\tget delayTime(): Milliseconds {\n\t\treturn this._delayTime * 1000;\n\t}\n\tset delayTime(delayTime) {\n\t\tthis._delayTime = delayTime / 1000;\n\t\tthis.depth = this._depth;\n\t}\n\n\t/**\n\t * The oscillator type of the LFO.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase;\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - spread / 2;\n\t\tthis._lfoR.phase = spread / 2 + 90;\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport.\n\t * @see {@link LFO.sync}\n\t */\n\tsync(): this {\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._delayNodeL.dispose();\n\t\tthis._delayNodeR.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}