{"ast":null,"code":"import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      try {\n        const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);\n        const patchedEventListeners = new Map();\n        let onprocessorerror = null;\n        Object.defineProperties(nativeAudioWorkletNode, {\n          /*\n           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n           * browsers have no native implementation to achieve a consistent behavior.\n           */\n          channelCount: {\n            get: () => options.channelCount,\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          channelCountMode: {\n            get: () => 'explicit',\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n          onprocessorerror: {\n            get: () => onprocessorerror,\n            set: value => {\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n              }\n              onprocessorerror = typeof value === 'function' ? value : null;\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n              }\n            }\n          }\n        });\n        nativeAudioWorkletNode.addEventListener = (addEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n              if (unpatchedEventListener !== null) {\n                const patchedEventListener = patchedEventListeners.get(args[1]);\n                if (patchedEventListener !== undefined) {\n                  args[1] = patchedEventListener;\n                } else {\n                  args[1] = event => {\n                    // Bug #178: Chrome and Edge do fire an event of type error.\n                    if (event.type === 'error') {\n                      Object.defineProperties(event, {\n                        type: {\n                          value: 'processorerror'\n                        }\n                      });\n                      unpatchedEventListener(event);\n                    } else {\n                      unpatchedEventListener(new ErrorEvent(args[0], {\n                        ...event\n                      }));\n                    }\n                  };\n                  patchedEventListeners.set(unpatchedEventListener, args[1]);\n                }\n              }\n            }\n            // Bug #178: Chrome and Edge do fire an event of type error.\n            addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n            return addEventListener.call(nativeAudioWorkletNode, ...args);\n          };\n        })(nativeAudioWorkletNode.addEventListener);\n        nativeAudioWorkletNode.removeEventListener = (removeEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const patchedEventListener = patchedEventListeners.get(args[1]);\n              if (patchedEventListener !== undefined) {\n                patchedEventListeners.delete(args[1]);\n                args[1] = patchedEventListener;\n              }\n            }\n            // Bug #178: Chrome and Edge do fire an event of type error.\n            removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.removeEventListener);\n        /*\n         * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n         * has an output.\n         */\n        if (options.numberOfOutputs !== 0) {\n          const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n          });\n          nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n          const whenConnected = () => nativeGainNode.disconnect();\n          const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination);\n          // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n        }\n        return nativeAudioWorkletNode;\n      } catch (err) {\n        // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.\n        if (err.code === 11) {\n          throw createNotSupportedError();\n        }\n        throw err;\n      }\n    }\n    // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.\n    if (processorConstructor === undefined) {\n      throw createNotSupportedError();\n    }\n    testClonabilityOfAudioWorkletNodeOptions(options);\n    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n  };\n};","map":{"version":3,"names":["testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","createInvalidStateError","createNativeAudioWorkletNodeFaker","createNativeGainNode","createNotSupportedError","monitorConnections","nativeContext","baseLatency","nativeAudioWorkletNodeConstructor","name","processorConstructor","options","nativeAudioWorkletNode","patchedEventListeners","Map","onprocessorerror","Object","defineProperties","channelCount","get","set","channelCountMode","value","removeEventListener","addEventListener","args","unpatchedEventListener","handleEvent","patchedEventListener","undefined","event","type","ErrorEvent","call","delete","numberOfOutputs","nativeGainNode","channelInterpretation","gain","connect","destination","whenConnected","disconnect","whenDisconnected","err","code"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/factories/native-audio-worklet-node-factory.ts"],"sourcesContent":["import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nimport { TNativeAudioWorkletNode, TNativeAudioWorkletNodeFactoryFactory, TNativeAudioWorkletNodeOptions } from '../types';\n\nexport const createNativeAudioWorkletNodeFactory: TNativeAudioWorkletNodeFactoryFactory = (\n    createInvalidStateError,\n    createNativeAudioWorkletNodeFaker,\n    createNativeGainNode,\n    createNotSupportedError,\n    monitorConnections\n) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(\n                    nativeContext,\n                    name,\n                    <TNativeAudioWorkletNodeOptions>options\n                );\n                const patchedEventListeners: Map<\n                    EventListenerOrEventListenerObject,\n                    NonNullable<TNativeAudioWorkletNode['onprocessorerror']>\n                > = new Map();\n\n                let onprocessorerror: TNativeAudioWorkletNode['onprocessorerror'] = null;\n\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n\n                            onprocessorerror = typeof value === 'function' ? value : null;\n\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args: [string, EventListenerOrEventListenerObject, (boolean | AddEventListenerOptions)?]): void => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener =\n                                typeof args[1] === 'function'\n                                    ? args[1]\n                                    : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'\n                                    ? args[1].handleEvent\n                                    : null;\n\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                } else {\n                                    args[1] = (event: Event) => {\n                                        // Bug #178: Chrome and Edge do fire an event of type error.\n                                        if (event.type === 'error') {\n                                            Object.defineProperties(event, {\n                                                type: { value: 'processorerror' }\n                                            });\n\n                                            unpatchedEventListener(event);\n                                        } else {\n                                            unpatchedEventListener(new ErrorEvent(args[0], { ...event }));\n                                        }\n                                    };\n\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n\n                        return addEventListener.call(nativeAudioWorkletNode, ...args);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args: any[]): void => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n\n                                args[1] = patchedEventListener;\n                            }\n                        }\n\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n\n                /*\n                 * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n                 * has an output.\n                 */\n                if (options.numberOfOutputs !== 0) {\n                    const nativeGainNode = createNativeGainNode(nativeContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        gain: 0\n                    });\n\n                    nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n\n                    const whenConnected = () => nativeGainNode.disconnect();\n                    const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination);\n\n                    // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n                    return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n                }\n\n                return nativeAudioWorkletNode;\n            } catch (err) {\n                // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n\n                throw err;\n            }\n        }\n\n        // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n\n        testClonabilityOfAudioWorkletNodeOptions(options);\n\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}