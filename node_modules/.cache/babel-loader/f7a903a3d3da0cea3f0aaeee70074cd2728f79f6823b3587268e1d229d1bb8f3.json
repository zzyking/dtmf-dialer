{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getContext } from \"../Global.js\";\nimport { Tone } from \"../Tone.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck.js\";\nimport { assert } from \"../util/Debug.js\";\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/audio/casio/A1.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffer\";\n    /**\n     * Callback when the buffer is loaded.\n     */\n    this.onload = noOp;\n    const options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n    this.reverse = options.reverse;\n    this.onload = options.onload;\n    if (isString(options.url)) {\n      // initiate the download\n      this.load(options.url).catch(options.onerror);\n    } else if (options.url) {\n      this.set(options.url);\n    }\n  }\n  static getDefaults() {\n    return {\n      onerror: noOp,\n      onload: noOp,\n      reverse: false\n    };\n  }\n  /**\n   * The sample rate of the AudioBuffer\n   */\n  get sampleRate() {\n    if (this._buffer) {\n      return this._buffer.sampleRate;\n    } else {\n      return getContext().sampleRate;\n    }\n  }\n  /**\n   * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n   */\n  set(buffer) {\n    if (buffer instanceof ToneAudioBuffer) {\n      // if it's loaded, set it\n      if (buffer.loaded) {\n        this._buffer = buffer.get();\n      } else {\n        // otherwise when it's loaded, invoke it's callback\n        buffer.onload = () => {\n          this.set(buffer);\n          this.onload(this);\n        };\n      }\n    } else {\n      this._buffer = buffer;\n    }\n    // reverse it initially\n    if (this._reversed) {\n      this._reverse();\n    }\n    return this;\n  }\n  /**\n   * The audio buffer stored in the object.\n   */\n  get() {\n    return this._buffer;\n  }\n  /**\n   * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n   * Invokes the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   * @returns A Promise which resolves with this ToneAudioBuffer\n   */\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const doneLoading = ToneAudioBuffer.load(url).then(audioBuffer => {\n        this.set(audioBuffer);\n        // invoke the onload method\n        this.onload(this);\n      });\n      ToneAudioBuffer.downloads.push(doneLoading);\n      try {\n        yield doneLoading;\n      } finally {\n        // remove the downloaded file\n        const index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n        ToneAudioBuffer.downloads.splice(index, 1);\n      }\n      return this;\n    });\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this._buffer = undefined;\n    return this;\n  }\n  /**\n   * Set the audio buffer from the array.\n   * To create a multichannel AudioBuffer, pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   */\n  fromArray(array) {\n    const isMultidimensional = isArray(array) && array[0].length > 0;\n    const channels = isMultidimensional ? array.length : 1;\n    const len = isMultidimensional ? array[0].length : array.length;\n    const context = getContext();\n    const buffer = context.createBuffer(channels, len, context.sampleRate);\n    const multiChannelArray = !isMultidimensional && channels === 1 ? [array] : array;\n    for (let c = 0; c < channels; c++) {\n      buffer.copyToChannel(multiChannelArray[c], c);\n    }\n    this._buffer = buffer;\n    return this;\n  }\n  /**\n   * Sums multiple channels into 1 channel\n   * @param chanNum Optionally only copy a single channel from the array.\n   */\n  toMono(chanNum) {\n    if (isNumber(chanNum)) {\n      this.fromArray(this.toArray(chanNum));\n    } else {\n      let outputArray = new Float32Array(this.length);\n      const numChannels = this.numberOfChannels;\n      for (let channel = 0; channel < numChannels; channel++) {\n        const channelArray = this.toArray(channel);\n        for (let i = 0; i < channelArray.length; i++) {\n          outputArray[i] += channelArray[i];\n        }\n      }\n      // divide by the number of channels\n      outputArray = outputArray.map(sample => sample / numChannels);\n      this.fromArray(outputArray);\n    }\n    return this;\n  }\n  /**\n   * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n   * Float32Array, and multichannel buffers will return multidimensional arrays.\n   * @param channel Optionally only copy a single channel from the array.\n   */\n  toArray(channel) {\n    if (isNumber(channel)) {\n      return this.getChannelData(channel);\n    } else if (this.numberOfChannels === 1) {\n      return this.toArray(0);\n    } else {\n      const ret = [];\n      for (let c = 0; c < this.numberOfChannels; c++) {\n        ret[c] = this.getChannelData(c);\n      }\n      return ret;\n    }\n  }\n  /**\n   * Returns the Float32Array representing the PCM audio data for the specific channel.\n   * @param  channel  The channel number to return\n   * @return The audio as a TypedArray\n   */\n  getChannelData(channel) {\n    if (this._buffer) {\n      return this._buffer.getChannelData(channel);\n    } else {\n      return new Float32Array(0);\n    }\n  }\n  /**\n   * Cut a subsection of the array and return a buffer of the\n   * subsection. Does not modify the original buffer\n   * @param start The time to start the slice\n   * @param end The end time to slice. If none is given will default to the end of the buffer\n   */\n  slice(start, end = this.duration) {\n    assert(this.loaded, \"Buffer is not loaded\");\n    const startSamples = Math.floor(start * this.sampleRate);\n    const endSamples = Math.floor(end * this.sampleRate);\n    assert(startSamples < endSamples, \"The start time must be less than the end time\");\n    const length = endSamples - startSamples;\n    const retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n    for (let channel = 0; channel < this.numberOfChannels; channel++) {\n      retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n    }\n    return new ToneAudioBuffer(retBuffer);\n  }\n  /**\n   * Reverse the buffer.\n   */\n  _reverse() {\n    if (this.loaded) {\n      for (let i = 0; i < this.numberOfChannels; i++) {\n        this.getChannelData(i).reverse();\n      }\n    }\n    return this;\n  }\n  /**\n   * If the buffer is loaded or not\n   */\n  get loaded() {\n    return this.length > 0;\n  }\n  /**\n   * The duration of the buffer in seconds.\n   */\n  get duration() {\n    if (this._buffer) {\n      return this._buffer.duration;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The length of the buffer in samples\n   */\n  get length() {\n    if (this._buffer) {\n      return this._buffer.length;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n   */\n  get numberOfChannels() {\n    if (this._buffer) {\n      return this._buffer.numberOfChannels;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Reverse the buffer.\n   */\n  get reverse() {\n    return this._reversed;\n  }\n  set reverse(rev) {\n    if (this._reversed !== rev) {\n      this._reversed = rev;\n      this._reverse();\n    }\n  }\n  /**\n   * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n   * pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   * @return A ToneAudioBuffer created from the array\n   */\n  static fromArray(array) {\n    return new ToneAudioBuffer().fromArray(array);\n  }\n  /**\n   * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n   * @param  url The url to load.\n   * @return A promise which resolves to a ToneAudioBuffer\n   */\n  static fromUrl(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const buffer = new ToneAudioBuffer();\n      return yield buffer.load(url);\n    });\n  }\n  /**\n   * Loads a url using fetch and returns the AudioBuffer.\n   */\n  static load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // test if the url contains multiple extensions\n      const matches = url.match(/\\[([^\\]\\[]+\\|.+)\\]$/);\n      if (matches) {\n        const extensions = matches[1].split(\"|\");\n        let extension = extensions[0];\n        for (const ext of extensions) {\n          if (ToneAudioBuffer.supportsType(ext)) {\n            extension = ext;\n            break;\n          }\n        }\n        url = url.replace(matches[0], extension);\n      }\n      // make sure there is a slash between the baseUrl and the url\n      const baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n      // encode special characters in file path\n      const location = document.createElement(\"a\");\n      location.href = baseUrl + url;\n      location.pathname = (location.pathname + location.hash).split(\"/\").map(encodeURIComponent).join(\"/\");\n      const response = yield fetch(location.href);\n      if (!response.ok) {\n        throw new Error(`could not load url: ${url}`);\n      }\n      const arrayBuffer = yield response.arrayBuffer();\n      const audioBuffer = yield getContext().decodeAudioData(arrayBuffer);\n      return audioBuffer;\n    });\n  }\n  /**\n   * Checks a url's extension to see if the current browser can play that file type.\n   * @param url The url/extension to test\n   * @return If the file extension can be played\n   * @static\n   * @example\n   * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n   * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n   */\n  static supportsType(url) {\n    const extensions = url.split(\".\");\n    const extension = extensions[extensions.length - 1];\n    const response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n    return response !== \"\";\n  }\n  /**\n   * Returns a Promise which resolves when all of the buffers have loaded\n   */\n  static loaded() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // this makes sure that the function is always async\n      yield Promise.resolve();\n      while (ToneAudioBuffer.downloads.length) {\n        yield ToneAudioBuffer.downloads[0];\n      }\n    });\n  }\n}\n//-------------------------------------\n// STATIC METHODS\n//-------------------------------------\n/**\n * A path which is prefixed before every url.\n */\nToneAudioBuffer.baseUrl = \"\";\n/**\n * All of the downloads\n */\nToneAudioBuffer.downloads = [];","map":{"version":3,"names":["getContext","Tone","optionsFromArguments","noOp","isArray","isNumber","isString","assert","ToneAudioBuffer","constructor","name","onload","options","getDefaults","arguments","reverse","url","load","catch","onerror","set","sampleRate","_buffer","buffer","loaded","get","_reversed","_reverse","doneLoading","then","audioBuffer","downloads","push","index","indexOf","splice","dispose","undefined","fromArray","array","isMultidimensional","length","channels","len","context","createBuffer","multiChannelArray","c","copyToChannel","toMono","chanNum","toArray","outputArray","Float32Array","numChannels","numberOfChannels","channel","channelArray","i","map","sample","getChannelData","ret","slice","start","end","duration","startSamples","Math","floor","endSamples","retBuffer","subarray","rev","fromUrl","matches","match","extensions","split","extension","ext","supportsType","replace","baseUrl","endsWith","location","document","createElement","href","pathname","hash","encodeURIComponent","join","response","fetch","ok","Error","arrayBuffer","decodeAudioData","canPlayType","Promise","resolve"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/context/ToneAudioBuffer.ts"],"sourcesContent":["import { getContext } from \"../Global.js\";\nimport { Tone } from \"../Tone.js\";\nimport { Samples, Seconds } from \"../type/Units.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck.js\";\nimport { assert } from \"../util/Debug.js\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/audio/casio/A1.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n\treadonly name: string = \"ToneAudioBuffer\";\n\n\t/**\n\t * stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t * indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\t/**\n\t *\n\t * @param url The url to load, or the audio buffer to set.\n\t * @param onload A callback which is invoked after the buffer is loaded.\n\t *                           It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n\t *                           since it will give you a callback when _all_ buffers are loaded.\n\t * @param onerror The callback to invoke if there is an error\n\t */\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void\n\t);\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffer.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"url\", \"onload\", \"onerror\"]\n\t\t);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t} else if (options.url) {\n\t\t\tthis.set(options.url);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * Invokes the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t * @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst doneLoading: Promise<void> = ToneAudioBuffer.load(url).then(\n\t\t\t(audioBuffer) => {\n\t\t\t\tthis.set(audioBuffer);\n\t\t\t\t// invoke the onload method\n\t\t\t\tthis.onload(this);\n\t\t\t}\n\t\t);\n\t\tToneAudioBuffer.downloads.push(doneLoading);\n\t\ttry {\n\t\t\tawait doneLoading;\n\t\t} finally {\n\t\t\t// remove the downloaded file\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional\n\t\t\t? (array[0] as Float32Array).length\n\t\t\t: array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] =\n\t\t\t!isMultidimensional && channels === 1\n\t\t\t\t? [array as Float32Array]\n\t\t\t\t: (array as Float32Array[]);\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sums multiple channels into 1 channel\n\t * @param chanNum Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map((sample) => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * Float32Array, and multichannel buffers will return multidimensional arrays.\n\t * @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Float32Array representing the PCM audio data for the specific channel.\n\t * @param  channel  The channel number to return\n\t * @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t * Cut a subsection of the array and return a buffer of the\n\t * subsection. Does not modify the original buffer\n\t * @param start The time to start the slice\n\t * @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tassert(this.loaded, \"Buffer is not loaded\");\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tassert(\n\t\t\tstartSamples < endSamples,\n\t\t\t\"The start time must be less than the end time\"\n\t\t);\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(\n\t\t\tthis.numberOfChannels,\n\t\t\tlength,\n\t\t\tthis.sampleRate\n\t\t);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(\n\t\t\t\tthis.getChannelData(channel).subarray(startSamples, endSamples),\n\t\t\t\tchannel\n\t\t\t);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// STATIC METHODS\n\t//-------------------------------------\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t * pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t * @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn new ToneAudioBuffer().fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<void>> = [];\n\n\t/**\n\t * Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[([^\\]\\[]+\\|.+)\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\t// make sure there is a slash between the baseUrl and the url\n\t\tconst baseUrl =\n\t\t\tToneAudioBuffer.baseUrl === \"\" ||\n\t\t\tToneAudioBuffer.baseUrl.endsWith(\"/\")\n\t\t\t\t? ToneAudioBuffer.baseUrl\n\t\t\t\t: ToneAudioBuffer.baseUrl + \"/\";\n\n\t\t// encode special characters in file path\n\t\tconst location = document.createElement(\"a\");\n\t\tlocation.href = baseUrl + url;\n\t\tlocation.pathname = (location.pathname + location.hash)\n\t\t\t.split(\"/\")\n\t\t\t.map(encodeURIComponent)\n\t\t\t.join(\"/\");\n\n\t\tconst response = await fetch(location.href);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t * Checks a url's extension to see if the current browser can play that file type.\n\t * @param url The url/extension to test\n\t * @return If the file extension can be played\n\t * @static\n\t * @example\n\t * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n\t * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document\n\t\t\t.createElement(\"audio\")\n\t\t\t.canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t * Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\t// this makes sure that the function is always async\n\t\tawait Promise.resolve();\n\t\twhile (ToneAudioBuffer.downloads.length) {\n\t\t\tawait ToneAudioBuffer.downloads[0];\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}