{"ast":null,"code":"import { Effect } from \"./Effect.js\";\nimport { Filter } from \"../component/filter/Filter.js\";\nimport { Follower } from \"../component/analysis/Follower.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions.js\";\nimport { ScaleExp } from \"../signal/ScaleExp.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * AutoWah connects a {@link Follower} to a {@link Filter}.\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect {\n  constructor() {\n    const options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    super(options);\n    this.name = \"AutoWah\";\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.follower\n    });\n    this._sweepRange = new ScaleExp({\n      context: this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this._inputBoost = new Gain({\n      context: this.context\n    });\n    this._bandpass = new Filter({\n      context: this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    this._peaking = new Filter({\n      context: this.context,\n      type: \"peaking\"\n    });\n    this._peaking.gain.value = options.gain;\n    this.gain = this._peaking.gain;\n    this.Q = this._bandpass.Q;\n    // the control signal path\n    this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n    this._sweepRange.connect(this._bandpass.frequency);\n    this._sweepRange.connect(this._peaking.frequency);\n    // the filtered path\n    this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n    // set the initial value\n    this._setSweepRange();\n    this.sensitivity = options.sensitivity;\n    readOnly(this, [\"gain\", \"Q\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      baseFrequency: 100,\n      octaves: 6,\n      sensitivity: 0,\n      Q: 2,\n      gain: 2,\n      follower: 0.2\n    });\n  }\n  /**\n   * The number of octaves that the filter will sweep above the baseFrequency.\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(octaves) {\n    this._octaves = octaves;\n    this._setSweepRange();\n  }\n  /**\n   * The follower's smoothing time\n   */\n  get follower() {\n    return this._follower.smoothing;\n  }\n  set follower(follower) {\n    this._follower.smoothing = follower;\n  }\n  /**\n   * The base frequency from which the sweep will start from.\n   */\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n  set baseFrequency(baseFreq) {\n    this._baseFrequency = this.toFrequency(baseFreq);\n    this._setSweepRange();\n  }\n  /**\n   * The sensitivity to control how responsive to the input signal the filter is.\n   */\n  get sensitivity() {\n    return gainToDb(1 / this._inputBoost.gain.value);\n  }\n  set sensitivity(sensitivity) {\n    this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n  }\n  /**\n   * sets the sweep range of the scaler\n   */\n  _setSweepRange() {\n    this._sweepRange.min = this._baseFrequency;\n    this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n  }\n  dispose() {\n    super.dispose();\n    this._follower.dispose();\n    this._sweepRange.dispose();\n    this._bandpass.dispose();\n    this._peaking.dispose();\n    this._inputBoost.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Effect","Filter","Follower","optionsFromArguments","Gain","dbToGain","gainToDb","ScaleExp","readOnly","AutoWah","constructor","options","getDefaults","arguments","name","_follower","context","smoothing","follower","_sweepRange","min","max","exponent","_baseFrequency","toFrequency","baseFrequency","_octaves","octaves","_inputBoost","_bandpass","rolloff","frequency","Q","_peaking","type","gain","value","effectSend","chain","connect","effectReturn","_setSweepRange","sensitivity","Object","assign","baseFreq","Math","pow","sampleRate","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/effect/AutoWah.ts"],"sourcesContent":["import { Effect, EffectOptions } from \"./Effect.js\";\nimport { Filter } from \"../component/filter/Filter.js\";\nimport { Follower } from \"../component/analysis/Follower.js\";\nimport {\n\tDecibels,\n\tFrequency,\n\tGainFactor,\n\tHertz,\n\tPositive,\n\tTime,\n} from \"../core/type/Units.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions.js\";\nimport { ScaleExp } from \"../signal/ScaleExp.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n\nexport interface AutoWahOptions extends EffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tsensitivity: Decibels;\n\tQ: Positive;\n\tgain: GainFactor;\n\tfollower: Time;\n}\n\n/**\n * AutoWah connects a {@link Follower} to a {@link Filter}.\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect<AutoWahOptions> {\n\treadonly name: string = \"AutoWah\";\n\n\t/**\n\t * The envelope follower. Set the attack/release\n\t * timing to adjust how the envelope is followed.\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * scales the follower value to the frequency domain\n\t */\n\tprivate _sweepRange: ScaleExp;\n\n\t/**\n\t * Hold the base frequency value\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * Private holder for the octave count\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * the input gain to adjust the sensitivity\n\t */\n\tprivate _inputBoost: Gain;\n\n\t/**\n\t * Private holder for the filter\n\t */\n\tprivate _bandpass: Filter;\n\n\t/**\n\t * The peaking fitler\n\t */\n\tprivate _peaking: Filter;\n\n\t/**\n\t * The gain of the filter.\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * The quality of the filter.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param baseFrequency The frequency the filter is set to at the low point of the wah\n\t * @param octaves The number of octaves above the baseFrequency the filter will sweep to when fully open.\n\t * @param sensitivity The decibel threshold sensitivity for the incoming signal. Normal range of -40 to 0.\n\t */\n\tconstructor(\n\t\tbaseFrequency?: Frequency,\n\t\toctaves?: Positive,\n\t\tsensitivity?: Decibels\n\t);\n\tconstructor(options?: Partial<AutoWahOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\n\t\t\t\"baseFrequency\",\n\t\t\t\"octaves\",\n\t\t\t\"sensitivity\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.follower,\n\t\t});\n\t\tthis._sweepRange = new ScaleExp({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\texponent: 0.5,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis._inputBoost = new Gain({ context: this.context });\n\t\tthis._bandpass = new Filter({\n\t\t\tcontext: this.context,\n\t\t\trolloff: -48,\n\t\t\tfrequency: 0,\n\t\t\tQ: options.Q,\n\t\t});\n\t\tthis._peaking = new Filter({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"peaking\",\n\t\t});\n\t\tthis._peaking.gain.value = options.gain;\n\t\tthis.gain = this._peaking.gain;\n\t\tthis.Q = this._bandpass.Q;\n\n\t\t// the control signal path\n\t\tthis.effectSend.chain(\n\t\t\tthis._inputBoost,\n\t\t\tthis._follower,\n\t\t\tthis._sweepRange\n\t\t);\n\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t// the filtered path\n\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t// set the initial value\n\t\tthis._setSweepRange();\n\t\tthis.sensitivity = options.sensitivity;\n\n\t\treadOnly(this, [\"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): AutoWahOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbaseFrequency: 100,\n\t\t\toctaves: 6,\n\t\t\tsensitivity: 0,\n\t\t\tQ: 2,\n\t\t\tgain: 2,\n\t\t\tfollower: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * The number of octaves that the filter will sweep above the baseFrequency.\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The follower's smoothing time\n\t */\n\tget follower(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset follower(follower) {\n\t\tthis._follower.smoothing = follower;\n\t}\n\n\t/**\n\t * The base frequency from which the sweep will start from.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(baseFreq) {\n\t\tthis._baseFrequency = this.toFrequency(baseFreq);\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The sensitivity to control how responsive to the input signal the filter is.\n\t */\n\tget sensitivity(): Decibels {\n\t\treturn gainToDb(1 / this._inputBoost.gain.value);\n\t}\n\tset sensitivity(sensitivity) {\n\t\tthis._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n\t}\n\n\t/**\n\t * sets the sweep range of the scaler\n\t */\n\tprivate _setSweepRange() {\n\t\tthis._sweepRange.min = this._baseFrequency;\n\t\tthis._sweepRange.max = Math.min(\n\t\t\tthis._baseFrequency * Math.pow(2, this._octaves),\n\t\t\tthis.context.sampleRate / 2\n\t\t);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._sweepRange.dispose();\n\t\tthis._bandpass.dispose();\n\t\tthis._peaking.dispose();\n\t\tthis._inputBoost.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}