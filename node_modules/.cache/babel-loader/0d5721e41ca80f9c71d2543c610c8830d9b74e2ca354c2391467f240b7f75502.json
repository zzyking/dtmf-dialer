{"ast":null,"code":"import { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    super(options);\n    this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n    this._compressor = this.context.createDynamicsCompressor();\n    this.input = this._compressor;\n    this.output = this._compressor;\n    this.threshold = new Param({\n      minValue: this._compressor.threshold.minValue,\n      maxValue: this._compressor.threshold.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    this.attack = new Param({\n      minValue: this._compressor.attack.minValue,\n      maxValue: this._compressor.attack.maxValue,\n      context: this.context,\n      param: this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    this.release = new Param({\n      minValue: this._compressor.release.minValue,\n      maxValue: this._compressor.release.maxValue,\n      context: this.context,\n      param: this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    this.knee = new Param({\n      minValue: this._compressor.knee.minValue,\n      maxValue: this._compressor.knee.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    this.ratio = new Param({\n      minValue: this._compressor.ratio.minValue,\n      maxValue: this._compressor.ratio.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    });\n    // set the defaults\n    readOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.003,\n      knee: 30,\n      ratio: 12,\n      release: 0.25,\n      threshold: -24\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n   */\n  get reduction() {\n    return this._compressor.reduction;\n  }\n  dispose() {\n    super.dispose();\n    this._compressor.disconnect();\n    this.attack.dispose();\n    this.release.dispose();\n    this.threshold.dispose();\n    this.ratio.dispose();\n    this.knee.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Param","ToneAudioNode","optionsFromArguments","readOnly","Compressor","constructor","options","getDefaults","arguments","name","_compressor","context","createDynamicsCompressor","input","output","threshold","minValue","maxValue","convert","param","units","value","attack","release","knee","ratio","Object","assign","reduction","dispose","disconnect"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/dynamics/Compressor.ts"],"sourcesContent":["import { Param } from \"../../core/context/Param.js\";\nimport {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n\nexport interface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\treadonly name: string = \"Compressor\";\n\n\t/**\n\t * the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode =\n\t\tthis.context.createDynamicsCompressor();\n\treadonly input = this._compressor;\n\treadonly output = this._compressor;\n\n\t/**\n\t * The decibel value above which the compression will start taking effect.\n\t * @min -100\n\t * @max 0\n\t */\n\treadonly threshold: Param<\"decibels\">;\n\n\t/**\n\t * The amount of time (in seconds) to reduce the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly attack: Param<\"time\">;\n\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly release: Param<\"time\">;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t * @min 0\n\t * @max 40\n\t */\n\treadonly knee: Param<\"decibels\">;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t * @min 1\n\t * @max 20\n\t */\n\treadonly ratio: Param<\"positive\">;\n\n\t/**\n\t * @param threshold The value above which the compression starts to be applied.\n\t * @param ratio The gain reduction ratio.\n\t */\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tCompressor.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"threshold\", \"ratio\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis.threshold = new Param({\n\t\t\tminValue: this._compressor.threshold.minValue,\n\t\t\tmaxValue: this._compressor.threshold.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.threshold,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\n\t\tthis.attack = new Param({\n\t\t\tminValue: this._compressor.attack.minValue,\n\t\t\tmaxValue: this._compressor.attack.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\n\t\tthis.release = new Param({\n\t\t\tminValue: this._compressor.release.minValue,\n\t\t\tmaxValue: this._compressor.release.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\n\t\tthis.knee = new Param({\n\t\t\tminValue: this._compressor.knee.minValue,\n\t\t\tmaxValue: this._compressor.knee.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.knee,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\n\t\tthis.ratio = new Param({\n\t\t\tminValue: this._compressor.ratio.minValue,\n\t\t\tmaxValue: this._compressor.ratio.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.ratio,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.003,\n\t\t\tknee: 30,\n\t\t\tratio: 12,\n\t\t\trelease: 0.25,\n\t\t\tthreshold: -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}