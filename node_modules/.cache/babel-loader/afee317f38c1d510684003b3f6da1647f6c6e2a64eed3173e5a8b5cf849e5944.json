{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { noOp } from \"../../core/util/Interface.js\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    super(options);\n    this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n    this._convolver = this.context.createConvolver();\n    this._buffer = new ToneAudioBuffer(options.url, buffer => {\n      this.buffer = buffer;\n      options.onload();\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    // set if it's already loaded, set it immediately\n    if (this._buffer.loaded) {\n      this.buffer = this._buffer;\n    }\n    // initially set normalization\n    this.normalize = options.normalize;\n    // connect it up\n    this.input.chain(this._convolver, this.output);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalize: true,\n      onload: noOp\n    });\n  }\n  /**\n   * Load an impulse response url as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   */\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.buffer = yield this._buffer.load(url);\n    });\n  }\n  /**\n   * The convolver's buffer\n   */\n  get buffer() {\n    if (this._buffer.length) {\n      return this._buffer;\n    } else {\n      return null;\n    }\n  }\n  set buffer(buffer) {\n    if (buffer) {\n      this._buffer.set(buffer);\n    }\n    // if it's already got a buffer, create a new one\n    if (this._convolver.buffer) {\n      // disconnect the old one\n      this.input.disconnect();\n      this._convolver.disconnect();\n      // create and connect a new one\n      this._convolver = this.context.createConvolver();\n      this.input.chain(this._convolver, this.output);\n    }\n    const buff = this._buffer.get();\n    this._convolver.buffer = buff ? buff : null;\n  }\n  /**\n   * The normalize property of the ConvolverNode interface is a boolean that\n   * controls whether the impulse response from the buffer will be scaled by\n   * an equal-power normalization when the buffer attribute is set, or not.\n   */\n  get normalize() {\n    return this._convolver.normalize;\n  }\n  set normalize(norm) {\n    this._convolver.normalize = norm;\n  }\n  dispose() {\n    super.dispose();\n    this._buffer.dispose();\n    this._convolver.disconnect();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","ToneAudioBuffer","optionsFromArguments","Gain","noOp","Convolver","constructor","options","getDefaults","arguments","name","_convolver","context","createConvolver","_buffer","url","buffer","onload","input","output","loaded","normalize","chain","Object","assign","load","length","set","disconnect","buff","get","norm","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/filter/Convolver.ts"],"sourcesContent":["import {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { noOp } from \"../../core/util/Interface.js\";\n\nexport interface ConvolverOptions extends ToneAudioNodeOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode<ConvolverOptions> {\n\treadonly name: string = \"Convolver\";\n\n\t/**\n\t * The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param url The URL of the impulse response or the ToneAudioBuffer containing the impulse response.\n\t * @param onload The callback to invoke when the url is loaded.\n\t */\n\tconstructor(\n\t\turl?: string | AudioBuffer | ToneAudioBuffer,\n\t\tonload?: () => void\n\t);\n\tconstructor(options?: Partial<ConvolverOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tConvolver.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"url\", \"onload\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, (buffer) => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\t// set if it's already loaded, set it immediately\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.input.chain(this._convolver, this.output);\n\t}\n\n\tstatic getDefaults(): ConvolverOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalize: true,\n\t\t\tonload: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t * The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.input.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.input.chain(this._convolver, this.output);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}