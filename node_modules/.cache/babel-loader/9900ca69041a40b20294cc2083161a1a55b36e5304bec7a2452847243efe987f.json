{"ast":null,"code":"import { assertRange } from \"./Debug.js\";\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min, max = Infinity) {\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(newValue, min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min, max = Infinity) {\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(this.toSeconds(newValue), min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}","map":{"version":3,"names":["assertRange","range","min","max","Infinity","valueMap","WeakMap","target","propertyKey","Reflect","defineProperty","configurable","enumerable","get","set","newValue","timeRange","toSeconds"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/util/Decorator.ts"],"sourcesContent":["import { assertRange } from \"./Debug.js\";\nimport { Time } from \"../type/Units.js\";\n\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, number> = new WeakMap();\n\treturn function (target: any, propertyKey: string | symbol) {\n\t\tReflect.defineProperty(target, propertyKey, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn valueMap.get(this);\n\t\t\t},\n\t\t\tset: function (newValue: number) {\n\t\t\t\tassertRange(newValue, min, max);\n\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t},\n\t\t});\n\t};\n}\n\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, Time> = new WeakMap();\n\treturn function (target: any, propertyKey: string) {\n\t\tReflect.defineProperty(target, propertyKey, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn valueMap.get(this);\n\t\t\t},\n\t\t\tset: function (newValue: Time) {\n\t\t\t\tassertRange(this.toSeconds(newValue), min, max);\n\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t},\n\t\t});\n\t};\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,YAAY;AAGxC;;;AAGA,OAAM,SAAUC,KAAKA,CAACC,GAAW,EAAEC,GAAG,GAAGC,QAAQ;EAChD,MAAMC,QAAQ,GAAyB,IAAIC,OAAO,EAAE;EACpD,OAAO,UAAUC,MAAW,EAAEC,WAA4B;IACzDC,OAAO,CAACC,cAAc,CAACH,MAAM,EAAEC,WAAW,EAAE;MAC3CG,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAE,IAAI;MAChBC,GAAG,EAAE,SAAAA,CAAA;QACJ,OAAOR,QAAQ,CAACQ,GAAG,CAAC,IAAI,CAAC;MAC1B,CAAC;MACDC,GAAG,EAAE,SAAAA,CAAUC,QAAgB;QAC9Bf,WAAW,CAACe,QAAQ,EAAEb,GAAG,EAAEC,GAAG,CAAC;QAC/BE,QAAQ,CAACS,GAAG,CAAC,IAAI,EAAEC,QAAQ,CAAC;MAC7B;KACA,CAAC;EACH,CAAC;AACF;AAEA;;;;AAIA,OAAM,SAAUC,SAASA,CAACd,GAAW,EAAEC,GAAG,GAAGC,QAAQ;EACpD,MAAMC,QAAQ,GAAuB,IAAIC,OAAO,EAAE;EAClD,OAAO,UAAUC,MAAW,EAAEC,WAAmB;IAChDC,OAAO,CAACC,cAAc,CAACH,MAAM,EAAEC,WAAW,EAAE;MAC3CG,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAE,IAAI;MAChBC,GAAG,EAAE,SAAAA,CAAA;QACJ,OAAOR,QAAQ,CAACQ,GAAG,CAAC,IAAI,CAAC;MAC1B,CAAC;MACDC,GAAG,EAAE,SAAAA,CAAUC,QAAc;QAC5Bf,WAAW,CAAC,IAAI,CAACiB,SAAS,CAACF,QAAQ,CAAC,EAAEb,GAAG,EAAEC,GAAG,CAAC;QAC/CE,QAAQ,CAACS,GAAG,CAAC,IAAI,EAAEC,QAAQ,CAAC;MAC7B;KACA,CAAC;EACH,CAAC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}