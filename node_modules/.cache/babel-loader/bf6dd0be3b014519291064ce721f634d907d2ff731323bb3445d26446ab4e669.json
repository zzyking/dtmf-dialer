{"ast":null,"code":"import { Volume } from \"../../component/channel/Volume.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization.js\";\nimport { Gain } from \"./Gain.js\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode.js\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class DestinationClass extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(DestinationClass.getDefaults(), arguments);\n    super(options);\n    this.name = \"Destination\";\n    this.input = new Volume({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination();\n     * osc.start();\n     * // ramp the volume down to silent over 10 seconds\n     * Tone.getDestination().volume.rampTo(-Infinity, 10);\n     */\n    this.volume = this.input.volume;\n    connectSeries(this.input, this.output, this.context.rawContext.destination);\n    this.mute = options.mute;\n    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const oscillator = new Tone.Oscillator().start().toDestination();\n   * setTimeout(() => {\n   * \t// mute the output\n   * \tTone.Destination.mute = true;\n   * }, 1000);\n   */\n  get mute() {\n    return this.input.mute;\n  }\n  set mute(mute) {\n    this.input.mute = mute;\n  }\n  /**\n   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n   * chained in the master effects chain.\n   * @param args All arguments will be connected in a row and the Master will be routed through it.\n   * @example\n   * // route all audio through a filter and compressor\n   * const lowpass = new Tone.Filter(800, \"lowpass\");\n   * const compressor = new Tone.Compressor(-18);\n   * Tone.Destination.chain(lowpass, compressor);\n   */\n  chain(...args) {\n    this.input.disconnect();\n    args.unshift(this.input);\n    args.push(this.output);\n    connectSeries(...args);\n    return this;\n  }\n  /**\n   * The maximum number of channels the system can output\n   * @example\n   * console.log(Tone.Destination.maxChannelCount);\n   */\n  get maxChannelCount() {\n    return this.context.rawContext.destination.maxChannelCount;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.destination = new DestinationClass({\n    context\n  });\n});\nonContextClose(context => {\n  context.destination.dispose();\n});","map":{"version":3,"names":["Volume","optionsFromArguments","onContextClose","onContextInit","Gain","connectSeries","ToneAudioNode","DestinationClass","constructor","options","getDefaults","arguments","name","input","context","output","volume","rawContext","destination","mute","_internalChannels","Object","assign","chain","args","disconnect","unshift","push","maxChannelCount","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/context/Destination.ts"],"sourcesContent":["import { Volume } from \"../../component/channel/Volume.js\";\nimport { Decibels } from \"../type/Units.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization.js\";\nimport { Gain } from \"./Gain.js\";\nimport { Param } from \"./Param.js\";\nimport {\n\tconnectSeries,\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"./ToneAudioNode.js\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class DestinationClass extends ToneAudioNode<DestinationOptions> {\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * osc.start();\n\t * // ramp the volume down to silent over 10 seconds\n\t * Tone.getDestination().volume.rampTo(-Infinity, 10);\n\t */\n\tvolume: Param<\"decibels\"> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tDestinationClass.getDefaults(),\n\t\t\targuments\n\t\t);\n\t\tsuper(options);\n\n\t\tconnectSeries(\n\t\t\tthis.input,\n\t\t\tthis.output,\n\t\t\tthis.context.rawContext.destination\n\t\t);\n\n\t\tthis.mute = options.mute;\n\t\tthis._internalChannels = [\n\t\t\tthis.input,\n\t\t\tthis.context.rawContext.destination,\n\t\t\tthis.output,\n\t\t];\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const oscillator = new Tone.Oscillator().start().toDestination();\n\t * setTimeout(() => {\n\t * \t// mute the output\n\t * \tTone.Destination.mute = true;\n\t * }, 1000);\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param args All arguments will be connected in a row and the Master will be routed through it.\n\t * @example\n\t * // route all audio through a filter and compressor\n\t * const lowpass = new Tone.Filter(800, \"lowpass\");\n\t * const compressor = new Tone.Compressor(-18);\n\t * Tone.Destination.chain(lowpass, compressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The maximum number of channels the system can output\n\t * @example\n\t * console.log(Tone.Destination.maxChannelCount);\n\t */\n\tget maxChannelCount(): number {\n\t\treturn this.context.rawContext.destination.maxChannelCount;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit((context) => {\n\tcontext.destination = new DestinationClass({ context });\n});\n\nonContextClose((context) => {\n\tcontext.destination.dispose();\n});\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,mCAAmC;AAE1D,SAASC,oBAAoB,QAAQ,qBAAqB;AAC1D,SAASC,cAAc,EAAEC,aAAa,QAAQ,4BAA4B;AAC1E,SAASC,IAAI,QAAQ,WAAW;AAEhC,SACCC,aAAa,EACbC,aAAa,QAEP,oBAAoB;AAO3B;;;;;;;;;;;;;;;AAeA,OAAM,MAAOC,gBAAiB,SAAQD,aAAiC;EAiBtEE,YAAA;IACC,MAAMC,OAAO,GAAGR,oBAAoB,CACnCM,gBAAgB,CAACG,WAAW,EAAE,EAC9BC,SAAS,CACT;IACD,KAAK,CAACF,OAAO,CAAC;IArBN,KAAAG,IAAI,GAAW,aAAa;IAErC,KAAAC,KAAK,GAAW,IAAIb,MAAM,CAAC;MAAEc,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IACrD,KAAAC,MAAM,GAAS,IAAIX,IAAI,CAAC;MAAEU,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAElD;;;;;;;;IAQA,KAAAE,MAAM,GAAsB,IAAI,CAACH,KAAK,CAACG,MAAM;IAU5CX,aAAa,CACZ,IAAI,CAACQ,KAAK,EACV,IAAI,CAACE,MAAM,EACX,IAAI,CAACD,OAAO,CAACG,UAAU,CAACC,WAAW,CACnC;IAED,IAAI,CAACC,IAAI,GAAGV,OAAO,CAACU,IAAI;IACxB,IAAI,CAACC,iBAAiB,GAAG,CACxB,IAAI,CAACP,KAAK,EACV,IAAI,CAACC,OAAO,CAACG,UAAU,CAACC,WAAW,EACnC,IAAI,CAACH,MAAM,CACX;EACF;EAEA,OAAOL,WAAWA,CAAA;IACjB,OAAOW,MAAM,CAACC,MAAM,CAAChB,aAAa,CAACI,WAAW,EAAE,EAAE;MACjDS,IAAI,EAAE,KAAK;MACXH,MAAM,EAAE;KACR,CAAC;EACH;EAEA;;;;;;;;;EASA,IAAIG,IAAIA,CAAA;IACP,OAAO,IAAI,CAACN,KAAK,CAACM,IAAI;EACvB;EACA,IAAIA,IAAIA,CAACA,IAAa;IACrB,IAAI,CAACN,KAAK,CAACM,IAAI,GAAGA,IAAI;EACvB;EAEA;;;;;;;;;;EAUAI,KAAKA,CAAC,GAAGC,IAAsC;IAC9C,IAAI,CAACX,KAAK,CAACY,UAAU,EAAE;IACvBD,IAAI,CAACE,OAAO,CAAC,IAAI,CAACb,KAAK,CAAC;IACxBW,IAAI,CAACG,IAAI,CAAC,IAAI,CAACZ,MAAM,CAAC;IACtBV,aAAa,CAAC,GAAGmB,IAAI,CAAC;IACtB,OAAO,IAAI;EACZ;EAEA;;;;;EAKA,IAAII,eAAeA,CAAA;IAClB,OAAO,IAAI,CAACd,OAAO,CAACG,UAAU,CAACC,WAAW,CAACU,eAAe;EAC3D;EAEA;;;EAGAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACb,MAAM,CAACa,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ;;AAGD;AACA;AACA;AAEA1B,aAAa,CAAEW,OAAO,IAAI;EACzBA,OAAO,CAACI,WAAW,GAAG,IAAIX,gBAAgB,CAAC;IAAEO;EAAO,CAAE,CAAC;AACxD,CAAC,CAAC;AAEFZ,cAAc,CAAEY,OAAO,IAAI;EAC1BA,OAAO,CAACI,WAAW,CAACW,OAAO,EAAE;AAC9B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}