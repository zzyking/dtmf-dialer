{"ast":null,"code":"import { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Envelope } from \"./Envelope.js\";\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n  constructor() {\n    super(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"AmplitudeEnvelope\";\n    this._gainNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    this.output = this._gainNode;\n    this.input = this._gainNode;\n    this._sig.connect(this._gainNode.gain);\n    this.output = this._gainNode;\n    this.input = this._gainNode;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this._gainNode.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","optionsFromArguments","Envelope","AmplitudeEnvelope","constructor","getDefaults","arguments","name","_gainNode","context","gain","output","input","_sig","connect","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/envelope/AmplitudeEnvelope.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain.js\";\nimport { NormalRange, Time } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope.js\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n\treadonly name: string = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(\n\t\tattack?: Time,\n\t\tdecay?: Time,\n\t\tsustain?: NormalRange,\n\t\trelease?: Time\n\t);\n\tconstructor(options?: Partial<EnvelopeOptions>);\n\tconstructor() {\n\t\tsuper(\n\t\t\toptionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\n\t\t\t\t\"attack\",\n\t\t\t\t\"decay\",\n\t\t\t\t\"sustain\",\n\t\t\t\t\"release\",\n\t\t\t])\n\t\t);\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,4BAA4B;AAEjD,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,QAAQ,QAAyB,eAAe;AAEzD;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,MAAOC,iBAAkB,SAAQD,QAAQ;EA0B9CE,YAAA;IACC,KAAK,CACJH,oBAAoB,CAACE,iBAAiB,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAChE,QAAQ,EACR,OAAO,EACP,SAAS,EACT,SAAS,CACT,CAAC,CACF;IAjCO,KAAAC,IAAI,GAAW,mBAAmB;IAEnC,KAAAC,SAAS,GAAS,IAAIR,IAAI,CAAC;MAClCS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,IAAI,EAAE;KACN,CAAC;IACF,KAAAC,MAAM,GAAS,IAAI,CAACH,SAAS;IAC7B,KAAAI,KAAK,GAAS,IAAI,CAACJ,SAAS;IA2B3B,IAAI,CAACK,IAAI,CAACC,OAAO,CAAC,IAAI,CAACN,SAAS,CAACE,IAAI,CAAC;IACtC,IAAI,CAACC,MAAM,GAAG,IAAI,CAACH,SAAS;IAC5B,IAAI,CAACI,KAAK,GAAG,IAAI,CAACJ,SAAS;EAC5B;EAEA;;;EAGAO,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACP,SAAS,CAACO,OAAO,EAAE;IACxB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}