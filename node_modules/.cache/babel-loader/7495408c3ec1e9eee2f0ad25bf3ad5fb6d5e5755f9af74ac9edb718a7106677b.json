{"ast":null,"code":"import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly, writable } from \"../../core/util/Interface.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Filter } from \"../filter/Filter.js\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    super(options);\n    this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n    this.output = undefined;\n    /**\n     * The low band.\n     */\n    this.low = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n    this._lowMidFilter = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n    this.mid = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n    this.high = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    this._internalChannels = [this.low, this.mid, this.high];\n    this.lowFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    this.highFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.input.fan(this.low, this.high);\n    this.input.chain(this._lowMidFilter, this.mid);\n    // the frequency control signal\n    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n    this.highFrequency.fan(this.mid.frequency, this.high.frequency);\n    // the Q value\n    this.Q.connect(this.low.Q);\n    this.Q.connect(this._lowMidFilter.Q);\n    this.Q.connect(this.mid.Q);\n    this.Q.connect(this.high.Q);\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      highFrequency: 2500,\n      lowFrequency: 400\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    this.low.dispose();\n    this._lowMidFilter.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this.Q.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","Signal","Filter","MultibandSplit","constructor","options","getDefaults","arguments","name","input","context","output","undefined","low","frequency","type","_lowMidFilter","mid","high","_internalChannels","lowFrequency","units","value","highFrequency","Q","fan","chain","connect","Object","assign","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/channel/MultibandSplit.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain.js\";\nimport {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { Frequency, Positive } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly, writable } from \"../../core/util/Interface.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Filter } from \"../filter/Filter.js\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\treadonly name: string = \"MultibandSplit\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t * The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param lowFrequency the low/mid crossover frequency\n\t * @param highFrequency the mid/high crossover frequency\n\t */\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tMultibandSplit.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"lowFrequency\", \"highFrequency\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}