{"ast":null,"code":"import { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { CrossFade } from \"../component/channel/CrossFade.js\";\nimport { Split } from \"../component/channel/Split.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { Merge } from \"../component/channel/Merge.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"StereoEffect\";\n    this.input = new Gain({\n      context: this.context\n    });\n    // force mono sources to be stereo\n    this.input.channelCount = 2;\n    this.input.channelCountMode = \"explicit\";\n    this._dryWet = this.output = new CrossFade({\n      context: this.context,\n      fade: options.wet\n    });\n    this.wet = this._dryWet.fade;\n    this._split = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._merge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n    // connections\n    this.input.connect(this._split);\n    // dry wet connections\n    this.input.connect(this._dryWet.a);\n    this._merge.connect(this._dryWet.b);\n    readOnly(this, [\"wet\"]);\n  }\n  /**\n   * Connect the left part of the effect\n   */\n  connectEffectLeft(...nodes) {\n    this._split.connect(nodes[0], 0, 0);\n    connectSeries(...nodes);\n    connect(nodes[nodes.length - 1], this._merge, 0, 0);\n  }\n  /**\n   * Connect the right part of the effect\n   */\n  connectEffectRight(...nodes) {\n    this._split.connect(nodes[0], 1, 0);\n    connectSeries(...nodes);\n    connect(nodes[nodes.length - 1], this._merge, 0, 1);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._dryWet.dispose();\n    this._split.dispose();\n    this._merge.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["connect","connectSeries","ToneAudioNode","CrossFade","Split","Gain","Merge","readOnly","StereoEffect","constructor","options","name","input","context","channelCount","channelCountMode","_dryWet","output","fade","wet","_split","channels","_merge","a","b","connectEffectLeft","nodes","length","connectEffectRight","getDefaults","Object","assign","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/effect/StereoEffect.ts"],"sourcesContent":["import { EffectOptions } from \"./Effect.js\";\nimport {\n\tconnect,\n\tconnectSeries,\n\tOutputNode,\n\tToneAudioNode,\n} from \"../core/context/ToneAudioNode.js\";\nimport { CrossFade } from \"../component/channel/CrossFade.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { Split } from \"../component/channel/Split.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { Merge } from \"../component/channel/Merge.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n\nexport type StereoEffectOptions = EffectOptions;\n\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect<\n\tOptions extends StereoEffectOptions,\n> extends ToneAudioNode<Options> {\n\treadonly name: string = \"StereoEffect\";\n\n\treadonly input: Gain;\n\treadonly output: CrossFade;\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade;\n\n\t/**\n\t * The wet control, i.e. how much of the effected\n\t * will pass through to the output.\n\t */\n\treadonly wet: Signal<\"normalRange\">;\n\n\t/**\n\t * Split it\n\t */\n\tprotected _split: Split;\n\n\t/**\n\t * the stereo effect merger\n\t */\n\tprotected _merge: Merge;\n\n\tconstructor(options: StereoEffectOptions) {\n\t\tsuper(options);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\t// force mono sources to be stereo\n\t\tthis.input.channelCount = 2;\n\t\tthis.input.channelCountMode = \"explicit\";\n\n\t\tthis._dryWet = this.output = new CrossFade({\n\t\t\tcontext: this.context,\n\t\t\tfade: options.wet,\n\t\t});\n\t\tthis.wet = this._dryWet.fade;\n\t\tthis._split = new Split({ context: this.context, channels: 2 });\n\t\tthis._merge = new Merge({ context: this.context, channels: 2 });\n\n\t\t// connections\n\t\tthis.input.connect(this._split);\n\t\t// dry wet connections\n\t\tthis.input.connect(this._dryWet.a);\n\t\tthis._merge.connect(this._dryWet.b);\n\t\treadOnly(this, [\"wet\"]);\n\t}\n\n\t/**\n\t * Connect the left part of the effect\n\t */\n\tprotected connectEffectLeft(...nodes: OutputNode[]): void {\n\t\tthis._split.connect(nodes[0], 0, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length - 1], this._merge, 0, 0);\n\t}\n\n\t/**\n\t * Connect the right part of the effect\n\t */\n\tprotected connectEffectRight(...nodes: OutputNode[]): void {\n\t\tthis._split.connect(nodes[0], 1, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length - 1], this._merge, 0, 1);\n\t}\n\n\tstatic getDefaults(): StereoEffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis._split.dispose();\n\t\tthis._merge.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}