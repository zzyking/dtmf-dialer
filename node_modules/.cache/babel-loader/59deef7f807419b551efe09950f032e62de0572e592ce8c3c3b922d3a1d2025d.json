{"ast":null,"code":"export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n  return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext, numberOfChannels);\n      this._nativeContext = _nativeContext;\n      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: (moduleURL, options) => {\n          return addAudioWorkletModule(this, moduleURL, options);\n        }\n      };\n    }\n    get audioWorklet() {\n      return this._audioWorklet;\n    }\n    createAnalyser() {\n      return new analyserNodeConstructor(this);\n    }\n    createBiquadFilter() {\n      return new biquadFilterNodeConstructor(this);\n    }\n    createBuffer(numberOfChannels, length, sampleRate) {\n      return new audioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      });\n    }\n    createBufferSource() {\n      return new audioBufferSourceNodeConstructor(this);\n    }\n    createChannelMerger(numberOfInputs = 6) {\n      return new channelMergerNodeConstructor(this, {\n        numberOfInputs\n      });\n    }\n    createChannelSplitter(numberOfOutputs = 6) {\n      return new channelSplitterNodeConstructor(this, {\n        numberOfOutputs\n      });\n    }\n    createConstantSource() {\n      return new constantSourceNodeConstructor(this);\n    }\n    createConvolver() {\n      return new convolverNodeConstructor(this);\n    }\n    createDelay(maxDelayTime = 1) {\n      return new delayNodeConstructor(this, {\n        maxDelayTime\n      });\n    }\n    createDynamicsCompressor() {\n      return new dynamicsCompressorNodeConstructor(this);\n    }\n    createGain() {\n      return new gainNodeConstructor(this);\n    }\n    createIIRFilter(feedforward, feedback) {\n      return new iIRFilterNodeConstructor(this, {\n        feedback,\n        feedforward\n      });\n    }\n    createOscillator() {\n      return new oscillatorNodeConstructor(this);\n    }\n    createPanner() {\n      return new pannerNodeConstructor(this);\n    }\n    createPeriodicWave(real, imag, constraints = {\n      disableNormalization: false\n    }) {\n      return new periodicWaveConstructor(this, {\n        ...constraints,\n        imag,\n        real\n      });\n    }\n    createStereoPanner() {\n      return new stereoPannerNodeConstructor(this);\n    }\n    createWaveShaper() {\n      return new waveShaperNodeConstructor(this);\n    }\n    decodeAudioData(audioData, successCallback, errorCallback) {\n      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {\n        if (typeof successCallback === 'function') {\n          successCallback(audioBuffer);\n        }\n        return audioBuffer;\n      }, err => {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        }\n        throw err;\n      });\n    }\n  };\n};","map":{"version":3,"names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","BaseAudioContext","constructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","audioWorklet","createAnalyser","createBiquadFilter","createBuffer","length","sampleRate","createBufferSource","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedforward","feedback","createOscillator","createPanner","createPeriodicWave","real","imag","constraints","disableNormalization","createStereoPanner","createWaveShaper","audioData","successCallback","errorCallback","then","audioBuffer","err"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/factories/base-audio-context-constructor.ts"],"sourcesContent":["import {\n    IAnalyserNode,\n    IAudioBuffer,\n    IAudioBufferSourceNode,\n    IAudioNode,\n    IAudioWorklet,\n    IBaseAudioContext,\n    IBiquadFilterNode,\n    IConstantSourceNode,\n    IConvolverNode,\n    IDelayNode,\n    IDynamicsCompressorNode,\n    IGainNode,\n    IIIRFilterNode,\n    IOscillatorNode,\n    IPannerNode,\n    IPeriodicWave,\n    IPeriodicWaveConstraints,\n    IStereoPannerNode,\n    IWaveShaperNode,\n    IWorkletOptions\n} from '../interfaces';\nimport { TBaseAudioContextConstructorFactory, TContext, TDecodeErrorCallback, TDecodeSuccessCallback, TNativeContext } from '../types';\n\nexport const createBaseAudioContextConstructor: TBaseAudioContextConstructorFactory = (\n    addAudioWorkletModule,\n    analyserNodeConstructor,\n    audioBufferConstructor,\n    audioBufferSourceNodeConstructor,\n    biquadFilterNodeConstructor,\n    channelMergerNodeConstructor,\n    channelSplitterNodeConstructor,\n    constantSourceNodeConstructor,\n    convolverNodeConstructor,\n    decodeAudioData,\n    delayNodeConstructor,\n    dynamicsCompressorNodeConstructor,\n    gainNodeConstructor,\n    iIRFilterNodeConstructor,\n    minimalBaseAudioContextConstructor,\n    oscillatorNodeConstructor,\n    pannerNodeConstructor,\n    periodicWaveConstructor,\n    stereoPannerNodeConstructor,\n    waveShaperNodeConstructor\n) => {\n    return class BaseAudioContext<T extends TContext> extends minimalBaseAudioContextConstructor<T> implements IBaseAudioContext<T> {\n        private _audioWorklet: undefined | IAudioWorklet;\n\n        constructor(private _nativeContext: TNativeContext, numberOfChannels: number) {\n            super(_nativeContext, numberOfChannels);\n\n            this._audioWorklet =\n                addAudioWorkletModule === undefined\n                    ? undefined\n                    : {\n                          addModule: (moduleURL: string, options?: IWorkletOptions) => {\n                              return addAudioWorkletModule(<T>(<unknown>this), moduleURL, options);\n                          }\n                      };\n        }\n\n        get audioWorklet(): undefined | IAudioWorklet {\n            return this._audioWorklet;\n        }\n\n        public createAnalyser(): IAnalyserNode<T> {\n            return new analyserNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createBiquadFilter(): IBiquadFilterNode<T> {\n            return new biquadFilterNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createBuffer(numberOfChannels: number, length: number, sampleRate: number): IAudioBuffer {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n\n        public createBufferSource(): IAudioBufferSourceNode<T> {\n            return new audioBufferSourceNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createChannelMerger(numberOfInputs = 6): IAudioNode<T> {\n            return new channelMergerNodeConstructor(<T>(<unknown>this), { numberOfInputs });\n        }\n\n        public createChannelSplitter(numberOfOutputs = 6): IAudioNode<T> {\n            return new channelSplitterNodeConstructor(<T>(<unknown>this), { numberOfOutputs });\n        }\n\n        public createConstantSource(): IConstantSourceNode<T> {\n            return new constantSourceNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createConvolver(): IConvolverNode<T> {\n            return new convolverNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createDelay(maxDelayTime = 1): IDelayNode<T> {\n            return new delayNodeConstructor(<T>(<unknown>this), { maxDelayTime });\n        }\n\n        public createDynamicsCompressor(): IDynamicsCompressorNode<T> {\n            return new dynamicsCompressorNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createGain(): IGainNode<T> {\n            return new gainNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIIRFilterNode<T> {\n            return new iIRFilterNodeConstructor(<T>(<unknown>this), { feedback, feedforward });\n        }\n\n        public createOscillator(): IOscillatorNode<T> {\n            return new oscillatorNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createPanner(): IPannerNode<T> {\n            return new pannerNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createPeriodicWave(\n            real: Iterable<number>,\n            imag: Iterable<number>,\n            constraints: Partial<IPeriodicWaveConstraints> = { disableNormalization: false }\n        ): IPeriodicWave {\n            return new periodicWaveConstructor(<T>(<unknown>this), { ...constraints, imag, real });\n        }\n\n        public createStereoPanner(): IStereoPannerNode<T> {\n            return new stereoPannerNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createWaveShaper(): IWaveShaperNode<T> {\n            return new waveShaperNodeConstructor(<T>(<unknown>this));\n        }\n\n        public decodeAudioData(\n            audioData: ArrayBuffer,\n            successCallback?: TDecodeSuccessCallback,\n            errorCallback?: TDecodeErrorCallback\n        ): Promise<IAudioBuffer> {\n            return decodeAudioData(this._nativeContext, audioData).then(\n                (audioBuffer) => {\n                    if (typeof successCallback === 'function') {\n                        successCallback(audioBuffer);\n                    }\n\n                    return audioBuffer;\n                },\n                (err) => {\n                    if (typeof errorCallback === 'function') {\n                        errorCallback(err);\n                    }\n\n                    throw err;\n                }\n            );\n        }\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}