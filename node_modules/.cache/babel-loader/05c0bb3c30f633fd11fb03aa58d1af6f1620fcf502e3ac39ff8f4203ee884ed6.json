{"ast":null,"code":"import { Param } from \"../core/context/Param.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { connect } from \"../core/context/ToneAudioNode.js\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { ToneConstantSource } from \"./ToneConstantSource.js\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    super(options);\n    this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n    this.override = true;\n    this.output = this._constantSource = new ToneConstantSource({\n      context: this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    this._constantSource.start(0);\n    this.input = this._param = this._constantSource.offset;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      units: \"number\",\n      value: 0\n    });\n  }\n  connect(destination, outputNum = 0, inputNum = 0) {\n    // start it only when connected to something\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._param.dispose();\n    this._constantSource.dispose();\n    return this;\n  }\n  //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // just a proxy for the ConstantSourceNode's offset AudioParam\n  // all docs are generated from AbstractParam.ts\n  //-------------------------------------\n  setValueAtTime(value, time) {\n    this._param.setValueAtTime(value, time);\n    return this;\n  }\n  getValueAtTime(time) {\n    return this._param.getValueAtTime(time);\n  }\n  setRampPoint(time) {\n    this._param.setRampPoint(time);\n    return this;\n  }\n  linearRampToValueAtTime(value, time) {\n    this._param.linearRampToValueAtTime(value, time);\n    return this;\n  }\n  exponentialRampToValueAtTime(value, time) {\n    this._param.exponentialRampToValueAtTime(value, time);\n    return this;\n  }\n  exponentialRampTo(value, rampTime, startTime) {\n    this._param.exponentialRampTo(value, rampTime, startTime);\n    return this;\n  }\n  linearRampTo(value, rampTime, startTime) {\n    this._param.linearRampTo(value, rampTime, startTime);\n    return this;\n  }\n  targetRampTo(value, rampTime, startTime) {\n    this._param.targetRampTo(value, rampTime, startTime);\n    return this;\n  }\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    this._param.exponentialApproachValueAtTime(value, time, rampTime);\n    return this;\n  }\n  setTargetAtTime(value, startTime, timeConstant) {\n    this._param.setTargetAtTime(value, startTime, timeConstant);\n    return this;\n  }\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n    return this;\n  }\n  cancelScheduledValues(time) {\n    this._param.cancelScheduledValues(time);\n    return this;\n  }\n  cancelAndHoldAtTime(time) {\n    this._param.cancelAndHoldAtTime(time);\n    return this;\n  }\n  rampTo(value, rampTime, startTime) {\n    this._param.rampTo(value, rampTime, startTime);\n    return this;\n  }\n  get value() {\n    return this._param.value;\n  }\n  set value(value) {\n    this._param.value = value;\n  }\n  get convert() {\n    return this._param.convert;\n  }\n  set convert(convert) {\n    this._param.convert = convert;\n  }\n  get units() {\n    return this._param.units;\n  }\n  get overridden() {\n    return this._param.overridden;\n  }\n  set overridden(overridden) {\n    this._param.overridden = overridden;\n  }\n  get maxValue() {\n    return this._param.maxValue;\n  }\n  get minValue() {\n    return this._param.minValue;\n  }\n  /**\n   * @see {@link Param.apply}.\n   */\n  apply(param) {\n    this._param.apply(param);\n    return this;\n  }\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0);\n    // reset the value\n    destination.setValueAtTime(0, 0);\n    // mark the value as overridden\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n  connect(signal, destination, outputNum, inputNum);\n}","map":{"version":3,"names":["Param","ToneAudioNode","connect","isAudioParam","optionsFromArguments","ToneConstantSource","Signal","constructor","options","getDefaults","arguments","name","override","output","_constantSource","context","convert","offset","value","units","minValue","maxValue","start","input","_param","Object","assign","destination","outputNum","inputNum","connectSignal","dispose","setValueAtTime","time","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","startTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","setTargetAtTime","timeConstant","setValueCurveAtTime","values","duration","scaling","cancelScheduledValues","cancelAndHoldAtTime","rampTo","overridden","apply","param","signal"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/signal/Signal.ts"],"sourcesContent":["import { AbstractParam } from \"../core/context/AbstractParam.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport {\n\tInputNode,\n\tOutputNode,\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../core/context/ToneAudioNode.js\";\nimport { connect } from \"../core/context/ToneAudioNode.js\";\nimport { Time, UnitMap, UnitName } from \"../core/type/Units.js\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { ToneConstantSource } from \"./ToneConstantSource.js\";\n\nexport interface SignalOptions<TypeName extends UnitName>\n\textends ToneAudioNodeOptions {\n\tvalue: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal<TypeName extends UnitName = \"number\">\n\textends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<TypeName>\n{\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<TypeName>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\n\t\t\t\"value\",\n\t\t\t\"units\",\n\t\t]) as SignalOptions<TypeName>;\n\t\tsuper(options);\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(\n\t\tvalue: UnitMap[TypeName],\n\t\trampTime: Time,\n\t\tstartTime?: Time\n\t): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(\n\t\tvalue: UnitMap[TypeName],\n\t\trampTime: Time,\n\t\tstartTime?: Time\n\t): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(\n\t\tvalue: UnitMap[TypeName],\n\t\trampTime: Time,\n\t\tstartTime?: Time\n\t): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(\n\t\tvalue: UnitMap[TypeName],\n\t\ttime: Time,\n\t\trampTime: Time\n\t): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(\n\t\tvalue: UnitMap[TypeName],\n\t\tstartTime: Time,\n\t\ttimeConstant: number\n\t): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(\n\t\tvalues: UnitMap[TypeName][],\n\t\tstartTime: Time,\n\t\tduration: Time,\n\t\tscaling?: number\n\t): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\treturn this._param.value;\n\t}\n\tset value(value: UnitMap[TypeName]) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * @see {@link Param.apply}.\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(\n\tsignal: OutputNode,\n\tdestination: InputNode,\n\toutputNum?: number,\n\tinputNum?: number\n): void {\n\tif (\n\t\tdestination instanceof Param ||\n\t\tisAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)\n\t) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}