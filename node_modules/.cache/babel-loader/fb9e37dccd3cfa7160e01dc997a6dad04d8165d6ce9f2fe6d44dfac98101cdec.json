{"ast":null,"code":"/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg) {\n  return arg === undefined;\n}\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined(arg) {\n  return arg !== undefined;\n}\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg) {\n  return typeof arg === \"number\";\n}\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg) {\n  return Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object;\n}\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg) {\n  return typeof arg === \"boolean\";\n}\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg) {\n  return Array.isArray(arg);\n}\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg) {\n  return typeof arg === \"string\";\n}\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg) {\n  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}","map":{"version":3,"names":["isUndef","arg","undefined","isDefined","isFunction","isNumber","isObject","Object","prototype","toString","call","constructor","isBoolean","isArray","Array","isString","isNote","test"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/core/util/TypeCheck.ts"],"sourcesContent":["import { Note } from \"../type/Units.js\";\n\n/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn arg === undefined;\n}\n\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn arg !== undefined;\n}\n\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn typeof arg === \"number\";\n}\n\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (\n\t\tObject.prototype.toString.call(arg) === \"[object Object]\" &&\n\t\targ.constructor === Object\n\t);\n}\n\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn typeof arg === \"boolean\";\n}\n\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn Array.isArray(arg);\n}\n\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn typeof arg === \"string\";\n}\n\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n"],"mappings":"AAEA;;;AAGA,OAAM,SAAUA,OAAOA,CAACC,GAAQ;EAC/B,OAAOA,GAAG,KAAKC,SAAS;AACzB;AAEA;;;AAGA,OAAM,SAAUC,SAASA,CAAIF,GAAkB;EAC9C,OAAOA,GAAG,KAAKC,SAAS;AACzB;AAEA;;;AAGA,OAAM,SAAUE,UAAUA,CAACH,GAAQ;EAClC,OAAO,OAAOA,GAAG,KAAK,UAAU;AACjC;AAEA;;;AAGA,OAAM,SAAUI,QAAQA,CAACJ,GAAQ;EAChC,OAAO,OAAOA,GAAG,KAAK,QAAQ;AAC/B;AAEA;;;AAGA,OAAM,SAAUK,QAAQA,CAACL,GAAQ;EAChC,OACCM,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACT,GAAG,CAAC,KAAK,iBAAiB,IACzDA,GAAG,CAACU,WAAW,KAAKJ,MAAM;AAE5B;AAEA;;;AAGA,OAAM,SAAUK,SAASA,CAACX,GAAQ;EACjC,OAAO,OAAOA,GAAG,KAAK,SAAS;AAChC;AAEA;;;AAGA,OAAM,SAAUY,OAAOA,CAACZ,GAAQ;EAC/B,OAAOa,KAAK,CAACD,OAAO,CAACZ,GAAG,CAAC;AAC1B;AAEA;;;AAGA,OAAM,SAAUc,QAAQA,CAACd,GAAQ;EAChC,OAAO,OAAOA,GAAG,KAAK,QAAQ;AAC/B;AAEA;;;;AAIA,OAAM,SAAUe,MAAMA,CAACf,GAAQ;EAC9B,OAAOc,QAAQ,CAACd,GAAG,CAAC,IAAI,qCAAqC,CAACgB,IAAI,CAAChB,GAAG,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}