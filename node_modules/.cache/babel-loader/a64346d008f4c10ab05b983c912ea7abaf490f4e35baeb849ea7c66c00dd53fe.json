{"ast":null,"code":"export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n  return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    await Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n      const destination = audioNode.context.destination;\n      if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n        renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n      }\n    })).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n  };\n};","map":{"version":3,"names":["createRenderInputsOfAudioNode","getAudioNodeConnections","getAudioNodeRenderer","isPartOfACycle","audioNode","nativeOfflineAudioContext","nativeAudioNode","audioNodeConnections","Promise","all","activeInputs","map","connections","input","Array","from","source","output","audioNodeRenderer","renderedNativeAudioNode","render","destination","context","connect","reduce","allRenderingPromises","renderingPromises"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/factories/render-inputs-of-audio-node.ts"],"sourcesContent":["import { IAudioDestinationNode } from '../interfaces';\nimport { TRenderInputsOfAudioNodeFactory } from '../types';\n\nexport const createRenderInputsOfAudioNode: TRenderInputsOfAudioNodeFactory = (\n    getAudioNodeConnections,\n    getAudioNodeRenderer,\n    isPartOfACycle\n) => {\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n\n        await Promise.all(\n            audioNodeConnections.activeInputs\n                .map((connections, input) =>\n                    Array.from(connections).map(async ([source, output]) => {\n                        const audioNodeRenderer = getAudioNodeRenderer(source);\n                        const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n                        const destination = <IAudioDestinationNode<typeof audioNode.context>>audioNode.context.destination;\n\n                        if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                            renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n                        }\n                    })\n                )\n                .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], [])\n        );\n    };\n};\n"],"mappings":"AAGA,OAAO,MAAMA,6BAA6B,GAAoCA,CAC1EC,uBAAuB,EACvBC,oBAAoB,EACpBC,cAAc,KACd;EACA,OAAO,OAAOC,SAAS,EAAEC,yBAAyB,EAAEC,eAAe,KAAI;IACnE,MAAMC,oBAAoB,GAAGN,uBAAuB,CAACG,SAAS,CAAC;IAE/D,MAAMI,OAAO,CAACC,GAAG,CACbF,oBAAoB,CAACG,YAAY,CAC5BC,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,KACpBC,KAAK,CAACC,IAAI,CAACH,WAAW,CAAC,CAACD,GAAG,CAAC,OAAO,CAACK,MAAM,EAAEC,MAAM,CAAC,KAAI;MACnD,MAAMC,iBAAiB,GAAGhB,oBAAoB,CAACc,MAAM,CAAC;MACtD,MAAMG,uBAAuB,GAAG,MAAMD,iBAAiB,CAACE,MAAM,CAACJ,MAAM,EAAEX,yBAAyB,CAAC;MACjG,MAAMgB,WAAW,GAAoDjB,SAAS,CAACkB,OAAO,CAACD,WAAW;MAElG,IAAI,CAAClB,cAAc,CAACa,MAAM,CAAC,KAAKZ,SAAS,KAAKiB,WAAW,IAAI,CAAClB,cAAc,CAACC,SAAS,CAAC,CAAC,EAAE;QACtFe,uBAAuB,CAACI,OAAO,CAACjB,eAAe,EAAEW,MAAM,EAAEJ,KAAK,CAAC;MACnE;IACJ,CAAC,CAAC,CACL,CACAW,MAAM,CAAC,CAACC,oBAAoB,EAAEC,iBAAiB,KAAK,CAAC,GAAGD,oBAAoB,EAAE,GAAGC,iBAAiB,CAAC,EAAE,EAAE,CAAC,CAChH;EACL,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}