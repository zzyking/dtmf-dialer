{"ast":null,"code":"import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    super(options);\n    this.name = \"Volume\";\n    this.input = this.output = new Gain({\n      context: this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    this.volume = this.output.gain;\n    readOnly(this, \"volume\");\n    this._unmutedVolume = options.volume;\n    // set the mute initially\n    this.mute = options.mute;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const vol = new Tone.Volume(-12).toDestination();\n   * const osc = new Tone.Oscillator().connect(vol).start();\n   * // mute the output\n   * vol.mute = true;\n   */\n  get mute() {\n    return this.volume.value === -Infinity;\n  }\n  set mute(mute) {\n    if (!this.mute && mute) {\n      this._unmutedVolume = this.volume.value;\n      // maybe it should ramp here?\n      this.volume.value = -Infinity;\n    } else if (this.mute && !mute) {\n      this.volume.value = this._unmutedVolume;\n    }\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","Volume","constructor","options","getDefaults","arguments","name","input","output","context","gain","volume","units","_unmutedVolume","mute","Object","assign","value","Infinity","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/channel/Volume.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { Decibels } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<\"decibels\">;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain<\"decibels\">;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t * @example\n\t * const vol = new Tone.Volume().toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * vol.volume.value = -20;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\n\t\t\t\"volume\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const vol = new Tone.Volume(-12).toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * // mute the output\n\t * vol.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,4BAA4B;AAEjD,SACCC,aAAa,QAEP,qCAAqC;AAE5C,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,QAAQ,QAAQ,8BAA8B;AAOvD;;;;;;;;AAQA,OAAM,MAAOC,MAAO,SAAQH,aAA4B;EAgCvDI,YAAA;IACC,MAAMC,OAAO,GAAGJ,oBAAoB,CAACE,MAAM,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CACrE,QAAQ,CACR,CAAC;IACF,KAAK,CAACF,OAAO,CAAC;IAnCN,KAAAG,IAAI,GAAW,QAAQ;IAqC/B,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIX,IAAI,CAAC;MACnCY,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,IAAI,EAAEP,OAAO,CAACQ,MAAM;MACpBC,KAAK,EAAE;KACP,CAAC;IACF,IAAI,CAACD,MAAM,GAAG,IAAI,CAACH,MAAM,CAACE,IAAI;IAC9BV,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC;IACxB,IAAI,CAACa,cAAc,GAAGV,OAAO,CAACQ,MAAM;IAEpC;IACA,IAAI,CAACG,IAAI,GAAGX,OAAO,CAACW,IAAI;EACzB;EAEA,OAAOV,WAAWA,CAAA;IACjB,OAAOW,MAAM,CAACC,MAAM,CAAClB,aAAa,CAACM,WAAW,EAAE,EAAE;MACjDU,IAAI,EAAE,KAAK;MACXH,MAAM,EAAE;KACR,CAAC;EACH;EAEA;;;;;;;;EAQA,IAAIG,IAAIA,CAAA;IACP,OAAO,IAAI,CAACH,MAAM,CAACM,KAAK,KAAK,CAACC,QAAQ;EACvC;EACA,IAAIJ,IAAIA,CAACA,IAAa;IACrB,IAAI,CAAC,IAAI,CAACA,IAAI,IAAIA,IAAI,EAAE;MACvB,IAAI,CAACD,cAAc,GAAG,IAAI,CAACF,MAAM,CAACM,KAAK;MACvC;MACA,IAAI,CAACN,MAAM,CAACM,KAAK,GAAG,CAACC,QAAQ;IAC9B,CAAC,MAAM,IAAI,IAAI,CAACJ,IAAI,IAAI,CAACA,IAAI,EAAE;MAC9B,IAAI,CAACH,MAAM,CAACM,KAAK,GAAG,IAAI,CAACJ,cAAc;IACxC;EACD;EAEA;;;EAGAM,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACZ,KAAK,CAACY,OAAO,EAAE;IACpB,IAAI,CAACR,MAAM,CAACQ,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}