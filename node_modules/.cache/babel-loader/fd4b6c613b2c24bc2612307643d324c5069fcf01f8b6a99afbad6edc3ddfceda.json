{"ast":null,"code":"import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\nexport const deactivateActiveAudioNodeInputConnections = (audioNode, trace) => {\n  const {\n    activeInputs\n  } = getAudioNodeConnections(audioNode);\n  activeInputs.forEach(connections => connections.forEach(([source]) => {\n    if (!trace.includes(audioNode)) {\n      deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n    }\n  }));\n  const audioParams = isAudioBufferSourceNode(audioNode) ? [\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  audioNode.playbackRate] : isAudioWorkletNode(audioNode) ? Array.from(audioNode.parameters.values()) : isBiquadFilterNode(audioNode) ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain] : isConstantSourceNode(audioNode) ? [audioNode.offset] : isGainNode(audioNode) ? [audioNode.gain] : isOscillatorNode(audioNode) ? [audioNode.detune, audioNode.frequency] : isStereoPannerNode(audioNode) ? [audioNode.pan] : [];\n  for (const audioParam of audioParams) {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    if (audioParamConnections !== undefined) {\n      audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));\n    }\n  }\n  if (isActiveAudioNode(audioNode)) {\n    setInternalStateToPassive(audioNode);\n  }\n};","map":{"version":3,"names":["isAudioBufferSourceNode","isAudioWorkletNode","isBiquadFilterNode","isConstantSourceNode","isGainNode","isOscillatorNode","isStereoPannerNode","getAudioNodeConnections","getAudioParamConnections","isActiveAudioNode","setInternalStateToPassive","deactivateActiveAudioNodeInputConnections","audioNode","trace","activeInputs","forEach","connections","source","includes","audioParams","playbackRate","Array","from","parameters","values","Q","detune","frequency","gain","offset","pan","audioParam","audioParamConnections","undefined"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/standardized-audio-context/src/helpers/deactivate-active-audio-node-input-connections.ts"],"sourcesContent":["import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n\nexport const deactivateActiveAudioNodeInputConnections = <T extends TContext>(\n    audioNode: IAudioNode<T>,\n    trace: readonly IAudioNode<T>[]\n) => {\n    const { activeInputs } = getAudioNodeConnections(audioNode);\n\n    activeInputs.forEach((connections) =>\n        connections.forEach(([source]) => {\n            if (!trace.includes(audioNode)) {\n                deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n            }\n        })\n    );\n\n    const audioParams = isAudioBufferSourceNode(audioNode)\n        ? [\n              // Bug #149: Safari does not yet support the detune AudioParam.\n              audioNode.playbackRate\n          ]\n        : isAudioWorkletNode(audioNode)\n        ? Array.from(audioNode.parameters.values())\n        : isBiquadFilterNode(audioNode)\n        ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain]\n        : isConstantSourceNode(audioNode)\n        ? [audioNode.offset]\n        : isGainNode(audioNode)\n        ? [audioNode.gain]\n        : isOscillatorNode(audioNode)\n        ? [audioNode.detune, audioNode.frequency]\n        : isStereoPannerNode(audioNode)\n        ? [audioNode.pan]\n        : [];\n\n    for (const audioParam of audioParams) {\n        const audioParamConnections = getAudioParamConnections<T>(audioParam);\n\n        if (audioParamConnections !== undefined) {\n            audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));\n        }\n    }\n\n    if (isActiveAudioNode(audioNode)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,oCAAoC;AAC5E,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,oBAAoB,QAAQ,gCAAgC;AACrE,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,kBAAkB,QAAQ,8BAA8B;AAGjE,SAASC,uBAAuB,QAAQ,8BAA8B;AACtE,SAASC,wBAAwB,QAAQ,+BAA+B;AACxE,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,yBAAyB,QAAQ,iCAAiC;AAE3E,OAAO,MAAMC,yCAAyC,GAAGA,CACrDC,SAAwB,EACxBC,KAA+B,KAC/B;EACA,MAAM;IAAEC;EAAY,CAAE,GAAGP,uBAAuB,CAACK,SAAS,CAAC;EAE3DE,YAAY,CAACC,OAAO,CAAEC,WAAW,IAC7BA,WAAW,CAACD,OAAO,CAAC,CAAC,CAACE,MAAM,CAAC,KAAI;IAC7B,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACN,SAAS,CAAC,EAAE;MAC5BD,yCAAyC,CAACM,MAAM,EAAE,CAAC,GAAGJ,KAAK,EAAED,SAAS,CAAC,CAAC;IAC5E;EACJ,CAAC,CAAC,CACL;EAED,MAAMO,WAAW,GAAGnB,uBAAuB,CAACY,SAAS,CAAC,GAChD;EACI;EACAA,SAAS,CAACQ,YAAY,CACzB,GACDnB,kBAAkB,CAACW,SAAS,CAAC,GAC7BS,KAAK,CAACC,IAAI,CAACV,SAAS,CAACW,UAAU,CAACC,MAAM,EAAE,CAAC,GACzCtB,kBAAkB,CAACU,SAAS,CAAC,GAC7B,CAACA,SAAS,CAACa,CAAC,EAAEb,SAAS,CAACc,MAAM,EAAEd,SAAS,CAACe,SAAS,EAAEf,SAAS,CAACgB,IAAI,CAAC,GACpEzB,oBAAoB,CAACS,SAAS,CAAC,GAC/B,CAACA,SAAS,CAACiB,MAAM,CAAC,GAClBzB,UAAU,CAACQ,SAAS,CAAC,GACrB,CAACA,SAAS,CAACgB,IAAI,CAAC,GAChBvB,gBAAgB,CAACO,SAAS,CAAC,GAC3B,CAACA,SAAS,CAACc,MAAM,EAAEd,SAAS,CAACe,SAAS,CAAC,GACvCrB,kBAAkB,CAACM,SAAS,CAAC,GAC7B,CAACA,SAAS,CAACkB,GAAG,CAAC,GACf,EAAE;EAER,KAAK,MAAMC,UAAU,IAAIZ,WAAW,EAAE;IAClC,MAAMa,qBAAqB,GAAGxB,wBAAwB,CAAIuB,UAAU,CAAC;IAErE,IAAIC,qBAAqB,KAAKC,SAAS,EAAE;MACrCD,qBAAqB,CAAClB,YAAY,CAACC,OAAO,CAAC,CAAC,CAACE,MAAM,CAAC,KAAKN,yCAAyC,CAACM,MAAM,EAAEJ,KAAK,CAAC,CAAC;IACtH;EACJ;EAEA,IAAIJ,iBAAiB,CAACG,SAAS,CAAC,EAAE;IAC9BF,yBAAyB,CAACE,SAAS,CAAC;EACxC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}