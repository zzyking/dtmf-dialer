{"ast":null,"code":"import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Subtract } from \"./Subtract.js\";\nimport { Signal } from \"./Signal.js\";\nimport { GreaterThanZero } from \"./GreaterThanZero.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst gt = new Tone.GreaterThan(2).toDestination();\n * \tconst sig = new Tone.Signal(4).connect(gt);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThan extends Signal {\n  constructor() {\n    const options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n    super(options);\n    this.name = \"GreaterThan\";\n    this.override = false;\n    this._subtract = this.input = new Subtract({\n      context: this.context,\n      value: options.value\n    });\n    this._gtz = this.output = new GreaterThanZero({\n      context: this.context\n    });\n    this.comparator = this._param = this._subtract.subtrahend;\n    readOnly(this, \"comparator\");\n    // connect\n    this._subtract.connect(this._gtz);\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._gtz.dispose();\n    this._subtract.dispose();\n    this.comparator.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["optionsFromArguments","Subtract","Signal","GreaterThanZero","readOnly","GreaterThan","constructor","options","getDefaults","arguments","name","override","_subtract","input","context","value","_gtz","output","comparator","_param","subtrahend","connect","Object","assign","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/signal/GreaterThan.ts"],"sourcesContent":["import { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Subtract } from \"./Subtract.js\";\nimport { Signal, SignalOptions } from \"./Signal.js\";\nimport { GreaterThanZero } from \"./GreaterThanZero.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { Param } from \"../core/context/Param.js\";\n\nexport type GreaterThanOptions = SignalOptions<\"number\">;\n\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst gt = new Tone.GreaterThan(2).toDestination();\n * \tconst sig = new Tone.Signal(4).connect(gt);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThan extends Signal<\"number\"> {\n\treadonly name: string = \"GreaterThan\";\n\n\treadonly override: boolean = false;\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * compare that amount to zero after subtracting\n\t */\n\tprivate _gtz: GreaterThanZero;\n\n\t/**\n\t * Subtract the value from the input node\n\t */\n\tprivate _subtract: Subtract;\n\n\t/**\n\t * The signal to compare to the incoming signal against.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \t// change the comparison value\n\t * \tconst gt = new Tone.GreaterThan(1.5).toDestination();\n\t * \tconst signal = new Tone.Signal(1).connect(gt);\n\t * \tgt.comparator.setValueAtTime(0.5, 0.1);\n\t * }, 0.5, 1);\n\t */\n\treadonly comparator: Param<\"number\">;\n\n\t/**\n\t * @param value The value to compare to\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<GreaterThanOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tGreaterThan.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"value\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis._subtract = this.input = new Subtract({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.value,\n\t\t});\n\t\tthis._gtz = this.output = new GreaterThanZero({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tthis.comparator = this._param = this._subtract.subtrahend;\n\t\treadOnly(this, \"comparator\");\n\n\t\t// connect\n\t\tthis._subtract.connect(this._gtz);\n\t}\n\n\tstatic getDefaults(): GreaterThanOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gtz.dispose();\n\t\tthis._subtract.dispose();\n\t\tthis.comparator.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AACA,SAASA,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,MAAM,QAAuB,aAAa;AACnD,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,QAAQ,QAAQ,2BAA2B;AAKpD;;;;;;;;;;;AAWA,OAAM,MAAOC,WAAY,SAAQH,MAAgB;EAmChDI,YAAA;IACC,MAAMC,OAAO,GAAGP,oBAAoB,CACnCK,WAAW,CAACG,WAAW,EAAE,EACzBC,SAAS,EACT,CAAC,OAAO,CAAC,CACT;IACD,KAAK,CAACF,OAAO,CAAC;IAxCN,KAAAG,IAAI,GAAW,aAAa;IAE5B,KAAAC,QAAQ,GAAY,KAAK;IAwCjC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,KAAK,GAAG,IAAIZ,QAAQ,CAAC;MAC1Ca,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,KAAK,EAAER,OAAO,CAACQ;KACf,CAAC;IACF,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,MAAM,GAAG,IAAId,eAAe,CAAC;MAC7CW,OAAO,EAAE,IAAI,CAACA;KACd,CAAC;IAEF,IAAI,CAACI,UAAU,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACP,SAAS,CAACQ,UAAU;IACzDhB,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC;IAE5B;IACA,IAAI,CAACQ,SAAS,CAACS,OAAO,CAAC,IAAI,CAACL,IAAI,CAAC;EAClC;EAEA,OAAOR,WAAWA,CAAA;IACjB,OAAOc,MAAM,CAACC,MAAM,CAACrB,MAAM,CAACM,WAAW,EAAE,EAAE;MAC1CO,KAAK,EAAE;KACP,CAAC;EACH;EAEAS,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACR,IAAI,CAACQ,OAAO,EAAE;IACnB,IAAI,CAACZ,SAAS,CAACY,OAAO,EAAE;IACxB,IAAI,CAACN,UAAU,CAACM,OAAO,EAAE;IACzB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}