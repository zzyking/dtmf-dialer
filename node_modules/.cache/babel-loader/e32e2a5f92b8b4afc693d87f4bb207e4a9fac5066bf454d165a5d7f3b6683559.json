{"ast":null,"code":"import { WaveShaper } from \"./WaveShaper.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\nexport class Pow extends SignalOperator {\n  constructor() {\n    const options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n    super(options);\n    this.name = \"Pow\";\n    this._exponentScaler = this.input = this.output = new WaveShaper({\n      context: this.context,\n      mapping: this._expFunc(options.value),\n      length: 8192\n    });\n    this._exponent = options.value;\n  }\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      value: 1\n    });\n  }\n  /**\n   * the function which maps the waveshaper\n   * @param exponent exponent value\n   */\n  _expFunc(exponent) {\n    return val => {\n      return Math.pow(Math.abs(val), exponent);\n    };\n  }\n  /**\n   * The value of the exponent.\n   */\n  get value() {\n    return this._exponent;\n  }\n  set value(exponent) {\n    this._exponent = exponent;\n    this._exponentScaler.setMap(this._expFunc(this._exponent));\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._exponentScaler.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["WaveShaper","optionsFromArguments","SignalOperator","Pow","constructor","options","getDefaults","arguments","name","_exponentScaler","input","output","context","mapping","_expFunc","value","length","_exponent","Object","assign","exponent","val","Math","pow","abs","setMap","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/signal/Pow.ts"],"sourcesContent":["import { WaveShaper, WaveShaperMappingFn } from \"./WaveShaper.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\nimport { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode.js\";\n\nexport interface PowOptions extends ToneAudioNodeOptions {\n\tvalue: number;\n}\n\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\nexport class Pow extends SignalOperator<PowOptions> {\n\treadonly name: string = \"Pow\";\n\n\tprivate _exponent: number;\n\n\tprivate _exponentScaler: WaveShaper;\n\n\tinput: WaveShaper;\n\n\toutput: WaveShaper;\n\n\t/**\n\t * @param value Constant exponent value to use\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<PowOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Pow.getDefaults(), arguments, [\n\t\t\t\"value\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis._exponentScaler =\n\t\t\tthis.input =\n\t\t\tthis.output =\n\t\t\t\tnew WaveShaper({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tmapping: this._expFunc(options.value),\n\t\t\t\t\tlength: 8192,\n\t\t\t\t});\n\n\t\tthis._exponent = options.value;\n\t}\n\n\tstatic getDefaults(): PowOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\t/**\n\t * the function which maps the waveshaper\n\t * @param exponent exponent value\n\t */\n\tprivate _expFunc(exponent: number): WaveShaperMappingFn {\n\t\treturn (val: number) => {\n\t\t\treturn Math.pow(Math.abs(val), exponent);\n\t\t};\n\t}\n\n\t/**\n\t * The value of the exponent.\n\t */\n\tget value(): number {\n\t\treturn this._exponent;\n\t}\n\tset value(exponent: number) {\n\t\tthis._exponent = exponent;\n\t\tthis._exponentScaler.setMap(this._expFunc(this._exponent));\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponentScaler.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAA6B,iBAAiB;AACjE,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,cAAc,QAAQ,qBAAqB;AAOpD;;;;;;;;;AASA,OAAM,MAAOC,GAAI,SAAQD,cAA0B;EAgBlDE,YAAA;IACC,MAAMC,OAAO,GAAGJ,oBAAoB,CAACE,GAAG,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAClE,OAAO,CACP,CAAC;IACF,KAAK,CAACF,OAAO,CAAC;IAnBN,KAAAG,IAAI,GAAW,KAAK;IAqB5B,IAAI,CAACC,eAAe,GACnB,IAAI,CAACC,KAAK,GACV,IAAI,CAACC,MAAM,GACV,IAAIX,UAAU,CAAC;MACdY,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,OAAO,EAAE,IAAI,CAACC,QAAQ,CAACT,OAAO,CAACU,KAAK,CAAC;MACrCC,MAAM,EAAE;KACR,CAAC;IAEJ,IAAI,CAACC,SAAS,GAAGZ,OAAO,CAACU,KAAK;EAC/B;EAEA,OAAOT,WAAWA,CAAA;IACjB,OAAOY,MAAM,CAACC,MAAM,CAACjB,cAAc,CAACI,WAAW,EAAE,EAAE;MAClDS,KAAK,EAAE;KACP,CAAC;EACH;EAEA;;;;EAIQD,QAAQA,CAACM,QAAgB;IAChC,OAAQC,GAAW,IAAI;MACtB,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACH,GAAG,CAAC,EAAED,QAAQ,CAAC;IACzC,CAAC;EACF;EAEA;;;EAGA,IAAIL,KAAKA,CAAA;IACR,OAAO,IAAI,CAACE,SAAS;EACtB;EACA,IAAIF,KAAKA,CAACK,QAAgB;IACzB,IAAI,CAACH,SAAS,GAAGG,QAAQ;IACzB,IAAI,CAACX,eAAe,CAACgB,MAAM,CAAC,IAAI,CAACX,QAAQ,CAAC,IAAI,CAACG,SAAS,CAAC,CAAC;EAC3D;EAEA;;;EAGAS,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACjB,eAAe,CAACiB,OAAO,EAAE;IAC9B,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}