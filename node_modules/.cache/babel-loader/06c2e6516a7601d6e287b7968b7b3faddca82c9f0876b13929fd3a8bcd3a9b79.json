{"ast":null,"code":"import { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Negate } from \"../signal/Negate.js\";\nimport { Signal } from \"../signal/Signal.js\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n  constructor() {\n    super(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"]));\n    this.override = false;\n    this.name = \"Subtract\";\n    /**\n     * the summing node\n     */\n    this._sum = new Gain({\n      context: this.context\n    });\n    this.input = this._sum;\n    this.output = this._sum;\n    /**\n     * Negate the input of the second input before connecting it to the summing node.\n     */\n    this._neg = new Negate({\n      context: this.context\n    });\n    /**\n     * The value which is subtracted from the main signal\n     */\n    this.subtrahend = this._param;\n    connectSeries(this._constantSource, this._neg, this._sum);\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._neg.dispose();\n    this._sum.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["connectSeries","Gain","optionsFromArguments","Negate","Signal","Subtract","constructor","getDefaults","arguments","override","name","_sum","context","input","output","_neg","subtrahend","_param","_constantSource","Object","assign","value","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/signal/Subtract.ts"],"sourcesContent":["import { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Negate } from \"../signal/Negate.js\";\nimport { Signal, SignalOptions } from \"../signal/Signal.js\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n\toverride = false;\n\n\treadonly name: string = \"Subtract\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input: Gain = this._sum;\n\treadonly output: Gain = this._sum;\n\n\t/**\n\t * Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context: this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value The value to subtract from the incoming signal. If the value\n\t *             is omitted, it will subtract the second signal from the first.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(\n\t\t\toptionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])\n\t\t);\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kCAAkC;AAChE,SAASC,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,MAAM,QAAuB,qBAAqB;AAE3D;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,MAAOC,QAAS,SAAQD,MAAM;EA4BnCE,YAAA;IACC,KAAK,CACJJ,oBAAoB,CAACG,QAAQ,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAClE;IA9BF,KAAAC,QAAQ,GAAG,KAAK;IAEP,KAAAC,IAAI,GAAW,UAAU;IAElC;;;IAGQ,KAAAC,IAAI,GAAS,IAAIV,IAAI,CAAC;MAAEW,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAC/C,KAAAC,KAAK,GAAS,IAAI,CAACF,IAAI;IACvB,KAAAG,MAAM,GAAS,IAAI,CAACH,IAAI;IAEjC;;;IAGQ,KAAAI,IAAI,GAAW,IAAIZ,MAAM,CAAC;MAAES,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAE5D;;;IAGA,KAAAI,UAAU,GAAoB,IAAI,CAACC,MAAM;IAaxCjB,aAAa,CAAC,IAAI,CAACkB,eAAe,EAAE,IAAI,CAACH,IAAI,EAAE,IAAI,CAACJ,IAAI,CAAC;EAC1D;EAEA,OAAOJ,WAAWA,CAAA;IACjB,OAAOY,MAAM,CAACC,MAAM,CAAChB,MAAM,CAACG,WAAW,EAAE,EAAE;MAC1Cc,KAAK,EAAE;KACP,CAAC;EACH;EAEAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACP,IAAI,CAACO,OAAO,EAAE;IACnB,IAAI,CAACX,IAAI,CAACW,OAAO,EAAE;IACnB,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}