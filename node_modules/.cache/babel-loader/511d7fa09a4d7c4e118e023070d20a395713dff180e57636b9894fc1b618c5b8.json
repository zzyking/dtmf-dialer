{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { AudioToGain } from \"../../signal/AudioToGain.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform } from \"./OscillatorInterface.js\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source {\n  constructor() {\n    const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    super(options);\n    this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n    this._modulationScale = new AudioToGain({\n      context: this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n    this._modulationNode = new Gain({\n      context: this.context\n    });\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    // connections\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n    this._carrier.chain(this._modulationNode, this.output);\n    readOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    this._modulator.start(time);\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    this._modulator.stop(time);\n    this._carrier.stop(time);\n  }\n  _restart(time) {\n    this._modulator.restart(time);\n    this._carrier.restart(time);\n  }\n  /**\n   * The type of the carrier oscillator\n   */\n  get type() {\n    return this._carrier.type;\n  }\n  set type(type) {\n    this._carrier.type = type;\n  }\n  get baseType() {\n    return this._carrier.baseType;\n  }\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n  get modulationType() {\n    return this._modulator.type;\n  }\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n  get phase() {\n    return this._carrier.phase;\n  }\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n  get partials() {\n    return this._carrier.partials;\n  }\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n    this._carrier.dispose();\n    this._modulator.dispose();\n    this._modulationNode.dispose();\n    this._modulationScale.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","optionsFromArguments","readOnly","AudioToGain","Multiply","Source","Oscillator","generateWaveform","AMOscillator","constructor","options","getDefaults","arguments","name","_modulationScale","context","_modulationNode","_carrier","detune","frequency","onstop","phase","type","_modulator","modulationType","harmonicity","units","value","chain","gain","output","Object","assign","_start","time","start","_stop","stop","_restart","restart","baseType","partialCount","partials","asArray","length","dispose"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/source/oscillator/AMOscillator.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain.js\";\nimport { Degrees, Frequency, Seconds } from \"../../core/type/Units.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { AudioToGain } from \"../../signal/AudioToGain.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport {\n\tAMConstructorOptions,\n\tAMOscillatorOptions,\n\tgenerateWaveform,\n\tNonCustomOscillatorType,\n\tToneOscillatorInterface,\n\tToneOscillatorType,\n} from \"./OscillatorInterface.js\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface.js\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator\n\textends Source<AMOscillatorOptions>\n\timplements ToneOscillatorInterface\n{\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amOsc = new Tone.AMOscillator(\"D2\").toDestination().start();\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tamOsc.harmonicity.setValueAtTime(1, time);\n\t * \tamOsc.harmonicity.setValueAtTime(0.5, time + 0.5);\n\t * \tamOsc.harmonicity.setValueAtTime(1.5, time + 1);\n\t * \tamOsc.harmonicity.setValueAtTime(1, time + 2);\n\t * \tamOsc.harmonicity.linearRampToValueAtTime(2, time + 4);\n\t * }, 4);\n\t * Tone.Transport.start();\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(\n\t\tfrequency?: Frequency,\n\t\ttype?: ToneOscillatorType,\n\t\tmodulationType?: ToneOscillatorType\n\t);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(\n\t\t\tAMOscillator.getDefaults(),\n\t\t\targuments,\n\t\t\t[\"frequency\", \"type\", \"modulationType\"]\n\t\t);\n\t\tsuper(options);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\t(this.frequency = this._carrier.frequency),\n\t\t\t(this.detune = this._carrier.detune);\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}