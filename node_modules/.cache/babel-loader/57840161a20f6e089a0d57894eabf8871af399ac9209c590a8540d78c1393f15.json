{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n    super(options);\n    this.name = \"Split\";\n    this._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n    this._internalChannels = [this._splitter];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._splitter.disconnect();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","Split","constructor","options","getDefaults","arguments","name","_splitter","input","output","context","createChannelSplitter","channels","_internalChannels","Object","assign","dispose","disconnect"],"sources":["/Users/king/Documents/GitHub/dtmf-dialer/node_modules/tone/Tone/component/channel/Split.ts"],"sourcesContent":["import {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n\ninterface SplitOptions extends ToneAudioNodeOptions {\n\tchannels: number;\n}\n\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode<SplitOptions> {\n\treadonly name: string = \"Split\";\n\n\t/**\n\t * The splitting node\n\t */\n\tprivate _splitter: ChannelSplitterNode;\n\n\treadonly input: ChannelSplitterNode;\n\treadonly output: ChannelSplitterNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: number);\n\tconstructor(options?: Partial<SplitOptions>);\n\tconstructor() {\n\t\tconst options = optionsFromArguments(Split.getDefaults(), arguments, [\n\t\t\t\"channels\",\n\t\t]);\n\t\tsuper(options);\n\n\t\tthis._splitter =\n\t\t\tthis.input =\n\t\t\tthis.output =\n\t\t\t\tthis.context.createChannelSplitter(options.channels);\n\t\tthis._internalChannels = [this._splitter];\n\t}\n\n\tstatic getDefaults(): SplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.disconnect();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SACCA,aAAa,QAEP,qCAAqC;AAC5C,SAASC,oBAAoB,QAAQ,6BAA6B;AAMlE;;;;;;;;AAQA,OAAM,MAAOC,KAAM,SAAQF,aAA2B;EAgBrDG,YAAA;IACC,MAAMC,OAAO,GAAGH,oBAAoB,CAACC,KAAK,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CACpE,UAAU,CACV,CAAC;IACF,KAAK,CAACF,OAAO,CAAC;IAnBN,KAAAG,IAAI,GAAW,OAAO;IAqB9B,IAAI,CAACC,SAAS,GACb,IAAI,CAACC,KAAK,GACV,IAAI,CAACC,MAAM,GACV,IAAI,CAACC,OAAO,CAACC,qBAAqB,CAACR,OAAO,CAACS,QAAQ,CAAC;IACtD,IAAI,CAACC,iBAAiB,GAAG,CAAC,IAAI,CAACN,SAAS,CAAC;EAC1C;EAEA,OAAOH,WAAWA,CAAA;IACjB,OAAOU,MAAM,CAACC,MAAM,CAAChB,aAAa,CAACK,WAAW,EAAE,EAAE;MACjDQ,QAAQ,EAAE;KACV,CAAC;EACH;EAEAI,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACT,SAAS,CAACU,UAAU,EAAE;IAC3B,OAAO,IAAI;EACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}